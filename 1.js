(window.webpackJsonp=window.webpackJsonp||[]).push([[1],Array(1107).concat([function(t,e,r){"use strict";r.r(e),function(t){r.d(e,"AElement",(function(){return sn})),r.d(e,"AnimateColorElement",(function(){return Yr})),r.d(e,"AnimateElement",(function(){return Ur})),r.d(e,"AnimateTransformElement",(function(){return Qr})),r.d(e,"BoundingBox",(function(){return Ke})),r.d(e,"CB1",(function(){return xe})),r.d(e,"CB2",(function(){return me})),r.d(e,"CB3",(function(){return be})),r.d(e,"CB4",(function(){return Se})),r.d(e,"Canvg",(function(){return ei})),r.d(e,"CircleElement",(function(){return gr})),r.d(e,"ClipPathElement",(function(){return Vn})),r.d(e,"DefsElement",(function(){return _r})),r.d(e,"DescElement",(function(){return Wn})),r.d(e,"Document",(function(){return Jn})),r.d(e,"Element",(function(){return qe})),r.d(e,"EllipseElement",(function(){return mr})),r.d(e,"FeColorMatrixElement",(function(){return En})),r.d(e,"FeCompositeElement",(function(){return Hn})),r.d(e,"FeDropShadowElement",(function(){return jn})),r.d(e,"FeGaussianBlurElement",(function(){return Xn})),r.d(e,"FeMorphologyElement",(function(){return Fn})),r.d(e,"FilterElement",(function(){return In})),r.d(e,"Font",(function(){return Je})),r.d(e,"FontElement",(function(){return Zr})),r.d(e,"FontFaceElement",(function(){return Kr})),r.d(e,"GElement",(function(){return Rr})),r.d(e,"GlyphElement",(function(){return nn})),r.d(e,"GradientElement",(function(){return Dr})),r.d(e,"ImageElement",(function(){return dn})),r.d(e,"LineElement",(function(){return Sr})),r.d(e,"LinearGradientElement",(function(){return Lr})),r.d(e,"MarkerElement",(function(){return Er})),r.d(e,"MaskElement",(function(){return _n})),r.d(e,"Matrix",(function(){return je})),r.d(e,"MissingGlyphElement",(function(){return en})),r.d(e,"Mouse",(function(){return Ce})),r.d(e,"PSEUDO_ZERO",(function(){return ve})),r.d(e,"Parser",(function(){return Ve})),r.d(e,"PathElement",(function(){return lr})),r.d(e,"PathParser",(function(){return cr})),r.d(e,"PatternElement",(function(){return Or})),r.d(e,"Point",(function(){return Oe})),r.d(e,"PolygonElement",(function(){return Tr})),r.d(e,"PolylineElement",(function(){return Ar})),r.d(e,"Property",(function(){return Te})),r.d(e,"QB1",(function(){return we})),r.d(e,"QB2",(function(){return Ae})),r.d(e,"QB3",(function(){return ke})),r.d(e,"RadialGradientElement",(function(){return zr})),r.d(e,"RectElement",(function(){return yr})),r.d(e,"RenderedElement",(function(){return er})),r.d(e,"Rotate",(function(){return Ie})),r.d(e,"SVGElement",(function(){return pr})),r.d(e,"SVGFontLoader",(function(){return mn})),r.d(e,"Scale",(function(){return Le})),r.d(e,"Screen",(function(){return _e})),r.d(e,"Skew",(function(){return Fe})),r.d(e,"SkewX",(function(){return He})),r.d(e,"SkewY",(function(){return Xe})),r.d(e,"StopElement",(function(){return Br})),r.d(e,"StyleElement",(function(){return Sn})),r.d(e,"SymbolElement",(function(){return xn})),r.d(e,"TRefElement",(function(){return an})),r.d(e,"TSpanElement",(function(){return or})),r.d(e,"TextElement",(function(){return nr})),r.d(e,"TextPathElement",(function(){return vn})),r.d(e,"TitleElement",(function(){return qn})),r.d(e,"Transform",(function(){return Ye})),r.d(e,"Translate",(function(){return De})),r.d(e,"UnknownElement",(function(){return We})),r.d(e,"UseElement",(function(){return An})),r.d(e,"ViewPort",(function(){return Pe})),r.d(e,"compressSpaces",(function(){return Zt})),r.d(e,"getSelectorSpecificity",(function(){return pe})),r.d(e,"normalizeAttributeName",(function(){return re})),r.d(e,"normalizeColor",(function(){return ie})),r.d(e,"parseExternalUrl",(function(){return ne})),r.d(e,"presets",(function(){return ri})),r.d(e,"toNumbers",(function(){return te})),r.d(e,"trimLeft",(function(){return Jt})),r.d(e,"trimRight",(function(){return Kt})),r.d(e,"vectorMagnitude",(function(){return ye})),r.d(e,"vectorsAngle",(function(){return ge})),r.d(e,"vectorsRatio",(function(){return de}));var n=r(1239),i=r.n(n),o=r(1246),a=r.n(o),u=r(1251),s=r.n(u),c=r(1256),f=r.n(c),l=r(1298),h=r.n(l),p=r(1301),v=r.n(p),y=r(1305),d=r.n(y),g=r(1310),x=r.n(g),m=r(1316),b=r.n(m),S=r(1319),w=r.n(S),A=r(1324),k=r.n(A),T=r(1327),P=r.n(T),O=r(1331),C=r.n(O),E=r(1332),M=r.n(E),_=r(1343),N=r.n(_),R=r(1345),V=r.n(R),D=r(1346),I=r.n(D),L=r(1347),j=r.n(L),z=r(1351),F=r.n(z),B=r(1357),H=r.n(B),U=r(1361),X=r.n(U),Y=r(1366),q=r.n(Y),Q=r(1368),W=r.n(Q),G=r(1373),$=r.n(G),Z=r(1375),J=r.n(Z),K=r(1381),tt=r.n(K),et=r(1382),rt=r.n(et),nt=r(1386),it=r.n(nt),ot=r(1395),at=r.n(ot),ut=r(1237),st=r.n(ut),ct=r(1404),ft=r.n(ct),lt=r(1408),ht=r.n(lt),pt=r(1413),vt=r.n(pt),yt=r(1420),dt=r.n(yt),gt=r(1422),xt=r.n(gt),mt=r(1427),bt=r.n(mt),St=r(1432),wt=r.n(St),At=r(1440),kt=r.n(At),Tt=r(1446),Pt=r(1447),Ot=r.n(Pt),Ct=r(1236),Et=r.n(Ct),Mt=r(1451),_t=r.n(Mt),Nt=r(1455),Rt=r.n(Nt),Vt=r(1460),Dt=r.n(Vt),It=r(1463),Lt=r.n(It),jt=r(1186),zt=r.n(jt),Ft=r(1465),Bt=r.n(Ft),Ht=r(1467),Ut=r.n(Ht),Xt=r(1469),Yt=r.n(Xt),qt=r(1476),Qt=r.n(qt),Wt=r(1480),Gt=r.n(Wt),$t=r(1484);function Zt(t){return t.replace(/(?!\u3000)\s+/gm," ")}function Jt(t){return t.replace(/^[\n \t]+/,"")}function Kt(t){return t.replace(/[\n \t]+$/,"")}function te(t){var e=(t||"").match(/-?(\d+(?:\.\d*(?:[eE][+-]?\d+)?)?|\.\d+)(?=\D|$)/gm)||[];return s()(e).call(e,a.a)}var ee=/^[A-Z-]+$/;function re(t){return ee.test(t)?t.toLowerCase():t}function ne(t){var e=t.match(/url\(('([^']+)'|"([^"]+)"|([^'"\)]+))\)/)||[];return e[2]||e[3]||e[4]}function ie(t){if(!i()(t).call(t,"rgb"))return t;var e=3;return t.replace(/\d+(\.\d+)?/g,(function(t,r){return e--&&r?String(Math.round(a()(t))):t}))}var oe=/(\[[^\]]+\])/g,ae=/(#[^\s\+>~\.\[:]+)/g,ue=/(\.[^\s\+>~\.\[:]+)/g,se=/(::[^\s\+>~\.\[:]+|:first-line|:first-letter|:before|:after)/gi,ce=/(:[\w-]+\([^\)]*\))/gi,fe=/(:[^\s\+>~\.\[:]+)/g,le=/([^\s\+>~\.\[:]+)/g;function he(t,e){var r=t.match(e);return r?[t.replace(e," "),r.length]:[t,0]}function pe(t){var e=[0,0,0],r=t.replace(/:not\(([^\)]*)\)/g,"     $1 ").replace(/{[\s\S]*/gm," "),n=0,i=he(r,oe),o=f()(i,2);r=o[0],n=o[1],e[1]+=n;var a=he(r,ae),u=f()(a,2);r=u[0],n=u[1],e[0]+=n;var s=he(r,ue),c=f()(s,2);r=c[0],n=c[1],e[1]+=n;var l=he(r,se),h=f()(l,2);r=h[0],n=h[1],e[2]+=n;var p=he(r,ce),v=f()(p,2);r=v[0],n=v[1],e[1]+=n;var y=he(r,fe),d=f()(y,2);r=d[0],n=d[1],e[1]+=n;var g=he(r=r.replace(/[\*\s\+>~]/g," ").replace(/[#\.]/g," "),le),x=f()(g,2);return r=x[0],n=x[1],e[2]+=n,e.join("")}var ve=1e-8;function ye(t){return Math.sqrt(Math.pow(t[0],2)+Math.pow(t[1],2))}function de(t,e){return(t[0]*e[0]+t[1]*e[1])/(ye(t)*ye(e))}function ge(t,e){return(t[0]*e[1]<t[1]*e[0]?-1:1)*Math.acos(de(t,e))}function xe(t){return t*t*t}function me(t){return 3*t*t*(1-t)}function be(t){return 3*t*(1-t)*(1-t)}function Se(t){return(1-t)*(1-t)*(1-t)}function we(t){return t*t}function Ae(t){return 2*t*(1-t)}function ke(t){return(1-t)*(1-t)}var Te=function(){function t(e,r,n){V()(this,t),this.document=e,this.name=r,this.value=n,this.isNormalizedColor=!1}return I()(t,[{key:"split",value:function(){var e,r,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:" ",i=this.document,o=this.name;return s()(e=J()(r=Zt(this.getString())).call(r).split(n)).call(e,(function(e){return new t(i,o,e)}))}},{key:"hasValue",value:function(t){var e=this.value;return null!==e&&""!==e&&(t||0!==e)&&void 0!==e}},{key:"isString",value:function(t){var e=this.value,r="string"==typeof e;return r&&t?t.test(e):r}},{key:"isUrlDefinition",value:function(){return this.isString(/^url\(/)}},{key:"isPixels",value:function(){if(!this.hasValue())return!1;var t=this.getString();switch(!0){case/px$/.test(t):case/^[0-9]+$/.test(t):return!0;default:return!1}}},{key:"setValue",value:function(t){return this.value=t,this}},{key:"getValue",value:function(t){return void 0===t||this.hasValue()?this.value:t}},{key:"getNumber",value:function(t){if(!this.hasValue())return void 0===t?0:a()(t);var e=this.value,r=a()(e);return this.isString(/%$/)&&(r/=100),r}},{key:"getString",value:function(t){return void 0===t||this.hasValue()?void 0===this.value?"":String(this.value):String(t)}},{key:"getColor",value:function(t){var e=this.getString(t);return this.isNormalizedColor||(this.isNormalizedColor=!0,e=ie(e),this.value=e),e}},{key:"getDpi",value:function(){return 96}},{key:"getRem",value:function(){return this.document.rootEmSize}},{key:"getEm",value:function(){return this.document.emSize}},{key:"getUnits",value:function(){return this.getString().replace(/[0-9\.\-]/g,"")}},{key:"getPixels",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(!this.hasValue())return 0;var r="boolean"==typeof t?[void 0,t]:[t],n=f()(r,2),i=n[0],o=n[1],a=this.document.screen.viewPort;switch(!0){case this.isString(/vmin$/):return this.getNumber()/100*Math.min(a.computeSize("x"),a.computeSize("y"));case this.isString(/vmax$/):return this.getNumber()/100*Math.max(a.computeSize("x"),a.computeSize("y"));case this.isString(/vw$/):return this.getNumber()/100*a.computeSize("x");case this.isString(/vh$/):return this.getNumber()/100*a.computeSize("y");case this.isString(/rem$/):return this.getNumber()*this.getRem();case this.isString(/em$/):return this.getNumber()*this.getEm();case this.isString(/ex$/):return this.getNumber()*this.getEm()/2;case this.isString(/px$/):return this.getNumber();case this.isString(/pt$/):return this.getNumber()*this.getDpi()*(1/72);case this.isString(/pc$/):return 15*this.getNumber();case this.isString(/cm$/):return this.getNumber()*this.getDpi()/2.54;case this.isString(/mm$/):return this.getNumber()*this.getDpi()/25.4;case this.isString(/in$/):return this.getNumber()*this.getDpi();case this.isString(/%$/)&&o:return this.getNumber()*this.getEm();case this.isString(/%$/):return this.getNumber()*a.computeSize(i);default:var u=this.getNumber();return e&&u<1?u*a.computeSize(i):u}}},{key:"getMilliseconds",value:function(){return this.hasValue()?this.isString(/ms$/)?this.getNumber():1e3*this.getNumber():0}},{key:"getRadians",value:function(){if(!this.hasValue())return 0;switch(!0){case this.isString(/deg$/):return this.getNumber()*(Math.PI/180);case this.isString(/grad$/):return this.getNumber()*(Math.PI/200);case this.isString(/rad$/):return this.getNumber();default:return this.getNumber()*(Math.PI/180)}}},{key:"getDefinition",value:function(){var t=this.getString(),e=t.match(/#([^\)'"]+)/);return e&&(e=e[1]),e||(e=t),this.document.definitions[e]}},{key:"getFillStyleDefinition",value:function(t,e){var r=this.getDefinition();if(!r)return null;if("function"==typeof r.createGradient)return r.createGradient(this.document.ctx,t,e);if("function"==typeof r.createPattern){if(r.getHrefAttribute().hasValue()){var n=r.getAttribute("patternTransform");r=r.getHrefAttribute().getDefinition(),n.hasValue()&&r.getAttribute("patternTransform",!0).setValue(n.value)}return r.createPattern(this.document.ctx,t,e)}return null}},{key:"getTextBaseline",value:function(){return this.hasValue()?t.textBaselineMapping[this.getString()]:null}},{key:"addOpacity",value:function(e){for(var r=this.getColor(),n=r.length,i=0,o=0;o<n&&(","===r[o]&&i++,3!==i);o++);if(e.hasValue()&&this.isString()&&3!==i){var a=new tt.a(r);a.ok&&(a.alpha=e.getNumber(),r=a.toRGBA())}return new t(this.document,this.name,r)}}],[{key:"empty",value:function(e){return new t(e,"EMPTY","")}}]),t}();Te.textBaselineMapping={baseline:"alphabetic","before-edge":"top","text-before-edge":"top",middle:"middle",central:"middle","after-edge":"bottom","text-after-edge":"bottom",ideographic:"ideographic",alphabetic:"alphabetic",hanging:"hanging",mathematical:"alphabetic"};var Pe=function(){function t(){V()(this,t),this.viewPorts=[]}return I()(t,[{key:"clear",value:function(){this.viewPorts=[]}},{key:"setCurrent",value:function(t,e){this.viewPorts.push({width:t,height:e})}},{key:"removeCurrent",value:function(){this.viewPorts.pop()}},{key:"getCurrent",value:function(){var t=this.viewPorts;return t[t.length-1]}},{key:"computeSize",value:function(t){return"number"==typeof t?t:"x"===t?this.width:"y"===t?this.height:Math.sqrt(Math.pow(this.width,2)+Math.pow(this.height,2))/Math.sqrt(2)}},{key:"width",get:function(){return this.getCurrent().width}},{key:"height",get:function(){return this.getCurrent().height}}]),t}(),Oe=function(){function t(e,r){V()(this,t),this.x=e,this.y=r}return I()(t,[{key:"angleTo",value:function(t){return Math.atan2(t.y-this.y,t.x-this.x)}},{key:"applyTransform",value:function(t){var e=this.x,r=this.y,n=e*t[0]+r*t[2]+t[4],i=e*t[1]+r*t[3]+t[5];this.x=n,this.y=i}}],[{key:"parse",value:function(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=te(e),i=f()(n,2),o=i[0],a=void 0===o?r:o,u=i[1],s=void 0===u?r:u;return new t(a,s)}},{key:"parseScale",value:function(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,n=te(e),i=f()(n,2),o=i[0],a=void 0===o?r:o,u=i[1],s=void 0===u?a:u;return new t(a,s)}},{key:"parsePath",value:function(e){for(var r=te(e),n=r.length,i=[],o=0;o<n;o+=2)i.push(new t(r[o],r[o+1]));return i}}]),t}(),Ce=function(){function t(e){var r,n;V()(this,t),this.screen=e,this.working=!1,this.events=[],this.eventElements=[],this.onClick=W()(r=this.onClick).call(r,this),this.onMouseMove=W()(n=this.onMouseMove).call(n,this)}return I()(t,[{key:"isWorking",value:function(){return this.working}},{key:"start",value:function(){if(!this.working){var t=this.screen,e=this.onClick,r=this.onMouseMove,n=t.ctx.canvas;n.onclick=e,n.onmousemove=r,this.working=!0}}},{key:"stop",value:function(){if(this.working){var t=this.screen.ctx.canvas;this.working=!1,t.onclick=null,t.onmousemove=null}}},{key:"hasEvents",value:function(){return this.working&&this.events.length>0}},{key:"runEvents",value:function(){if(this.working){var t=this.screen,e=this.events,r=this.eventElements,n=t.ctx.canvas.style;n&&(n.cursor=""),x()(e).call(e,(function(t,e){for(var n=t.run,i=r[e];i;)n(i),i=i.parent})),this.events=[],this.eventElements=[]}}},{key:"checkPath",value:function(t,e){if(this.working&&e){var r=this.events,n=this.eventElements;x()(r).call(r,(function(r,i){var o=r.x,a=r.y;!n[i]&&e.isPointInPath&&e.isPointInPath(o,a)&&(n[i]=t)}))}}},{key:"checkBoundingBox",value:function(t,e){if(this.working&&e){var r=this.events,n=this.eventElements;x()(r).call(r,(function(r,i){var o=r.x,a=r.y;!n[i]&&e.isPointInBox(o,a)&&(n[i]=t)}))}}},{key:"mapXY",value:function(t,e){for(var r=this.screen,n=r.window,i=r.ctx,o=new Oe(t,e),a=i.canvas;a;)o.x-=a.offsetLeft,o.y-=a.offsetTop,a=a.offsetParent;return n.scrollX&&(o.x+=n.scrollX),n.scrollY&&(o.y+=n.scrollY),o}},{key:"onClick",value:function(t){var e=this.mapXY((t||event).clientX,(t||event).clientY),r=e.x,n=e.y;this.events.push({type:"onclick",x:r,y:n,run:function(t){t.onClick&&t.onClick()}})}},{key:"onMouseMove",value:function(t){var e=this.mapXY((t||event).clientX,(t||event).clientY),r=e.x,n=e.y;this.events.push({type:"onmousemove",x:r,y:n,run:function(t){t.onMouseMove&&t.onMouseMove()}})}}]),t}(),Ee="undefined"!=typeof window?window:null,Me="undefined"!=typeof fetch?W()(fetch).call(fetch,void 0):null,_e=function(){function t(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=r.fetch,i=void 0===n?Me:n,o=r.window,a=void 0===o?Ee:o;V()(this,t),this.ctx=e,this.FRAMERATE=30,this.MAX_VIRTUAL_PIXELS=3e4,this.CLIENT_WIDTH=800,this.CLIENT_HEIGHT=600,this.viewPort=new Pe,this.mouse=new Ce(this),this.animations=[],this.waits=[],this.frameDuration=0,this.isReadyLock=!1,this.isFirstRender=!0,this.intervalId=null,this.window=a,this.fetch=i}return I()(t,[{key:"wait",value:function(t){this.waits.push(t)}},{key:"ready",value:function(){return this.readyPromise?this.readyPromise:q.a.resolve()}},{key:"isReady",value:function(){var t;if(this.isReadyLock)return!0;var e=X()(t=this.waits).call(t,(function(t){return t()}));return e&&(this.waits=[],this.resolveReady&&this.resolveReady()),this.isReadyLock=e,e}},{key:"setDefaults",value:function(t){t.strokeStyle="rgba(0,0,0,0)",t.lineCap="butt",t.lineJoin="miter",t.miterLimit=4}},{key:"setViewBox",value:function(t){var e=t.document,r=t.ctx,n=t.aspectRatio,i=t.width,o=t.desiredWidth,a=t.height,u=t.desiredHeight,s=t.minX,c=void 0===s?0:s,l=t.minY,h=void 0===l?0:l,p=t.refX,v=t.refY,y=t.clip,d=void 0!==y&&y,g=t.clipX,x=void 0===g?0:g,m=t.clipY,b=void 0===m?0:m,S=Zt(n).replace(/^defer\s/,"").split(" "),w=f()(S,2),A=w[0]||"xMidYMid",k=w[1]||"meet",T=i/o,P=a/u,O=Math.min(T,P),C=Math.max(T,P),E=o,M=u;"meet"===k&&(E*=O,M*=O),"slice"===k&&(E*=C,M*=C);var _=new Te(e,"refX",p),N=new Te(e,"refY",v),R=_.hasValue()&&N.hasValue();if(R&&r.translate(-O*_.getPixels("x"),-O*N.getPixels("y")),d){var V=O*x,D=O*b;r.beginPath(),r.moveTo(V,D),r.lineTo(i,D),r.lineTo(i,a),r.lineTo(V,a),r.closePath(),r.clip()}if(!R){var I="meet"===k&&O===P,L="slice"===k&&C===P,j="meet"===k&&O===T,z="slice"===k&&C===T;/^xMid/.test(A)&&(I||L)&&r.translate(i/2-E/2,0),/YMid$/.test(A)&&(j||z)&&r.translate(0,a/2-M/2),/^xMax/.test(A)&&(I||L)&&r.translate(i-E,0),/YMax$/.test(A)&&(j||z)&&r.translate(0,a-M)}switch(!0){case"none"===A:r.scale(T,P);break;case"meet"===k:r.scale(O,O);break;case"slice"===k:r.scale(C,C)}r.translate(-c,-h)}},{key:"start",value:function(t){var e=this,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=r.enableRedraw,i=void 0!==n&&n,o=r.ignoreMouse,a=void 0!==o&&o,u=r.ignoreAnimation,s=void 0!==u&&u,c=r.ignoreDimensions,f=void 0!==c&&c,l=r.ignoreClear,h=void 0!==l&&l,p=r.forceRedraw,v=r.scaleWidth,y=r.scaleHeight,d=r.offsetX,g=r.offsetY,x=this.FRAMERATE,m=this.mouse,b=1e3/x;if(this.frameDuration=b,this.readyPromise=new q.a((function(t){e.resolveReady=t})),this.isReady()&&this.render(t,f,h,v,y,d,g),i){var S=H()(),w=S,A=0,k=function r(){S=H()(),(A=S-w)>=b&&(w=S-A%b,e.shouldUpdate(s,p)&&(e.render(t,f,h,v,y,d,g),m.runEvents())),e.intervalId=$()(r)};a||m.start(),this.intervalId=$()(k)}}},{key:"stop",value:function(){this.intervalId&&($.a.cancel(this.intervalId),this.intervalId=null),this.mouse.stop()}},{key:"shouldUpdate",value:function(t,e){if(!t){var r,n=this.frameDuration,i=F()(r=this.animations).call(r,(function(t,e){return e.update(n)||t}),!1);if(i)return!0}return!("function"!=typeof e||!e())||(!(this.isReadyLock||!this.isReady())||!!this.mouse.hasEvents())}},{key:"render",value:function(t,e,r,n,i,o,a){var u=this.CLIENT_WIDTH,s=this.CLIENT_HEIGHT,c=this.viewPort,f=this.ctx,l=this.isFirstRender,h=f.canvas;c.clear(),h.width&&h.height?c.setCurrent(h.width,h.height):c.setCurrent(u,s);var p=t.getStyle("width"),v=t.getStyle("height");!e&&(l||"number"!=typeof n&&"number"!=typeof i)&&(p.hasValue()&&(h.width=p.getPixels("x"),h.style&&(h.style.width="".concat(h.width,"px"))),v.hasValue()&&(h.height=v.getPixels("y"),h.style&&(h.style.height="".concat(h.height,"px"))));var y=h.clientWidth||h.width,d=h.clientHeight||h.height;if(e&&p.hasValue()&&v.hasValue()&&(y=p.getPixels("x"),d=v.getPixels("y")),c.setCurrent(y,d),"number"==typeof o&&t.getAttribute("x",!0).setValue(o),"number"==typeof a&&t.getAttribute("y",!0).setValue(a),"number"==typeof n||"number"==typeof i){var g,x,m=te(t.getAttribute("viewBox").getString()),b=0,S=0;if("number"==typeof n){var w=t.getStyle("width");w.hasValue()?b=w.getPixels("x")/n:isNaN(m[2])||(b=m[2]/n)}if("number"==typeof i){var A=t.getStyle("height");A.hasValue()?S=A.getPixels("y")/i:isNaN(m[3])||(S=m[3]/i)}b||(b=S),S||(S=b),t.getAttribute("width",!0).setValue(n),t.getAttribute("height",!0).setValue(i);var k=t.getStyle("transform",!0,!0);k.setValue(j()(g=j()(x="".concat(k.getString()," scale(")).call(x,1/b,", ")).call(g,1/S,")"))}r||f.clearRect(0,0,y,d),t.render(f),l&&(this.isFirstRender=!1)}}]),t}();_e.defaultWindow=Ee,_e.defaultFetch=Me;var Ne=_e.defaultFetch,Re="undefined"!=typeof DOMParser?DOMParser:null,Ve=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=e.fetch,n=void 0===r?Ne:r,i=e.DOMParser,o=void 0===i?Re:i;V()(this,t),this.fetch=n,this.DOMParser=o}var e,r;return I()(t,[{key:"parse",value:(r=M()(C.a.mark((function t(e){return C.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(!/^</.test(e)){t.next=2;break}return t.abrupt("return",this.parseFromString(e));case 2:return t.abrupt("return",this.load(e));case 3:case"end":return t.stop()}}),t,this)}))),function(t){return r.apply(this,arguments)})},{key:"parseFromString",value:function(t){var e=new this.DOMParser;try{return this.checkDocument(e.parseFromString(t,"image/svg+xml"))}catch(r){return this.checkDocument(e.parseFromString(t,"text/xml"))}}},{key:"checkDocument",value:function(t){var e=t.getElementsByTagName("parsererror")[0];if(e)throw new Error(e.textContent);return t}},{key:"load",value:(e=M()(C.a.mark((function t(e){var r,n;return C.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this.fetch(e);case 2:return r=t.sent,t.next=5,r.text();case 5:return n=t.sent,t.abrupt("return",this.parseFromString(n));case 7:case"end":return t.stop()}}),t,this)}))),function(t){return e.apply(this,arguments)})}]),t}(),De=function(){function t(e,r){V()(this,t),this.type="translate",this.point=null,this.point=Oe.parse(r)}return I()(t,[{key:"apply",value:function(t){var e=this.point,r=e.x,n=e.y;t.translate(r||0,n||0)}},{key:"unapply",value:function(t){var e=this.point,r=e.x,n=e.y;t.translate(-1*r||0,-1*n||0)}},{key:"applyToPoint",value:function(t){var e=this.point,r=e.x,n=e.y;t.applyTransform([1,0,0,1,r||0,n||0])}}]),t}(),Ie=function(){function t(e,r,n){V()(this,t),this.type="rotate",this.angle=null,this.originX=null,this.originY=null,this.cx=0,this.cy=0;var i=te(r);this.angle=new Te(e,"angle",i[0]),this.originX=n[0],this.originY=n[1],this.cx=i[1]||0,this.cy=i[2]||0}return I()(t,[{key:"apply",value:function(t){var e=this.cx,r=this.cy,n=this.originX,i=this.originY,o=this.angle,a=e+n.getPixels("x"),u=r+i.getPixels("y");t.translate(a,u),t.rotate(o.getRadians()),t.translate(-a,-u)}},{key:"unapply",value:function(t){var e=this.cx,r=this.cy,n=this.angle;t.translate(e,r),t.rotate(-1*n.getRadians()),t.translate(-e,-r)}},{key:"applyToPoint",value:function(t){var e=this.cx,r=this.cy,n=this.angle.getRadians();t.applyTransform([1,0,0,1,e||0,r||0]),t.applyTransform([Math.cos(n),Math.sin(n),-Math.sin(n),Math.cos(n),0,0]),t.applyTransform([1,0,0,1,-e||0,-r||0])}}]),t}(),Le=function(){function t(e,r){V()(this,t),this.type="scale",this.scale=null;var n=Oe.parseScale(r);0!==n.x&&0!==n.y||(n.x=ve,n.y=ve),this.scale=n}return I()(t,[{key:"apply",value:function(t){var e=this.scale,r=e.x,n=e.y;t.scale(r,n||r)}},{key:"unapply",value:function(t){var e=this.scale,r=e.x,n=e.y;t.scale(1/r,1/n||r)}},{key:"applyToPoint",value:function(t){var e=this.scale,r=e.x,n=e.y;t.applyTransform([r||0,0,0,n||0,0,0])}}]),t}(),je=function(){function t(e,r){V()(this,t),this.type="matrix",this.matrix=[],this.matrix=te(r)}return I()(t,[{key:"apply",value:function(t){var e=this.matrix;t.transform(e[0],e[1],e[2],e[3],e[4],e[5])}},{key:"unapply",value:function(t){var e=this.matrix,r=e[0],n=e[2],i=e[4],o=e[1],a=e[3],u=e[5],s=1/(r*(1*a-0*u)-n*(1*o-0*u)+i*(0*o-0*a));t.transform(s*(1*a-0*u),s*(0*u-1*o),s*(0*i-1*n),s*(1*r-0*i),s*(n*u-i*a),s*(i*o-r*u))}},{key:"applyToPoint",value:function(t){t.applyTransform(this.matrix)}}]),t}();function ze(t){var e=function(){if("undefined"==typeof Reflect||!rt.a)return!1;if(rt.a.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(rt()(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=st()(t);if(e){var i=st()(this).constructor;r=rt()(n,arguments,i)}else r=n.apply(this,arguments);return at()(this,r)}}var Fe=function(t){it()(r,t);var e=ze(r);function r(t,n){var i;return V()(this,r),(i=e.call(this,t,n)).type="skew",i.angle=null,i.angle=new Te(t,"angle",n),i}return r}(je);function Be(t){var e=function(){if("undefined"==typeof Reflect||!rt.a)return!1;if(rt.a.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(rt()(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=st()(t);if(e){var i=st()(this).constructor;r=rt()(n,arguments,i)}else r=n.apply(this,arguments);return at()(this,r)}}var He=function(t){it()(r,t);var e=Be(r);function r(t,n){var i;return V()(this,r),(i=e.call(this,t,n)).type="skewX",i.matrix=[1,0,Math.tan(i.angle.getRadians()),1,0,0],i}return r}(Fe);function Ue(t){var e=function(){if("undefined"==typeof Reflect||!rt.a)return!1;if(rt.a.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(rt()(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=st()(t);if(e){var i=st()(this).constructor;r=rt()(n,arguments,i)}else r=n.apply(this,arguments);return at()(this,r)}}var Xe=function(t){it()(r,t);var e=Ue(r);function r(t,n){var i;return V()(this,r),(i=e.call(this,t,n)).type="skewY",i.matrix=[1,Math.tan(i.angle.getRadians()),0,1,0,0],i}return r}(Fe);var Ye=function(){function t(e,r,n){var i=this;V()(this,t),this.document=e,this.transforms=[];var o=function(t){var e;return J()(e=Zt(t)).call(e).replace(/\)([a-zA-Z])/g,") $1").replace(/\)(\s?,\s?)/g,") ").split(/\s(?=[a-z])/)}(r);x()(o).call(o,(function(e){if("none"!==e){var r=function(t){var e=t.split("("),r=f()(e,2),n=r[0],i=r[1];return[J()(n).call(n),J()(i).call(i).replace(")","")]}(e),o=f()(r,2),a=o[0],u=o[1],s=t.transformTypes[a];void 0!==s&&i.transforms.push(new s(i.document,u,n))}}))}return I()(t,[{key:"apply",value:function(t){for(var e=this.transforms,r=e.length,n=0;n<r;n++)e[n].apply(t)}},{key:"unapply",value:function(t){for(var e=this.transforms,r=e.length-1;r>=0;r--)e[r].unapply(t)}},{key:"applyToPoint",value:function(t){for(var e=this.transforms,r=e.length,n=0;n<r;n++)e[n].applyToPoint(t)}}],[{key:"fromElement",value:function(e,r){var n=r.getStyle("transform",!1,!0),i=r.getStyle("transform-origin",!1,!0).split(),o=f()(i,2),a=o[0],u=o[1],s=[a,void 0===u?a:u];return n.hasValue()?new t(e,n.getString(),s):null}}]),t}();Ye.transformTypes={translate:De,rotate:Ie,scale:Le,matrix:je,skewX:He,skewY:Xe};var qe=function(){function t(e,r){var n,i,o=this,a=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(V()(this,t),this.document=e,this.node=r,this.captureTextNodes=a,this.attributes={},this.styles={},this.stylesSpecificity={},this.animationFrozen=!1,this.animationFrozenValue="",this.parent=null,this.children=[],r&&1===r.nodeType){if(x()(n=dt()(r.attributes)).call(n,(function(t){var r=re(t.nodeName);o.attributes[r]=new Te(e,r,t.value)})),this.addStylesFromStyleDefinition(),this.getAttribute("style").hasValue()){var u,c=s()(u=this.getAttribute("style").getString().split(";")).call(u,(function(t){return J()(t).call(t)}));x()(c).call(c,(function(t){var r;if(t){var n=s()(r=t.split(":")).call(r,(function(t){return J()(t).call(t)})),i=f()(n,2),a=i[0],u=i[1];o.styles[a]=new Te(e,a,u)}}))}var l=e.definitions,h=this.getAttribute("id");h.hasValue()&&(l[h.getValue()]||(l[h.getValue()]=this)),x()(i=dt()(r.childNodes)).call(i,(function(t){if(1===t.nodeType)o.addChild(t);else if(a&&(3===t.nodeType||4===t.nodeType)){var r=e.createTextNode(t);r.getText().length>0&&o.addChild(r)}}))}}return I()(t,[{key:"getAttribute",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=this.attributes[t];if(!r&&e){var n=new Te(this.document,t,"");return this.attributes[t]=n,n}return r||Te.empty(this.document)}},{key:"getHrefAttribute",value:function(){for(var t in this.attributes)if("href"===t||/:href$/.test(t))return this.attributes[t];return Te.empty(this.document)}},{key:"getStyle",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=arguments.length>2&&void 0!==arguments[2]&&arguments[2],n=this.styles[t];if(n)return n;var i=this.getAttribute(t);if(i&&i.hasValue())return this.styles[t]=i,i;if(!r){var o=this.parent;if(o){var a=o.getStyle(t);if(a&&a.hasValue())return a}}if(e){var u=new Te(this.document,t,"");return this.styles[t]=u,u}return n||Te.empty(this.document)}},{key:"render",value:function(t){if("none"!==this.getStyle("display").getString()&&"hidden"!==this.getStyle("visibility").getString()){if(t.save(),this.getStyle("mask").hasValue()){var e=this.getStyle("mask").getDefinition();e&&(this.applyEffects(t),e.apply(t,this))}else if("none"!==this.getStyle("filter").getValue("none")){var r=this.getStyle("filter").getDefinition();r&&(this.applyEffects(t),r.apply(t,this))}else this.setContext(t),this.renderChildren(t),this.clearContext(t);t.restore()}}},{key:"setContext",value:function(t){}},{key:"applyEffects",value:function(t){var e=Ye.fromElement(this.document,this);e&&e.apply(t);var r=this.getStyle("clip-path",!1,!0);if(r.hasValue()){var n=r.getDefinition();n&&n.apply(t)}}},{key:"clearContext",value:function(t){}},{key:"renderChildren",value:function(t){var e;x()(e=this.children).call(e,(function(e){e.render(t)}))}},{key:"addChild",value:function(e){var r,n=e instanceof t?e:this.document.createElement(e);n.parent=this,vt()(r=t.ignoreChildTypes).call(r,n.type)||this.children.push(n)}},{key:"matchesSelector",value:function(t){var e,r=this.node;if("function"==typeof r.matches)return r.matches(t);var n=r.getAttribute("class");return!(!n||""===n)&&ht()(e=n.split(" ")).call(e,(function(e){if(".".concat(e)===t)return!0}))}},{key:"addStylesFromStyleDefinition",value:function(){var t=this.document,e=t.styles,r=t.stylesSpecificity;for(var n in e)if("@"!==n[0]&&this.matchesSelector(n)){var i=e[n],o=r[n];if(i)for(var a in i){var u=this.stylesSpecificity[a];void 0===u&&(u="000"),o>=u&&(this.styles[a]=i[a],this.stylesSpecificity[a]=o)}}}},{key:"removeStyles",value:function(t,e){return F()(e).call(e,(function(e,r){var n,i=t.getStyle(r);if(!i.hasValue())return e;var o=i.getString();return i.setValue(""),j()(n=[]).call(n,ft()(e),[[r,o]])}),[])}},{key:"restoreStyles",value:function(t,e){x()(e).call(e,(function(e){var r=f()(e,2),n=r[0],i=r[1];t.getStyle(n,!0).setValue(i)}))}}]),t}();function Qe(t){var e=function(){if("undefined"==typeof Reflect||!rt.a)return!1;if(rt.a.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(rt()(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=st()(t);if(e){var i=st()(this).constructor;r=rt()(n,arguments,i)}else r=n.apply(this,arguments);return at()(this,r)}}qe.ignoreChildTypes=["title"];var We=function(t){it()(r,t);var e=Qe(r);function r(t,n,i){return V()(this,r),e.call(this,t,n,i)}return r}(qe);function Ge(t){var e=J()(t).call(t);return/^('|")/.test(e)?e:'"'.concat(e,'"')}function $e(t){if(!t)return"";var e=J()(t).call(t).toLowerCase();switch(e){case"normal":case"italic":case"oblique":case"inherit":case"initial":case"unset":return e;default:return/^oblique\s+(-|)\d+deg$/.test(e)?e:""}}function Ze(t){if(!t)return"";var e=J()(t).call(t).toLowerCase();switch(e){case"normal":case"bold":case"lighter":case"bolder":case"inherit":case"initial":case"unset":return e;default:return/^[\d.]+$/.test(e)?e:""}}var Je=function(){function e(t,r,n,i,o,a){V()(this,e);var u=a?"string"==typeof a?e.parse(a):a:{};this.fontFamily=o||u.fontFamily,this.fontSize=i||u.fontSize,this.fontStyle=t||u.fontStyle,this.fontWeight=n||u.fontWeight,this.fontVariant=r||u.fontVariant}return I()(e,[{key:"toString",value:function(){var e,r,n;return J()(e=[$e(this.fontStyle),this.fontVariant,Ze(this.fontWeight),this.fontSize,(r=this.fontFamily,void 0===t?r:s()(n=J()(r).call(r).split(",")).call(n,Ge).join(","))].join(" ")).call(e)}}],[{key:"parse",value:function(){var t,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",n=arguments.length>1?arguments[1]:void 0,i="",o="",a="",u="",s="",c=J()(t=Zt(r)).call(t).split(" "),l={fontSize:!1,fontStyle:!1,fontWeight:!1,fontVariant:!1};return x()(c).call(c,(function(t){var r,n,c;switch(!0){case!l.fontStyle&&vt()(r=e.styles).call(r,t):"inherit"!==t&&(i=t),l.fontStyle=!0;break;case!l.fontVariant&&vt()(n=e.variants).call(n,t):"inherit"!==t&&(o=t),l.fontStyle=!0,l.fontVariant=!0;break;case!l.fontWeight&&vt()(c=e.weights).call(c,t):"inherit"!==t&&(a=t),l.fontStyle=!0,l.fontVariant=!0,l.fontWeight=!0;break;case!l.fontSize:if("inherit"!==t){var h=t.split("/"),p=f()(h,1);u=p[0]}l.fontStyle=!0,l.fontVariant=!0,l.fontWeight=!0,l.fontSize=!0;break;default:"inherit"!==t&&(s+=t)}})),new e(i,o,a,u,s,n)}}]),e}();Je.styles="normal|italic|oblique|inherit",Je.variants="normal|small-caps|inherit",Je.weights="normal|bold|bolder|lighter|100|200|300|400|500|600|700|800|900|inherit";var Ke=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Number.NaN,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Number.NaN,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:Number.NaN,i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:Number.NaN;V()(this,t),this.x1=e,this.y1=r,this.x2=n,this.y2=i,this.addPoint(e,r),this.addPoint(n,i)}return I()(t,[{key:"addPoint",value:function(t,e){void 0!==t&&((isNaN(this.x1)||isNaN(this.x2))&&(this.x1=t,this.x2=t),t<this.x1&&(this.x1=t),t>this.x2&&(this.x2=t)),void 0!==e&&((isNaN(this.y1)||isNaN(this.y2))&&(this.y1=e,this.y2=e),e<this.y1&&(this.y1=e),e>this.y2&&(this.y2=e))}},{key:"addX",value:function(t){this.addPoint(t,null)}},{key:"addY",value:function(t){this.addPoint(null,t)}},{key:"addBoundingBox",value:function(t){if(t){var e=t.x1,r=t.y1,n=t.x2,i=t.y2;this.addPoint(e,r),this.addPoint(n,i)}}},{key:"sumCubic",value:function(t,e,r,n,i){return Math.pow(1-t,3)*e+3*Math.pow(1-t,2)*t*r+3*(1-t)*Math.pow(t,2)*n+Math.pow(t,3)*i}},{key:"bezierCurveAdd",value:function(t,e,r,n,i){var o=6*e-12*r+6*n,a=-3*e+9*r-9*n+3*i,u=3*r-3*e;if(0!==a){var s=Math.pow(o,2)-4*u*a;if(!(s<0)){var c=(-o+Math.sqrt(s))/(2*a);0<c&&c<1&&(t?this.addX(this.sumCubic(c,e,r,n,i)):this.addY(this.sumCubic(c,e,r,n,i)));var f=(-o-Math.sqrt(s))/(2*a);0<f&&f<1&&(t?this.addX(this.sumCubic(f,e,r,n,i)):this.addY(this.sumCubic(f,e,r,n,i)))}}else{if(0===o)return;var l=-u/o;0<l&&l<1&&(t?this.addX(this.sumCubic(l,e,r,n,i)):this.addY(this.sumCubic(l,e,r,n,i)))}}},{key:"addBezierCurve",value:function(t,e,r,n,i,o,a,u){this.addPoint(t,e),this.addPoint(a,u),this.bezierCurveAdd(!0,t,r,i,a),this.bezierCurveAdd(!1,e,n,o,u)}},{key:"addQuadraticCurve",value:function(t,e,r,n,i,o){var a=t+2/3*(r-t),u=e+2/3*(n-e),s=a+1/3*(i-t),c=u+1/3*(o-e);this.addBezierCurve(t,e,a,s,u,c,i,o)}},{key:"isPointInBox",value:function(t,e){var r=this.x1,n=this.y1,i=this.x2,o=this.y2;return r<=t&&t<=i&&n<=e&&e<=o}},{key:"x",get:function(){return this.x1}},{key:"y",get:function(){return this.y1}},{key:"width",get:function(){return this.x2-this.x1}},{key:"height",get:function(){return this.y2-this.y1}}]),t}();function tr(t){var e=function(){if("undefined"==typeof Reflect||!rt.a)return!1;if(rt.a.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(rt()(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=st()(t);if(e){var i=st()(this).constructor;r=rt()(n,arguments,i)}else r=n.apply(this,arguments);return at()(this,r)}}var er=function(t){it()(r,t);var e=tr(r);function r(){var t;return V()(this,r),(t=e.apply(this,arguments)).modifiedEmSizeStack=!1,t}return I()(r,[{key:"calculateOpacity",value:function(){for(var t=1,e=this;e;){var r=e.getStyle("opacity",!1,!0);r.hasValue(!0)&&(t*=r.getNumber()),e=e.parent}return t}},{key:"setContext",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(!e){var r=this.getStyle("fill"),n=this.getStyle("fill-opacity"),i=this.getStyle("stroke"),o=this.getStyle("stroke-opacity");if(r.isUrlDefinition()){var a=r.getFillStyleDefinition(this,n);a&&(t.fillStyle=a)}else if(r.hasValue()){"currentColor"===r.getString()&&r.setValue(this.getStyle("color").getColor());var u=r.getColor();"inherit"!==u&&(t.fillStyle="none"===u?"rgba(0,0,0,0)":u)}if(n.hasValue()){var s=new Te(this.document,"fill",t.fillStyle).addOpacity(n).getColor();t.fillStyle=s}if(i.isUrlDefinition()){var c=i.getFillStyleDefinition(this,o);c&&(t.strokeStyle=c)}else if(i.hasValue()){"currentColor"===i.getString()&&i.setValue(this.getStyle("color").getColor());var f=i.getString();"inherit"!==f&&(t.strokeStyle="none"===f?"rgba(0,0,0,0)":f)}if(o.hasValue()){var l=new Te(this.document,"stroke",t.strokeStyle).addOpacity(o).getString();t.strokeStyle=l}var h=this.getStyle("stroke-width");if(h.hasValue()){var p=h.getPixels();t.lineWidth=p||ve}var v=this.getStyle("stroke-linecap"),y=this.getStyle("stroke-linejoin"),d=this.getStyle("stroke-miterlimit"),g=this.getStyle("paint-order"),x=this.getStyle("stroke-dasharray"),m=this.getStyle("stroke-dashoffset");if(v.hasValue()&&(t.lineCap=v.getString()),y.hasValue()&&(t.lineJoin=y.getString()),d.hasValue()&&(t.miterLimit=d.getNumber()),g.hasValue()&&(t.paintOrder=g.getValue()),x.hasValue()&&"none"!==x.getString()){var b=te(x.getString());void 0!==t.setLineDash?t.setLineDash(b):void 0!==t.webkitLineDash?t.webkitLineDash=b:void 0===t.mozDash||1===b.length&&0===b[0]||(t.mozDash=b);var S=m.getPixels();void 0!==t.lineDashOffset?t.lineDashOffset=S:void 0!==t.webkitLineDashOffset?t.webkitLineDashOffset=S:void 0!==t.mozDashOffset&&(t.mozDashOffset=S)}}if(this.modifiedEmSizeStack=!1,void 0!==t.font){var w=this.getStyle("font"),A=this.getStyle("font-style"),k=this.getStyle("font-variant"),T=this.getStyle("font-weight"),P=this.getStyle("font-size"),O=this.getStyle("font-family"),C=new Je(A.getString(),k.getString(),T.getString(),P.hasValue()?"".concat(P.getPixels(!0),"px"):"",O.getString(),Je.parse(w.getString(),t.font));A.setValue(C.fontStyle),k.setValue(C.fontVariant),T.setValue(C.fontWeight),P.setValue(C.fontSize),O.setValue(C.fontFamily),t.font=C.toString(),P.isPixels()&&(this.document.emSize=P.getPixels(),this.modifiedEmSizeStack=!0)}e||(this.applyEffects(t),t.globalAlpha=this.calculateOpacity())}},{key:"clearContext",value:function(t){wt()(st()(r.prototype),"clearContext",this).call(this,t),this.modifiedEmSizeStack&&this.document.popEmSize()}}]),r}(qe);function rr(t){var e=function(){if("undefined"==typeof Reflect||!rt.a)return!1;if(rt.a.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(rt()(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=st()(t);if(e){var i=st()(this).constructor;r=rt()(n,arguments,i)}else r=n.apply(this,arguments);return at()(this,r)}}var nr=function(t){it()(r,t);var e=rr(r);function r(t,n,i){var o;return V()(this,r),(o=e.call(this,t,n,(this instanceof r?this.constructor:void 0)===r||i)).type="text",o.x=0,o.y=0,o.measureCache=-1,o}return I()(r,[{key:"setContext",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];wt()(st()(r.prototype),"setContext",this).call(this,t,e);var n=this.getStyle("dominant-baseline").getTextBaseline()||this.getStyle("alignment-baseline").getTextBaseline();n&&(t.textBaseline=n)}},{key:"initializeCoordinates",value:function(t){this.x=this.getAttribute("x").getPixels("x"),this.y=this.getAttribute("y").getPixels("y");var e=this.getAttribute("dx"),r=this.getAttribute("dy");e.hasValue()&&(this.x+=e.getPixels("x")),r.hasValue()&&(this.y+=r.getPixels("y")),this.x+=this.getAnchorDelta(t,this,0)}},{key:"getBoundingBox",value:function(t){var e,r=this;if("text"!==this.type)return this.getTElementBoundingBox(t);this.initializeCoordinates(t);var n=null;return x()(e=this.children).call(e,(function(e,i){var o=r.getChildBoundingBox(t,r,r,i);n?n.addBoundingBox(o):n=o})),n}},{key:"getFontSize",value:function(){var t=this.document,e=this.parent,r=Je.parse(t.ctx.font).fontSize;return e.getStyle("font-size").getNumber(r)}},{key:"getTElementBoundingBox",value:function(t){var e=this.getFontSize();return new Ke(this.x,this.y-e,this.x+this.measureText(t),this.y)}},{key:"getGlyph",value:function(t,e,r){var n=e[r],i=null;if(t.isArabic){var o=e.length,a=e[r-1],u=e[r+1],s="isolated";(0===r||" "===a)&&r<o-2&&" "!==u&&(s="terminal"),r>0&&" "!==a&&r<o-2&&" "!==u&&(s="medial"),r>0&&" "!==a&&(r===o-1||" "===u)&&(s="initial"),void 0!==t.glyphs[n]&&((i=t.glyphs[n][s])||"glyph"!==t.glyphs[n].type||(i=t.glyphs[n]))}else i=t.glyphs[n];return i||(i=t.missingGlyph),i}},{key:"getText",value:function(){return""}},{key:"getTextFromNode",value:function(t){var e=t||this.node,r=dt()(e.parentNode.childNodes),n=bt()(r).call(r,e),i=r.length-1,o=Zt(e.value||e.text||e.textContent||"");return 0===n&&(o=Jt(o)),n===i&&(o=Kt(o)),o}},{key:"renderChildren",value:function(t){var e,r=this;if("text"===this.type){this.initializeCoordinates(t),x()(e=this.children).call(e,(function(e,n){r.renderChild(t,r,r,n)}));var n=this.document.screen.mouse;n.isWorking()&&n.checkBoundingBox(this,this.getBoundingBox(t))}else this.renderTElementChildren(t)}},{key:"renderTElementChildren",value:function(t){var e=this.document,r=this.parent,n=this.getText(),i=r.getStyle("font-family").getDefinition();if(i)for(var o,a=i.fontFace.unitsPerEm,u=Je.parse(e.ctx.font),s=r.getStyle("font-size").getNumber(u.fontSize),c=r.getStyle("font-style").getString(u.fontStyle),f=s/a,l=i.isRTL?xt()(o=n.split("")).call(o).join(""):n,h=te(r.getAttribute("dx").getString()),p=l.length,v=0;v<p;v++){var y=this.getGlyph(i,l,v);t.translate(this.x,this.y),t.scale(f,-f);var d=t.lineWidth;t.lineWidth=t.lineWidth*a/s,"italic"===c&&t.transform(1,0,.4,1,0,0),y.render(t),"italic"===c&&t.transform(1,0,-.4,1,0,0),t.lineWidth=d,t.scale(1/f,-1/f),t.translate(-this.x,-this.y),this.x+=s*(y.horizAdvX||i.horizAdvX)/a,void 0===h[v]||isNaN(h[v])||(this.x+=h[v])}else{var g=this.x,x=this.y;"stroke"===t.paintOrder?(t.strokeStyle&&t.strokeText(n,g,x),t.fillStyle&&t.fillText(n,g,x)):(t.fillStyle&&t.fillText(n,g,x),t.strokeStyle&&t.strokeText(n,g,x))}}},{key:"getAnchorDelta",value:function(t,e,r){var n=this.getStyle("text-anchor").getString("start");if("start"!==n){for(var i=e.children,o=i.length,a=null,u=0,s=r;s<o&&(a=i[s],!(s>r&&a.getAttribute("x").hasValue()||a.getAttribute("text-anchor").hasValue()));s++)u+=a.measureTextRecursive(t);return-1*("end"===n?u:u/2)}return 0}},{key:"adjustChildCoordinates",value:function(t,e,r,n){var i=r.children[n];if("function"!=typeof i.measureText)return i;t.save(),i.setContext(t,!0);var o=i.getAttribute("x"),a=i.getAttribute("y"),u=i.getAttribute("dx"),s=i.getAttribute("dy"),c=i.getAttribute("text-anchor").getString("start");if(0===n&&"textNode"!==i.type&&(o.hasValue()||o.setValue(e.getAttribute("x").getValue("0")),a.hasValue()||a.setValue(e.getAttribute("y").getValue("0")),u.hasValue()||u.setValue(e.getAttribute("dx").getValue("0")),s.hasValue()||s.setValue(e.getAttribute("dy").getValue("0"))),o.hasValue()){if(i.x=o.getPixels("x")+e.getAnchorDelta(t,r,n),"start"!==c){var f=i.measureTextRecursive(t);i.x+=-1*("end"===c?f:f/2)}u.hasValue()&&(i.x+=u.getPixels("x"))}else{if("start"!==c){var l=i.measureTextRecursive(t);e.x+=-1*("end"===c?l:l/2)}u.hasValue()&&(e.x+=u.getPixels("x")),i.x=e.x}return e.x=i.x+i.measureText(t),a.hasValue()?(i.y=a.getPixels("y"),s.hasValue()&&(i.y+=s.getPixels("y"))):(s.hasValue()&&(e.y+=s.getPixels("y")),i.y=e.y),e.y=i.y,i.clearContext(t),t.restore(),i}},{key:"getChildBoundingBox",value:function(t,e,r,n){var i,o=this.adjustChildCoordinates(t,e,r,n);if("function"!=typeof o.getBoundingBox)return null;var a=o.getBoundingBox(t);return a?(x()(i=o.children).call(i,(function(r,n){var i=e.getChildBoundingBox(t,e,o,n);a.addBoundingBox(i)})),a):null}},{key:"renderChild",value:function(t,e,r,n){var i,o=this.adjustChildCoordinates(t,e,r,n);o.render(t),x()(i=o.children).call(i,(function(r,n){e.renderChild(t,e,o,n)}))}},{key:"measureTextRecursive",value:function(t){var e;return F()(e=this.children).call(e,(function(e,r){return e+r.measureTextRecursive(t)}),this.measureText(t))}},{key:"measureText",value:function(t){var e=this.measureCache;if(~e)return e;var r=this.getText(),n=this.measureTargetText(t,r);return this.measureCache=n,n}},{key:"measureTargetText",value:function(t,e){if(!e.length)return 0;var r=this.parent,n=r.getStyle("font-family").getDefinition();if(n){for(var i,o=this.getFontSize(),a=n.isRTL?xt()(i=e.split("")).call(i).join(""):e,u=te(r.getAttribute("dx").getString()),s=a.length,c=0,f=0;f<s;f++){c+=(this.getGlyph(n,a,f).horizAdvX||n.horizAdvX)*o/n.fontFace.unitsPerEm,void 0===u[f]||isNaN(u[f])||(c+=u[f])}return c}if(!t.measureText)return 10*e.length;t.save(),this.setContext(t,!0);var l=t.measureText(e).width;return this.clearContext(t),t.restore(),l}}]),r}(er);function ir(t){var e=function(){if("undefined"==typeof Reflect||!rt.a)return!1;if(rt.a.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(rt()(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=st()(t);if(e){var i=st()(this).constructor;r=rt()(n,arguments,i)}else r=n.apply(this,arguments);return at()(this,r)}}var or=function(t){it()(r,t);var e=ir(r);function r(t,n,i){var o;return V()(this,r),(o=e.call(this,t,n,(this instanceof r?this.constructor:void 0)===r||i)).type="tspan",o.text=o.children.length>0?"":o.getTextFromNode(),o}return I()(r,[{key:"getText",value:function(){return this.text}}]),r}(nr);function ar(t){var e=function(){if("undefined"==typeof Reflect||!rt.a)return!1;if(rt.a.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(rt()(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=st()(t);if(e){var i=st()(this).constructor;r=rt()(n,arguments,i)}else r=n.apply(this,arguments);return at()(this,r)}}var ur=function(t){it()(r,t);var e=ar(r);function r(){var t;return V()(this,r),(t=e.apply(this,arguments)).type="textNode",t}return r}(or);function sr(t){var e=function(){if("undefined"==typeof Reflect||!rt.a)return!1;if(rt.a.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(rt()(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=st()(t);if(e){var i=st()(this).constructor;r=rt()(n,arguments,i)}else r=n.apply(this,arguments);return at()(this,r)}}var cr=function(t){it()(r,t);var e=sr(r);function r(t){var n;return V()(this,r),(n=e.call(this,t.replace(/[+-.]\s+/g,"-").replace(/[^MmZzLlHhVvCcSsQqTtAae\d\s.,+-].*/g,""))).control=null,n.start=null,n.current=null,n.command=null,n.commands=n.commands,n.i=-1,n.previousCommand=null,n.points=[],n.angles=[],n}return I()(r,[{key:"reset",value:function(){this.i=-1,this.command=null,this.previousCommand=null,this.start=new Oe(0,0),this.control=new Oe(0,0),this.current=new Oe(0,0),this.points=[],this.angles=[]}},{key:"isEnd",value:function(){return this.i>=this.commands.length-1}},{key:"next",value:function(){var t=this.commands[++this.i];return this.previousCommand=this.command,this.command=t,t}},{key:"getPoint",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"x",e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"y",r=new Oe(this.command[t],this.command[e]);return this.makeAbsolute(r)}},{key:"getAsControlPoint",value:function(t,e){var r=this.getPoint(t,e);return this.control=r,r}},{key:"getAsCurrentPoint",value:function(t,e){var r=this.getPoint(t,e);return this.current=r,r}},{key:"getReflectedControlPoint",value:function(){var t=this.previousCommand.type;if(t!==Tt.a.CURVE_TO&&t!==Tt.a.SMOOTH_CURVE_TO&&t!==Tt.a.QUAD_TO&&t!==Tt.a.SMOOTH_QUAD_TO)return this.current;var e=this.current,r=e.x,n=e.y,i=this.control,o=i.x,a=i.y;return new Oe(2*r-o,2*n-a)}},{key:"makeAbsolute",value:function(t){if(this.command.relative){var e=this.current,r=e.x,n=e.y;t.x+=r,t.y+=n}return t}},{key:"addMarker",value:function(t,e,r){var n=this.points,i=this.angles;r&&i.length>0&&!i[i.length-1]&&(i[i.length-1]=n[n.length-1].angleTo(r)),this.addMarkerAngle(t,e?e.angleTo(t):null)}},{key:"addMarkerAngle",value:function(t,e){this.points.push(t),this.angles.push(e)}},{key:"getMarkerPoints",value:function(){return this.points}},{key:"getMarkerAngles",value:function(){for(var t=this.angles,e=t.length,r=0;r<e;r++)if(!t[r])for(var n=r+1;n<e;n++)if(t[n]){t[r]=t[n];break}return t}}]),r}(Tt.a);function fr(t){var e=function(){if("undefined"==typeof Reflect||!rt.a)return!1;if(rt.a.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(rt()(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=st()(t);if(e){var i=st()(this).constructor;r=rt()(n,arguments,i)}else r=n.apply(this,arguments);return at()(this,r)}}var lr=function(t){it()(r,t);var e=fr(r);function r(t,n,i){var o;return V()(this,r),(o=e.call(this,t,n,i)).type="path",o.pathParser=null,o.pathParser=new cr(o.getAttribute("d").getString()),o}return I()(r,[{key:"path",value:function(t){var e=this.pathParser,r=new Ke;for(e.reset(),t&&t.beginPath();!e.isEnd();)switch(e.next().type){case cr.MOVE_TO:this.pathM(t,r);break;case cr.LINE_TO:this.pathL(t,r);break;case cr.HORIZ_LINE_TO:this.pathH(t,r);break;case cr.VERT_LINE_TO:this.pathV(t,r);break;case cr.CURVE_TO:this.pathC(t,r);break;case cr.SMOOTH_CURVE_TO:this.pathS(t,r);break;case cr.QUAD_TO:this.pathQ(t,r);break;case cr.SMOOTH_QUAD_TO:this.pathT(t,r);break;case cr.ARC:this.pathA(t,r);break;case cr.CLOSE_PATH:this.pathZ(t,r)}return r}},{key:"getBoundingBox",value:function(t){return this.path()}},{key:"getMarkers",value:function(){var t=this.pathParser,e=t.getMarkerPoints(),r=t.getMarkerAngles();return s()(e).call(e,(function(t,e){return[t,r[e]]}))}},{key:"renderChildren",value:function(t){this.path(t),this.document.screen.mouse.checkPath(this,t);var e=this.getStyle("fill-rule");""!==t.fillStyle&&("inherit"!==e.getString("inherit")?kt()(t).call(t,e.getString()):kt()(t).call(t)),""!==t.strokeStyle&&t.stroke();var r=this.getMarkers();if(r){var n=r.length-1,i=this.getStyle("marker-start"),o=this.getStyle("marker-mid"),a=this.getStyle("marker-end");if(i.isUrlDefinition()){var u=i.getDefinition(),s=f()(r[0],2),c=s[0],l=s[1];u.render(t,c,l)}if(o.isUrlDefinition())for(var h=o.getDefinition(),p=1;p<n;p++){var v=f()(r[p],2),y=v[0],d=v[1];h.render(t,y,d)}if(a.isUrlDefinition()){var g=a.getDefinition(),x=f()(r[n],2),m=x[0],b=x[1];g.render(t,m,b)}}}},{key:"pathM",value:function(t,e){var n=this.pathParser,i=r.pathM(n).point,o=i.x,a=i.y;n.addMarker(i),e.addPoint(o,a),t&&t.moveTo(o,a)}},{key:"pathL",value:function(t,e){var n=this.pathParser,i=r.pathL(n),o=i.current,a=i.point,u=a.x,s=a.y;n.addMarker(a,o),e.addPoint(u,s),t&&t.lineTo(u,s)}},{key:"pathH",value:function(t,e){var n=this.pathParser,i=r.pathH(n),o=i.current,a=i.point,u=a.x,s=a.y;n.addMarker(a,o),e.addPoint(u,s),t&&t.lineTo(u,s)}},{key:"pathV",value:function(t,e){var n=this.pathParser,i=r.pathV(n),o=i.current,a=i.point,u=a.x,s=a.y;n.addMarker(a,o),e.addPoint(u,s),t&&t.lineTo(u,s)}},{key:"pathC",value:function(t,e){var n=this.pathParser,i=r.pathC(n),o=i.current,a=i.point,u=i.controlPoint,s=i.currentPoint;n.addMarker(s,u,a),e.addBezierCurve(o.x,o.y,a.x,a.y,u.x,u.y,s.x,s.y),t&&t.bezierCurveTo(a.x,a.y,u.x,u.y,s.x,s.y)}},{key:"pathS",value:function(t,e){var n=this.pathParser,i=r.pathS(n),o=i.current,a=i.point,u=i.controlPoint,s=i.currentPoint;n.addMarker(s,u,a),e.addBezierCurve(o.x,o.y,a.x,a.y,u.x,u.y,s.x,s.y),t&&t.bezierCurveTo(a.x,a.y,u.x,u.y,s.x,s.y)}},{key:"pathQ",value:function(t,e){var n=this.pathParser,i=r.pathQ(n),o=i.current,a=i.controlPoint,u=i.currentPoint;n.addMarker(u,a,a),e.addQuadraticCurve(o.x,o.y,a.x,a.y,u.x,u.y),t&&t.quadraticCurveTo(a.x,a.y,u.x,u.y)}},{key:"pathT",value:function(t,e){var n=this.pathParser,i=r.pathT(n),o=i.current,a=i.controlPoint,u=i.currentPoint;n.addMarker(u,a,a),e.addQuadraticCurve(o.x,o.y,a.x,a.y,u.x,u.y),t&&t.quadraticCurveTo(a.x,a.y,u.x,u.y)}},{key:"pathA",value:function(t,e){var n=this.pathParser,i=r.pathA(n),o=i.currentPoint,a=i.rX,u=i.rY,s=i.sweepFlag,c=i.xAxisRotation,f=i.centp,l=i.a1,h=i.ad,p=1-s?1:-1,v=l+p*(h/2),y=new Oe(f.x+a*Math.cos(v),f.y+u*Math.sin(v));if(n.addMarkerAngle(y,v-p*Math.PI/2),n.addMarkerAngle(o,v-p*Math.PI),e.addPoint(o.x,o.y),t&&!isNaN(l)&&!isNaN(h)){var d=a>u?a:u,g=a>u?1:a/u,x=a>u?u/a:1;t.translate(f.x,f.y),t.rotate(c),t.scale(g,x),t.arc(0,0,d,l,l+h,Boolean(1-s)),t.scale(1/g,1/x),t.rotate(-c),t.translate(-f.x,-f.y)}}},{key:"pathZ",value:function(t,e){r.pathZ(this.pathParser),t&&e.x1!==e.x2&&e.y1!==e.y2&&t.closePath()}}],[{key:"pathM",value:function(t){var e=t.getAsCurrentPoint();return t.start=t.current,{point:e}}},{key:"pathL",value:function(t){return{current:t.current,point:t.getAsCurrentPoint()}}},{key:"pathH",value:function(t){var e=t.current,r=t.command,n=new Oe((r.relative?e.x:0)+r.x,e.y);return t.current=n,{current:e,point:n}}},{key:"pathV",value:function(t){var e=t.current,r=t.command,n=new Oe(e.x,(r.relative?e.y:0)+r.y);return t.current=n,{current:e,point:n}}},{key:"pathC",value:function(t){return{current:t.current,point:t.getPoint("x1","y1"),controlPoint:t.getAsControlPoint("x2","y2"),currentPoint:t.getAsCurrentPoint()}}},{key:"pathS",value:function(t){return{current:t.current,point:t.getReflectedControlPoint(),controlPoint:t.getAsControlPoint("x2","y2"),currentPoint:t.getAsCurrentPoint()}}},{key:"pathQ",value:function(t){return{current:t.current,controlPoint:t.getAsControlPoint("x1","y1"),currentPoint:t.getAsCurrentPoint()}}},{key:"pathT",value:function(t){var e=t.current,r=t.getReflectedControlPoint();return t.control=r,{current:e,controlPoint:r,currentPoint:t.getAsCurrentPoint()}}},{key:"pathA",value:function(t){var e=t.current,r=t.command,n=r.rX,i=r.rY,o=r.xRot,a=r.lArcFlag,u=r.sweepFlag,s=o*(Math.PI/180),c=t.getAsCurrentPoint(),f=new Oe(Math.cos(s)*(e.x-c.x)/2+Math.sin(s)*(e.y-c.y)/2,-Math.sin(s)*(e.x-c.x)/2+Math.cos(s)*(e.y-c.y)/2),l=Math.pow(f.x,2)/Math.pow(n,2)+Math.pow(f.y,2)/Math.pow(i,2);l>1&&(n*=Math.sqrt(l),i*=Math.sqrt(l));var h=(a===u?-1:1)*Math.sqrt((Math.pow(n,2)*Math.pow(i,2)-Math.pow(n,2)*Math.pow(f.y,2)-Math.pow(i,2)*Math.pow(f.x,2))/(Math.pow(n,2)*Math.pow(f.y,2)+Math.pow(i,2)*Math.pow(f.x,2)));isNaN(h)&&(h=0);var p=new Oe(h*n*f.y/i,h*-i*f.x/n),v=new Oe((e.x+c.x)/2+Math.cos(s)*p.x-Math.sin(s)*p.y,(e.y+c.y)/2+Math.sin(s)*p.x+Math.cos(s)*p.y),y=ge([1,0],[(f.x-p.x)/n,(f.y-p.y)/i]),d=[(f.x-p.x)/n,(f.y-p.y)/i],g=[(-f.x-p.x)/n,(-f.y-p.y)/i],x=ge(d,g);return de(d,g)<=-1&&(x=Math.PI),de(d,g)>=1&&(x=0),{currentPoint:c,rX:n,rY:i,sweepFlag:u,xAxisRotation:s,centp:v,a1:y,ad:x}}},{key:"pathZ",value:function(t){t.current=t.start}}]),r}(er);function hr(t){var e=function(){if("undefined"==typeof Reflect||!rt.a)return!1;if(rt.a.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(rt()(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=st()(t);if(e){var i=st()(this).constructor;r=rt()(n,arguments,i)}else r=n.apply(this,arguments);return at()(this,r)}}var pr=function(t){it()(r,t);var e=hr(r);function r(){var t;return V()(this,r),(t=e.apply(this,arguments)).type="svg",t.root=!1,t}return I()(r,[{key:"setContext",value:function(t){var e=this.document,n=e.screen,i=e.window,o=t.canvas;if(n.setDefaults(t),o.style&&void 0!==t.font&&i&&void 0!==i.getComputedStyle){t.font=i.getComputedStyle(o).getPropertyValue("font");var a=new Te(e,"fontSize",Je.parse(t.font).fontSize);a.hasValue()&&(e.rootEmSize=a.getPixels("y"),e.emSize=e.rootEmSize)}this.getAttribute("x").hasValue()||this.getAttribute("x",!0).setValue(0),this.getAttribute("y").hasValue()||this.getAttribute("y",!0).setValue(0);var u=n.viewPort,s=u.width,c=u.height;this.getStyle("width").hasValue()||this.getStyle("width",!0).setValue("100%"),this.getStyle("height").hasValue()||this.getStyle("height",!0).setValue("100%"),this.getStyle("color").hasValue()||this.getStyle("color",!0).setValue("black");var f=this.getAttribute("refX"),l=this.getAttribute("refY"),h=this.getAttribute("viewBox"),p=h.hasValue()?te(h.getString()):null,v=!this.root&&"visible"!==this.getStyle("overflow").getValue("hidden"),y=0,d=0,g=0,x=0;p&&(y=p[0],d=p[1]),this.root||(s=this.getStyle("width").getPixels("x"),c=this.getStyle("height").getPixels("y"),"marker"===this.type&&(g=y,x=d,y=0,d=0)),n.viewPort.setCurrent(s,c),this.node&&this.getStyle("transform",!1,!0).hasValue()&&!this.getStyle("transform-origin",!1,!0).hasValue()&&this.getStyle("transform-origin",!0,!0).setValue("50% 50%"),wt()(st()(r.prototype),"setContext",this).call(this,t),t.translate(this.getAttribute("x").getPixels("x"),this.getAttribute("y").getPixels("y")),p&&(s=p[2],c=p[3]),e.setViewBox({ctx:t,aspectRatio:this.getAttribute("preserveAspectRatio").getString(),width:n.viewPort.width,desiredWidth:s,height:n.viewPort.height,desiredHeight:c,minX:y,minY:d,refX:f.getValue(),refY:l.getValue(),clip:v,clipX:g,clipY:x}),p&&(n.viewPort.removeCurrent(),n.viewPort.setCurrent(s,c))}},{key:"clearContext",value:function(t){wt()(st()(r.prototype),"clearContext",this).call(this,t),this.document.screen.viewPort.removeCurrent()}},{key:"resize",value:function(t){var e,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],i=this.getAttribute("width",!0),o=this.getAttribute("height",!0),a=this.getAttribute("viewBox"),u=this.getAttribute("style"),s=i.getNumber(0),c=o.getNumber(0);if(n)if("string"==typeof n)this.getAttribute("preserveAspectRatio",!0).setValue(n);else{var f=this.getAttribute("preserveAspectRatio");f.hasValue()&&f.setValue(f.getString().replace(/^\s*(\S.*\S)\s*$/,"$1"))}(i.setValue(t),o.setValue(r),a.hasValue())||a.setValue(j()(e="0 0 ".concat(s||t," ")).call(e,c||r));if(u.hasValue()){var l=this.getStyle("width"),h=this.getStyle("height");l.hasValue()&&l.setValue("".concat(t,"px")),h.hasValue()&&h.setValue("".concat(r,"px"))}}}]),r}(er);function vr(t){var e=function(){if("undefined"==typeof Reflect||!rt.a)return!1;if(rt.a.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(rt()(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=st()(t);if(e){var i=st()(this).constructor;r=rt()(n,arguments,i)}else r=n.apply(this,arguments);return at()(this,r)}}var yr=function(t){it()(r,t);var e=vr(r);function r(){var t;return V()(this,r),(t=e.apply(this,arguments)).type="rect",t}return I()(r,[{key:"path",value:function(t){var e=this.getAttribute("x").getPixels("x"),r=this.getAttribute("y").getPixels("y"),n=this.getStyle("width",!1,!0).getPixels("x"),i=this.getStyle("height",!1,!0).getPixels("y"),o=this.getAttribute("rx"),a=this.getAttribute("ry"),u=o.getPixels("x"),s=a.getPixels("y");if(o.hasValue()&&!a.hasValue()&&(s=u),a.hasValue()&&!o.hasValue()&&(u=s),u=Math.min(u,n/2),s=Math.min(s,i/2),t){var c=(Math.sqrt(2)-1)/3*4;t.beginPath(),i>0&&n>0&&(t.moveTo(e+u,r),t.lineTo(e+n-u,r),t.bezierCurveTo(e+n-u+c*u,r,e+n,r+s-c*s,e+n,r+s),t.lineTo(e+n,r+i-s),t.bezierCurveTo(e+n,r+i-s+c*s,e+n-u+c*u,r+i,e+n-u,r+i),t.lineTo(e+u,r+i),t.bezierCurveTo(e+u-c*u,r+i,e,r+i-s+c*s,e,r+i-s),t.lineTo(e,r+s),t.bezierCurveTo(e,r+s-c*s,e+u-c*u,r,e+u,r),t.closePath())}return new Ke(e,r,e+n,r+i)}},{key:"getMarkers",value:function(){return null}}]),r}(lr);function dr(t){var e=function(){if("undefined"==typeof Reflect||!rt.a)return!1;if(rt.a.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(rt()(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=st()(t);if(e){var i=st()(this).constructor;r=rt()(n,arguments,i)}else r=n.apply(this,arguments);return at()(this,r)}}var gr=function(t){it()(r,t);var e=dr(r);function r(){var t;return V()(this,r),(t=e.apply(this,arguments)).type="circle",t}return I()(r,[{key:"path",value:function(t){var e=this.getAttribute("cx").getPixels("x"),r=this.getAttribute("cy").getPixels("y"),n=this.getAttribute("r").getPixels();return t&&n>0&&(t.beginPath(),t.arc(e,r,n,0,2*Math.PI,!1),t.closePath()),new Ke(e-n,r-n,e+n,r+n)}},{key:"getMarkers",value:function(){return null}}]),r}(lr);function xr(t){var e=function(){if("undefined"==typeof Reflect||!rt.a)return!1;if(rt.a.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(rt()(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=st()(t);if(e){var i=st()(this).constructor;r=rt()(n,arguments,i)}else r=n.apply(this,arguments);return at()(this,r)}}var mr=function(t){it()(r,t);var e=xr(r);function r(){var t;return V()(this,r),(t=e.apply(this,arguments)).type="ellipse",t}return I()(r,[{key:"path",value:function(t){var e=(Math.sqrt(2)-1)/3*4,r=this.getAttribute("rx").getPixels("x"),n=this.getAttribute("ry").getPixels("y"),i=this.getAttribute("cx").getPixels("x"),o=this.getAttribute("cy").getPixels("y");return t&&r>0&&n>0&&(t.beginPath(),t.moveTo(i+r,o),t.bezierCurveTo(i+r,o+e*n,i+e*r,o+n,i,o+n),t.bezierCurveTo(i-e*r,o+n,i-r,o+e*n,i-r,o),t.bezierCurveTo(i-r,o-e*n,i-e*r,o-n,i,o-n),t.bezierCurveTo(i+e*r,o-n,i+r,o-e*n,i+r,o),t.closePath()),new Ke(i-r,o-n,i+r,o+n)}},{key:"getMarkers",value:function(){return null}}]),r}(lr);function br(t){var e=function(){if("undefined"==typeof Reflect||!rt.a)return!1;if(rt.a.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(rt()(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=st()(t);if(e){var i=st()(this).constructor;r=rt()(n,arguments,i)}else r=n.apply(this,arguments);return at()(this,r)}}var Sr=function(t){it()(r,t);var e=br(r);function r(){var t;return V()(this,r),(t=e.apply(this,arguments)).type="line",t}return I()(r,[{key:"getPoints",value:function(){return[new Oe(this.getAttribute("x1").getPixels("x"),this.getAttribute("y1").getPixels("y")),new Oe(this.getAttribute("x2").getPixels("x"),this.getAttribute("y2").getPixels("y"))]}},{key:"path",value:function(t){var e=this.getPoints(),r=f()(e,2),n=r[0],i=n.x,o=n.y,a=r[1],u=a.x,s=a.y;return t&&(t.beginPath(),t.moveTo(i,o),t.lineTo(u,s)),new Ke(i,o,u,s)}},{key:"getMarkers",value:function(){var t=this.getPoints(),e=f()(t,2),r=e[0],n=e[1],i=r.angleTo(n);return[[r,i],[n,i]]}}]),r}(lr);function wr(t){var e=function(){if("undefined"==typeof Reflect||!rt.a)return!1;if(rt.a.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(rt()(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=st()(t);if(e){var i=st()(this).constructor;r=rt()(n,arguments,i)}else r=n.apply(this,arguments);return at()(this,r)}}var Ar=function(t){it()(r,t);var e=wr(r);function r(t,n,i){var o;return V()(this,r),(o=e.call(this,t,n,i)).type="polyline",o.points=[],o.points=Oe.parsePath(o.getAttribute("points").getString()),o}return I()(r,[{key:"path",value:function(t){var e=this.points,r=f()(e,1)[0],n=r.x,i=r.y,o=new Ke(n,i);return t&&(t.beginPath(),t.moveTo(n,i)),x()(e).call(e,(function(e){var r=e.x,n=e.y;o.addPoint(r,n),t&&t.lineTo(r,n)})),o}},{key:"getMarkers",value:function(){var t=this.points,e=t.length-1,r=[];return x()(t).call(t,(function(n,i){i!==e&&r.push([n,n.angleTo(t[i+1])])})),r.length>0&&r.push([t[t.length-1],r[r.length-1][1]]),r}}]),r}(lr);function kr(t){var e=function(){if("undefined"==typeof Reflect||!rt.a)return!1;if(rt.a.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(rt()(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=st()(t);if(e){var i=st()(this).constructor;r=rt()(n,arguments,i)}else r=n.apply(this,arguments);return at()(this,r)}}var Tr=function(t){it()(r,t);var e=kr(r);function r(){var t;return V()(this,r),(t=e.apply(this,arguments)).type="polygon",t}return I()(r,[{key:"path",value:function(t){var e=wt()(st()(r.prototype),"path",this).call(this,t),n=f()(this.points,1)[0],i=n.x,o=n.y;return t&&(t.lineTo(i,o),t.closePath()),e}}]),r}(Ar);function Pr(t){var e=function(){if("undefined"==typeof Reflect||!rt.a)return!1;if(rt.a.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(rt()(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=st()(t);if(e){var i=st()(this).constructor;r=rt()(n,arguments,i)}else r=n.apply(this,arguments);return at()(this,r)}}var Or=function(t){it()(r,t);var e=Pr(r);function r(){var t;return V()(this,r),(t=e.apply(this,arguments)).type="pattern",t}return I()(r,[{key:"createPattern",value:function(t,e,r){var n=this.getStyle("width").getPixels("x",!0),i=this.getStyle("height").getPixels("y",!0),o=new pr(this.document,null);o.attributes.viewBox=new Te(this.document,"viewBox",this.getAttribute("viewBox").getValue()),o.attributes.width=new Te(this.document,"width","".concat(n,"px")),o.attributes.height=new Te(this.document,"height","".concat(i,"px")),o.attributes.transform=new Te(this.document,"transform",this.getAttribute("patternTransform").getValue()),o.children=this.children;var a=this.document.createCanvas(n,i),u=a.getContext("2d"),s=this.getAttribute("x"),c=this.getAttribute("y");s.hasValue()&&c.hasValue()&&u.translate(s.getPixels("x",!0),c.getPixels("y",!0)),r.hasValue()?this.styles["fill-opacity"]=r:Ot()(this.styles,"fill-opacity");for(var f=-1;f<=1;f++)for(var l=-1;l<=1;l++)u.save(),o.attributes.x=new Te(this.document,"x",f*a.width),o.attributes.y=new Te(this.document,"y",l*a.height),o.render(u),u.restore();return t.createPattern(a,"repeat")}}]),r}(qe);function Cr(t){var e=function(){if("undefined"==typeof Reflect||!rt.a)return!1;if(rt.a.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(rt()(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=st()(t);if(e){var i=st()(this).constructor;r=rt()(n,arguments,i)}else r=n.apply(this,arguments);return at()(this,r)}}var Er=function(t){it()(r,t);var e=Cr(r);function r(){var t;return V()(this,r),(t=e.apply(this,arguments)).type="marker",t}return I()(r,[{key:"render",value:function(t,e,r){if(e){var n=e.x,i=e.y,o=this.getAttribute("orient").getValue("auto"),a=this.getAttribute("markerUnits").getValue("strokeWidth");t.translate(n,i),"auto"===o&&t.rotate(r),"strokeWidth"===a&&t.scale(t.lineWidth,t.lineWidth),t.save();var u=new pr(this.document,null);u.type=this.type,u.attributes.viewBox=new Te(this.document,"viewBox",this.getAttribute("viewBox").getValue()),u.attributes.refX=new Te(this.document,"refX",this.getAttribute("refX").getValue()),u.attributes.refY=new Te(this.document,"refY",this.getAttribute("refY").getValue()),u.attributes.width=new Te(this.document,"width",this.getAttribute("markerWidth").getValue()),u.attributes.height=new Te(this.document,"height",this.getAttribute("markerHeight").getValue()),u.attributes.overflow=new Te(this.document,"overflow",this.getAttribute("overflow").getValue()),u.attributes.fill=new Te(this.document,"fill",this.getAttribute("fill").getColor("black")),u.attributes.stroke=new Te(this.document,"stroke",this.getAttribute("stroke").getValue("none")),u.children=this.children,u.render(t),t.restore(),"strokeWidth"===a&&t.scale(1/t.lineWidth,1/t.lineWidth),"auto"===o&&t.rotate(-r),t.translate(-n,-i)}}}]),r}(qe);function Mr(t){var e=function(){if("undefined"==typeof Reflect||!rt.a)return!1;if(rt.a.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(rt()(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=st()(t);if(e){var i=st()(this).constructor;r=rt()(n,arguments,i)}else r=n.apply(this,arguments);return at()(this,r)}}var _r=function(t){it()(r,t);var e=Mr(r);function r(){var t;return V()(this,r),(t=e.apply(this,arguments)).type="defs",t}return I()(r,[{key:"render",value:function(){}}]),r}(qe);function Nr(t){var e=function(){if("undefined"==typeof Reflect||!rt.a)return!1;if(rt.a.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(rt()(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=st()(t);if(e){var i=st()(this).constructor;r=rt()(n,arguments,i)}else r=n.apply(this,arguments);return at()(this,r)}}var Rr=function(t){it()(r,t);var e=Nr(r);function r(){var t;return V()(this,r),(t=e.apply(this,arguments)).type="g",t}return I()(r,[{key:"getBoundingBox",value:function(t){var e,r=new Ke;return x()(e=this.children).call(e,(function(e){r.addBoundingBox(e.getBoundingBox(t))})),r}}]),r}(er);function Vr(t){var e=function(){if("undefined"==typeof Reflect||!rt.a)return!1;if(rt.a.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(rt()(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=st()(t);if(e){var i=st()(this).constructor;r=rt()(n,arguments,i)}else r=n.apply(this,arguments);return at()(this,r)}}var Dr=function(t){it()(r,t);var e=Vr(r);function r(t,n,i){var o;V()(this,r),(o=e.call(this,t,n,i)).attributesToInherit=["gradientUnits"],o.stops=[];var a=Et()(o),u=a.stops,s=a.children;return x()(s).call(s,(function(t){"stop"===t.type&&u.push(t)})),o}return I()(r,[{key:"getGradientUnits",value:function(){return this.getAttribute("gradientUnits").getString("objectBoundingBox")}},{key:"createGradient",value:function(t,e,r){var n=this,i=this;this.getHrefAttribute().hasValue()&&(i=this.getHrefAttribute().getDefinition(),this.inheritStopContainer(i));var o=i.stops,a=this.getGradient(t,e);if(!a)return this.addParentOpacity(r,o[o.length-1].color);if(x()(o).call(o,(function(t){a.addColorStop(t.offset,n.addParentOpacity(r,t.color))})),this.getAttribute("gradientTransform").hasValue()){var u=this.document,s=u.screen,c=s.MAX_VIRTUAL_PIXELS,l=s.viewPort,h=f()(l.viewPorts,1)[0],p=new yr(u,null);p.attributes.x=new Te(u,"x",-c/3),p.attributes.y=new Te(u,"y",-c/3),p.attributes.width=new Te(u,"width",c),p.attributes.height=new Te(u,"height",c);var v=new Rr(u,null);v.attributes.transform=new Te(u,"transform",this.getAttribute("gradientTransform").getValue()),v.children=[p];var y=new pr(u,null);y.attributes.x=new Te(u,"x",0),y.attributes.y=new Te(u,"y",0),y.attributes.width=new Te(u,"width",h.width),y.attributes.height=new Te(u,"height",h.height),y.children=[v];var d=u.createCanvas(h.width,h.height),g=d.getContext("2d");return g.fillStyle=a,y.render(g),g.createPattern(d,"no-repeat")}return a}},{key:"inheritStopContainer",value:function(t){var e,r=this;x()(e=this.attributesToInherit).call(e,(function(e){!r.getAttribute(e).hasValue()&&t.getAttribute(e).hasValue()&&r.getAttribute(e,!0).setValue(t.getAttribute(e).getValue())}))}},{key:"addParentOpacity",value:function(t,e){return t.hasValue()?new Te(this.document,"color",e).addOpacity(t).getColor():e}}]),r}(qe);function Ir(t){var e=function(){if("undefined"==typeof Reflect||!rt.a)return!1;if(rt.a.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(rt()(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=st()(t);if(e){var i=st()(this).constructor;r=rt()(n,arguments,i)}else r=n.apply(this,arguments);return at()(this,r)}}var Lr=function(t){it()(r,t);var e=Ir(r);function r(t,n,i){var o;return V()(this,r),(o=e.call(this,t,n,i)).type="linearGradient",o.attributesToInherit.push("x1","y1","x2","y2"),o}return I()(r,[{key:"getGradient",value:function(t,e){var r="objectBoundingBox"===this.getGradientUnits(),n=r?e.getBoundingBox(t):null;if(r&&!n)return null;this.getAttribute("x1").hasValue()||this.getAttribute("y1").hasValue()||this.getAttribute("x2").hasValue()||this.getAttribute("y2").hasValue()||(this.getAttribute("x1",!0).setValue(0),this.getAttribute("y1",!0).setValue(0),this.getAttribute("x2",!0).setValue(1),this.getAttribute("y2",!0).setValue(0));var i=r?n.x+n.width*this.getAttribute("x1").getNumber():this.getAttribute("x1").getPixels("x"),o=r?n.y+n.height*this.getAttribute("y1").getNumber():this.getAttribute("y1").getPixels("y"),a=r?n.x+n.width*this.getAttribute("x2").getNumber():this.getAttribute("x2").getPixels("x"),u=r?n.y+n.height*this.getAttribute("y2").getNumber():this.getAttribute("y2").getPixels("y");return i===a&&o===u?null:t.createLinearGradient(i,o,a,u)}}]),r}(Dr);function jr(t){var e=function(){if("undefined"==typeof Reflect||!rt.a)return!1;if(rt.a.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(rt()(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=st()(t);if(e){var i=st()(this).constructor;r=rt()(n,arguments,i)}else r=n.apply(this,arguments);return at()(this,r)}}var zr=function(t){it()(r,t);var e=jr(r);function r(t,n,i){var o;return V()(this,r),(o=e.call(this,t,n,i)).type="radialGradient",o.attributesToInherit.push("cx","cy","r","fx","fy","fr"),o}return I()(r,[{key:"getGradient",value:function(t,e){var r="objectBoundingBox"===this.getGradientUnits(),n=e.getBoundingBox(t);if(r&&!n)return null;this.getAttribute("cx").hasValue()||this.getAttribute("cx",!0).setValue("50%"),this.getAttribute("cy").hasValue()||this.getAttribute("cy",!0).setValue("50%"),this.getAttribute("r").hasValue()||this.getAttribute("r",!0).setValue("50%");var i=r?n.x+n.width*this.getAttribute("cx").getNumber():this.getAttribute("cx").getPixels("x"),o=r?n.y+n.height*this.getAttribute("cy").getNumber():this.getAttribute("cy").getPixels("y"),a=i,u=o;this.getAttribute("fx").hasValue()&&(a=r?n.x+n.width*this.getAttribute("fx").getNumber():this.getAttribute("fx").getPixels("x")),this.getAttribute("fy").hasValue()&&(u=r?n.y+n.height*this.getAttribute("fy").getNumber():this.getAttribute("fy").getPixels("y"));var s=r?(n.width+n.height)/2*this.getAttribute("r").getNumber():this.getAttribute("r").getPixels(),c=this.getAttribute("fr").getPixels();return t.createRadialGradient(a,u,c,i,o,s)}}]),r}(Dr);function Fr(t){var e=function(){if("undefined"==typeof Reflect||!rt.a)return!1;if(rt.a.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(rt()(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=st()(t);if(e){var i=st()(this).constructor;r=rt()(n,arguments,i)}else r=n.apply(this,arguments);return at()(this,r)}}var Br=function(t){it()(r,t);var e=Fr(r);function r(t,n,i){var o;V()(this,r),(o=e.call(this,t,n,i)).type="stop";var a=Math.max(0,Math.min(1,o.getAttribute("offset").getNumber())),u=o.getStyle("stop-opacity"),s=o.getStyle("stop-color",!0);return""===s.getString()&&s.setValue("#000"),u.hasValue()&&(s=s.addOpacity(u)),o.offset=a,o.color=s.getColor(),o}return r}(qe);function Hr(t){var e=function(){if("undefined"==typeof Reflect||!rt.a)return!1;if(rt.a.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(rt()(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=st()(t);if(e){var i=st()(this).constructor;r=rt()(n,arguments,i)}else r=n.apply(this,arguments);return at()(this,r)}}var Ur=function(t){it()(r,t);var e=Hr(r);function r(t,n,i){var o;return V()(this,r),(o=e.call(this,t,n,i)).type="animate",o.duration=0,o.initialValue=null,o.initialUnits="",o.removed=!1,o.frozen=!1,t.screen.animations.push(Et()(o)),o.begin=o.getAttribute("begin").getMilliseconds(),o.maxDuration=o.begin+o.getAttribute("dur").getMilliseconds(),o.from=o.getAttribute("from"),o.to=o.getAttribute("to"),o.values=o.getAttribute("values"),_t()(o).hasValue()&&_t()(o).setValue(_t()(o).getString().split(";")),o}return I()(r,[{key:"getProperty",value:function(){var t=this.getAttribute("attributeType").getString(),e=this.getAttribute("attributeName").getString();return"CSS"===t?this.parent.getStyle(e,!0):this.parent.getAttribute(e,!0)}},{key:"calcValue",value:function(){var t,e=this.initialUnits,r=this.getProgress(),n=r.progress,i=r.from,o=r.to,a=i.getNumber()+(o.getNumber()-i.getNumber())*n;return"%"===e&&(a*=100),j()(t="".concat(a)).call(t,e)}},{key:"update",value:function(t){var e=this.parent,r=this.getProperty();if(this.initialValue||(this.initialValue=r.getString(),this.initialUnits=r.getUnits()),this.duration>this.maxDuration){var n=this.getAttribute("fill").getString("remove");if("indefinite"===this.getAttribute("repeatCount").getString()||"indefinite"===this.getAttribute("repeatDur").getString())this.duration=0;else if("freeze"!==n||this.frozen){if("remove"===n&&!this.removed)return this.removed=!0,r.setValue(e.animationFrozen?e.animationFrozenValue:this.initialValue),!0}else this.frozen=!0,e.animationFrozen=!0,e.animationFrozenValue=r.getString();return!1}this.duration+=t;var i=!1;if(this.begin<this.duration){var o=this.calcValue(),a=this.getAttribute("type");if(a.hasValue()){var u,s=a.getString();o=j()(u="".concat(s,"(")).call(u,o,")")}r.setValue(o),i=!0}return i}},{key:"getProgress",value:function(){var t=this.document,e=_t()(this),r={progress:(this.duration-this.begin)/(this.maxDuration-this.begin)};if(e.hasValue()){var n=r.progress*(e.getValue().length-1),i=Math.floor(n),o=Math.ceil(n);r.from=new Te(t,"from",a()(e.getValue()[i])),r.to=new Te(t,"to",a()(e.getValue()[o])),r.progress=(n-i)/(o-i)}else r.from=this.from,r.to=this.to;return r}}]),r}(qe);function Xr(t){var e=function(){if("undefined"==typeof Reflect||!rt.a)return!1;if(rt.a.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(rt()(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=st()(t);if(e){var i=st()(this).constructor;r=rt()(n,arguments,i)}else r=n.apply(this,arguments);return at()(this,r)}}var Yr=function(t){it()(r,t);var e=Xr(r);function r(){var t;return V()(this,r),(t=e.apply(this,arguments)).type="animateColor",t}return I()(r,[{key:"calcValue",value:function(){var t=this.getProgress(),e=t.progress,r=t.from,n=t.to,i=new tt.a(r.getColor()),o=new tt.a(n.getColor());if(i.ok&&o.ok){var a,u,s=i.r+(o.r-i.r)*e,c=i.g+(o.g-i.g)*e,f=i.b+(o.b-i.b)*e;return j()(a=j()(u="rgb(".concat(Rt()(s,10),", ")).call(u,Rt()(c,10),", ")).call(a,Rt()(f,10),")")}return this.getAttribute("from").getColor()}}]),r}(Ur);function qr(t){var e=function(){if("undefined"==typeof Reflect||!rt.a)return!1;if(rt.a.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(rt()(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=st()(t);if(e){var i=st()(this).constructor;r=rt()(n,arguments,i)}else r=n.apply(this,arguments);return at()(this,r)}}var Qr=function(t){it()(r,t);var e=qr(r);function r(){var t;return V()(this,r),(t=e.apply(this,arguments)).type="animateTransform",t}return I()(r,[{key:"calcValue",value:function(){var t=this.getProgress(),e=t.progress,r=t.from,n=t.to,i=te(r.getString()),o=te(n.getString());return s()(i).call(i,(function(t,r){return t+(o[r]-t)*e})).join(" ")}}]),r}(Ur);function Wr(t,e){var r;if(void 0===Bt.a||null==zt()(t)){if(Lt()(t)||(r=function(t,e){var r;if(!t)return;if("string"==typeof t)return Gr(t,e);var n=Ut()(r=Object.prototype.toString.call(t)).call(r,8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return dt()(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Gr(t,e)}(t))||e&&t&&"number"==typeof t.length){r&&(t=r);var n=0,i=function(){};return{s:i,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,u=!1;return{s:function(){r=Dt()(t)},n:function(){var t=r.next();return a=t.done,t},e:function(t){u=!0,o=t},f:function(){try{a||null==r.return||r.return()}finally{if(u)throw o}}}}function Gr(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function $r(t){var e=function(){if("undefined"==typeof Reflect||!rt.a)return!1;if(rt.a.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(rt()(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=st()(t);if(e){var i=st()(this).constructor;r=rt()(n,arguments,i)}else r=n.apply(this,arguments);return at()(this,r)}}var Zr=function(t){it()(r,t);var e=$r(r);function r(t,n,i){var o;V()(this,r),(o=e.call(this,t,n,i)).type="font",o.glyphs={},o.horizAdvX=o.getAttribute("horiz-adv-x").getNumber();var a,u=t.definitions,s=Wr(Et()(o).children);try{for(s.s();!(a=s.n()).done;){var c=a.value;switch(c.type){case"font-face":o.fontFace=c;var f=c.getStyle("font-family");f.hasValue()&&(u[f.getString()]=Et()(o));break;case"missing-glyph":o.missingGlyph=c;break;case"glyph":var l=c;l.arabicForm?(o.isRTL=!0,o.isArabic=!0,void 0===o.glyphs[l.unicode]&&(o.glyphs[l.unicode]={}),o.glyphs[l.unicode][l.arabicForm]=l):o.glyphs[l.unicode]=l}}}catch(t){s.e(t)}finally{s.f()}return o}return I()(r,[{key:"render",value:function(){}}]),r}(qe);function Jr(t){var e=function(){if("undefined"==typeof Reflect||!rt.a)return!1;if(rt.a.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(rt()(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=st()(t);if(e){var i=st()(this).constructor;r=rt()(n,arguments,i)}else r=n.apply(this,arguments);return at()(this,r)}}var Kr=function(t){it()(r,t);var e=Jr(r);function r(t,n,i){var o;return V()(this,r),(o=e.call(this,t,n,i)).type="font-face",o.ascent=o.getAttribute("ascent").getNumber(),o.descent=o.getAttribute("descent").getNumber(),o.unitsPerEm=o.getAttribute("units-per-em").getNumber(),o}return r}(qe);function tn(t){var e=function(){if("undefined"==typeof Reflect||!rt.a)return!1;if(rt.a.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(rt()(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=st()(t);if(e){var i=st()(this).constructor;r=rt()(n,arguments,i)}else r=n.apply(this,arguments);return at()(this,r)}}var en=function(t){it()(r,t);var e=tn(r);function r(){var t;return V()(this,r),(t=e.apply(this,arguments)).type="missing-glyph",t.horizAdvX=0,t}return r}(lr);function rn(t){var e=function(){if("undefined"==typeof Reflect||!rt.a)return!1;if(rt.a.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(rt()(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=st()(t);if(e){var i=st()(this).constructor;r=rt()(n,arguments,i)}else r=n.apply(this,arguments);return at()(this,r)}}var nn=function(t){it()(r,t);var e=rn(r);function r(t,n,i){var o;return V()(this,r),(o=e.call(this,t,n,i)).type="glyph",o.horizAdvX=o.getAttribute("horiz-adv-x").getNumber(),o.unicode=o.getAttribute("unicode").getString(),o.arabicForm=o.getAttribute("arabic-form").getString(),o}return r}(lr);function on(t){var e=function(){if("undefined"==typeof Reflect||!rt.a)return!1;if(rt.a.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(rt()(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=st()(t);if(e){var i=st()(this).constructor;r=rt()(n,arguments,i)}else r=n.apply(this,arguments);return at()(this,r)}}var an=function(t){it()(r,t);var e=on(r);function r(){var t;return V()(this,r),(t=e.apply(this,arguments)).type="tref",t}return I()(r,[{key:"getText",value:function(){var t=this.getHrefAttribute().getDefinition();if(t){var e=t.children[0];if(e)return e.getText()}return""}}]),r}(nr);function un(t){var e=function(){if("undefined"==typeof Reflect||!rt.a)return!1;if(rt.a.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(rt()(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=st()(t);if(e){var i=st()(this).constructor;r=rt()(n,arguments,i)}else r=n.apply(this,arguments);return at()(this,r)}}var sn=function(t){it()(r,t);var e=un(r);function r(t,n,i){var o,a;V()(this,r),(a=e.call(this,t,n,i)).type="a";var u=n.childNodes,s=u[0],c=u.length>0&&X()(o=dt()(u)).call(o,(function(t){return 3===t.nodeType}));return a.hasText=c,a.text=c?a.getTextFromNode(s):"",a}return I()(r,[{key:"getText",value:function(){return this.text}},{key:"renderChildren",value:function(t){if(this.hasText){wt()(st()(r.prototype),"renderChildren",this).call(this,t);var e=this.document,n=this.x,i=this.y,o=e.screen.mouse,a=new Te(e,"fontSize",Je.parse(e.ctx.font).fontSize);o.isWorking()&&o.checkBoundingBox(this,new Ke(n,i-a.getPixels("y"),n+this.measureText(t),i))}else if(this.children.length>0){var u=new Rr(this.document,null);u.children=this.children,u.parent=this,u.render(t)}}},{key:"onClick",value:function(){var t=this.document.window;t&&t.open(this.getHrefAttribute().getString())}},{key:"onMouseMove",value:function(){this.document.ctx.canvas.style.cursor="pointer"}}]),r}(nr);function cn(t,e){var r;if(void 0===Bt.a||null==zt()(t)){if(Lt()(t)||(r=function(t,e){var r;if(!t)return;if("string"==typeof t)return fn(t,e);var n=Ut()(r=Object.prototype.toString.call(t)).call(r,8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return dt()(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return fn(t,e)}(t))||e&&t&&"number"==typeof t.length){r&&(t=r);var n=0,i=function(){};return{s:i,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,u=!1;return{s:function(){r=Dt()(t)},n:function(){var t=r.next();return a=t.done,t},e:function(t){u=!0,o=t},f:function(){try{a||null==r.return||r.return()}finally{if(u)throw o}}}}function fn(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function ln(t,e){var r=P()(t);if(k.a){var n=k()(t);e&&(n=w()(n).call(n,(function(e){return b()(t,e).enumerable}))),r.push.apply(r,n)}return r}function hn(t){for(var e=1;e<arguments.length;e++){var r,n=null!=arguments[e]?arguments[e]:{};if(e%2)x()(r=ln(Object(n),!0)).call(r,(function(e){N()(t,e,n[e])}));else if(d.a)v()(t,d()(n));else{var i;x()(i=ln(Object(n))).call(i,(function(e){h()(t,e,b()(n,e))}))}}return t}function pn(t){var e=function(){if("undefined"==typeof Reflect||!rt.a)return!1;if(rt.a.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(rt()(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=st()(t);if(e){var i=st()(this).constructor;r=rt()(n,arguments,i)}else r=n.apply(this,arguments);return at()(this,r)}}var vn=function(t){it()(r,t);var e=pn(r);function r(t,n,i){var o;V()(this,r),(o=e.call(this,t,n,i)).type="textPath",o.textWidth=0,o.textHeight=0,o.pathLength=-1,o.glyphInfo=null,o.letterSpacingCache=[],o.measuresCache=new Yt.a([["",0]]);var a=o.getHrefAttribute().getDefinition();return o.text=o.getTextFromNode(),o.dataArray=o.parsePathData(a),o}return I()(r,[{key:"getText",value:function(){return this.text}},{key:"path",value:function(t){var e=this.dataArray;t&&t.beginPath(),x()(e).call(e,(function(e){var r=e.type,n=e.points;switch(r){case cr.LINE_TO:t&&t.lineTo(n[0],n[1]);break;case cr.MOVE_TO:t&&t.moveTo(n[0],n[1]);break;case cr.CURVE_TO:t&&t.bezierCurveTo(n[0],n[1],n[2],n[3],n[4],n[5]);break;case cr.QUAD_TO:t&&t.quadraticCurveTo(n[0],n[1],n[2],n[3]);break;case cr.ARC:var i=f()(n,8),o=i[0],a=i[1],u=i[2],s=i[3],c=i[4],l=i[5],h=i[6],p=i[7],v=u>s?u:s,y=u>s?1:u/s,d=u>s?s/u:1;t&&(t.translate(o,a),t.rotate(h),t.scale(y,d),t.arc(0,0,v,c,c+l,Boolean(1-p)),t.scale(1/y,1/d),t.rotate(-h),t.translate(-o,-a));break;case cr.CLOSE_PATH:t&&t.closePath()}}))}},{key:"renderChildren",value:function(t){this.setTextData(t),t.save();var e=this.parent.getStyle("text-decoration").getString(),r=this.getFontSize(),n=this.glyphInfo,i=t.fillStyle;"underline"===e&&t.beginPath(),x()(n).call(n,(function(n,i){var o=n.p0,a=n.p1,u=n.rotation,s=n.text;t.save(),t.translate(o.x,o.y),t.rotate(u),t.fillStyle&&t.fillText(s,0,0),t.strokeStyle&&t.strokeText(s,0,0),t.restore(),"underline"===e&&(0===i&&t.moveTo(o.x,o.y+r/8),t.lineTo(a.x,a.y+r/5))})),"underline"===e&&(t.lineWidth=r/20,t.strokeStyle=i,t.stroke(),t.closePath()),t.restore()}},{key:"getLetterSpacingAt",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return this.letterSpacingCache[t]||0}},{key:"findSegmentToFitChar",value:function(t,e,r,n,i,o,a,u,s){var c=o,f=this.measureText(t,u);" "===u&&"justify"===e&&r<n&&(f+=(n-r)/i),s>-1&&(c+=this.getLetterSpacingAt(s));var l=this.textHeight/20,h=this.getEquidistantPointOnPath(c,l,0),p=this.getEquidistantPointOnPath(c+f,l,0),v={p0:h,p1:p},y=h&&p?Math.atan2(p.y-h.y,p.x-h.x):0;if(a){var d=Math.cos(Math.PI/2+y)*a,g=Math.cos(-y)*a;v.p0=hn(hn({},h),{},{x:h.x+d,y:h.y+g}),v.p1=hn(hn({},p),{},{x:p.x+d,y:p.y+g})}return{offset:c+=f,segment:v,rotation:y}}},{key:"measureText",value:function(t,e){var r=this.measuresCache,n=e||this.getText();if(r.has(n))return r.get(n);var i=this.measureTargetText(t,n);return r.set(n,i),i}},{key:"setTextData",value:function(t){var e,r=this;if(!this.glyphInfo){var n=this.getText(),i=n.split(""),o=n.split(" ").length-1,a=s()(e=this.parent.getAttribute("dx").split()).call(e,(function(t){return t.getPixels("x")})),u=this.parent.getAttribute("dy").getPixels("y"),c=this.parent.getStyle("text-anchor").getString("start"),f=this.getStyle("letter-spacing"),l=this.parent.getStyle("letter-spacing"),h=0;f.hasValue()&&"inherit"!==f.getValue()?f.hasValue()&&"initial"!==f.getValue()&&"unset"!==f.getValue()&&(h=f.getPixels()):h=l.getPixels();var p=[],v=n.length;this.letterSpacingCache=p;for(var y=0;y<v;y++)p.push(void 0!==a[y]?a[y]:h);var d=F()(p).call(p,(function(t,e,r){return 0===r?0:t+e||0}),0),g=this.measureText(t),m=Math.max(g+d,0);this.textWidth=g,this.textHeight=this.getFontSize(),this.glyphInfo=[];var b=this.getPathLength(),S=this.getStyle("startOffset").getNumber(0)*b,w=0;"middle"!==c&&"center"!==c||(w=-m/2),"end"!==c&&"right"!==c||(w=-m),w+=S,x()(i).call(i,(function(e,n){var a=r.findSegmentToFitChar(t,c,m,b,o,w,u,e,n),s=a.offset,f=a.segment,l=a.rotation;w=s,f.p0&&f.p1&&r.glyphInfo.push({text:i[n],p0:f.p0,p1:f.p1,rotation:l})}))}}},{key:"parsePathData",value:function(t){if(this.pathLength=-1,!t)return[];var e=[],r=t.pathParser;for(r.reset();!r.isEnd();){var n=r.current,i=n?n.x:0,o=n?n.y:0,a=r.next(),u=a.type,s=[];switch(a.type){case cr.MOVE_TO:this.pathM(r,s);break;case cr.LINE_TO:u=this.pathL(r,s);break;case cr.HORIZ_LINE_TO:u=this.pathH(r,s);break;case cr.VERT_LINE_TO:u=this.pathV(r,s);break;case cr.CURVE_TO:this.pathC(r,s);break;case cr.SMOOTH_CURVE_TO:u=this.pathS(r,s);break;case cr.QUAD_TO:this.pathQ(r,s);break;case cr.SMOOTH_QUAD_TO:u=this.pathT(r,s);break;case cr.ARC:s=this.pathA(r);break;case cr.CLOSE_PATH:lr.pathZ(r)}a.type!==cr.CLOSE_PATH?e.push({type:u,points:s,start:{x:i,y:o},pathLength:this.calcLength(i,o,u,s)}):e.push({type:cr.CLOSE_PATH,points:[],pathLength:0})}return e}},{key:"pathM",value:function(t,e){var r=lr.pathM(t).point,n=r.x,i=r.y;e.push(n,i)}},{key:"pathL",value:function(t,e){var r=lr.pathL(t).point,n=r.x,i=r.y;return e.push(n,i),cr.LINE_TO}},{key:"pathH",value:function(t,e){var r=lr.pathH(t).point,n=r.x,i=r.y;return e.push(n,i),cr.LINE_TO}},{key:"pathV",value:function(t,e){var r=lr.pathV(t).point,n=r.x,i=r.y;return e.push(n,i),cr.LINE_TO}},{key:"pathC",value:function(t,e){var r=lr.pathC(t),n=r.point,i=r.controlPoint,o=r.currentPoint;e.push(n.x,n.y,i.x,i.y,o.x,o.y)}},{key:"pathS",value:function(t,e){var r=lr.pathS(t),n=r.point,i=r.controlPoint,o=r.currentPoint;return e.push(n.x,n.y,i.x,i.y,o.x,o.y),cr.CURVE_TO}},{key:"pathQ",value:function(t,e){var r=lr.pathQ(t),n=r.controlPoint,i=r.currentPoint;e.push(n.x,n.y,i.x,i.y)}},{key:"pathT",value:function(t,e){var r=lr.pathT(t),n=r.controlPoint,i=r.currentPoint;return e.push(n.x,n.y,i.x,i.y),cr.QUAD_TO}},{key:"pathA",value:function(t){var e=lr.pathA(t),r=e.rX,n=e.rY,i=e.sweepFlag,o=e.xAxisRotation,a=e.centp,u=e.a1,s=e.ad;return 0===i&&s>0&&(s-=2*Math.PI),1===i&&s<0&&(s+=2*Math.PI),[a.x,a.y,r,n,u,s,o,i]}},{key:"calcLength",value:function(t,e,r,n){var i=0,o=null,a=null,u=0;switch(r){case cr.LINE_TO:return this.getLineLength(t,e,n[0],n[1]);case cr.CURVE_TO:for(i=0,o=this.getPointOnCubicBezier(0,t,e,n[0],n[1],n[2],n[3],n[4],n[5]),u=.01;u<=1;u+=.01)a=this.getPointOnCubicBezier(u,t,e,n[0],n[1],n[2],n[3],n[4],n[5]),i+=this.getLineLength(o.x,o.y,a.x,a.y),o=a;return i;case cr.QUAD_TO:for(i=0,o=this.getPointOnQuadraticBezier(0,t,e,n[0],n[1],n[2],n[3]),u=.01;u<=1;u+=.01)a=this.getPointOnQuadraticBezier(u,t,e,n[0],n[1],n[2],n[3]),i+=this.getLineLength(o.x,o.y,a.x,a.y),o=a;return i;case cr.ARC:i=0;var s=n[4],c=n[5],f=n[4]+c,l=Math.PI/180;if(Math.abs(s-f)<l&&(l=Math.abs(s-f)),o=this.getPointOnEllipticalArc(n[0],n[1],n[2],n[3],s,0),c<0)for(u=s-l;u>f;u-=l)a=this.getPointOnEllipticalArc(n[0],n[1],n[2],n[3],u,0),i+=this.getLineLength(o.x,o.y,a.x,a.y),o=a;else for(u=s+l;u<f;u+=l)a=this.getPointOnEllipticalArc(n[0],n[1],n[2],n[3],u,0),i+=this.getLineLength(o.x,o.y,a.x,a.y),o=a;return a=this.getPointOnEllipticalArc(n[0],n[1],n[2],n[3],f,0),i+=this.getLineLength(o.x,o.y,a.x,a.y)}return 0}},{key:"getPointOnLine",value:function(t,e,r,n,i){var o=arguments.length>5&&void 0!==arguments[5]?arguments[5]:e,a=arguments.length>6&&void 0!==arguments[6]?arguments[6]:r,u=(i-r)/(n-e+ve),s=Math.sqrt(t*t/(1+u*u));n<e&&(s*=-1);var c=u*s,f=null;if(n===e)f={x:o,y:a+c};else if((a-r)/(o-e+ve)===u)f={x:o+s,y:a+c};else{var l=0,h=0,p=this.getLineLength(e,r,n,i);if(p<ve)return null;var v=(o-e)*(n-e)+(a-r)*(i-r);l=e+(v/=p*p)*(n-e),h=r+v*(i-r);var y=this.getLineLength(o,a,l,h),d=Math.sqrt(t*t-y*y);s=Math.sqrt(d*d/(1+u*u)),n<e&&(s*=-1),f={x:l+s,y:h+(c=u*s)}}return f}},{key:"getPointOnPath",value:function(t){var e=this.getPathLength(),r=0,n=null;if(t<-5e-5||t-5e-5>e)return null;var i,o=cn(this.dataArray);try{for(o.s();!(i=o.n()).done;){var a=i.value;if(!a||!(a.pathLength<5e-5||r+a.pathLength+5e-5<t)){var u=t-r,s=0;switch(a.type){case cr.LINE_TO:n=this.getPointOnLine(u,a.start.x,a.start.y,a.points[0],a.points[1],a.start.x,a.start.y);break;case cr.ARC:var c=a.points[4],f=a.points[5],l=a.points[4]+f;if(s=c+u/a.pathLength*f,f<0&&s<l||f>=0&&s>l)break;n=this.getPointOnEllipticalArc(a.points[0],a.points[1],a.points[2],a.points[3],s,a.points[6]);break;case cr.CURVE_TO:(s=u/a.pathLength)>1&&(s=1),n=this.getPointOnCubicBezier(s,a.start.x,a.start.y,a.points[0],a.points[1],a.points[2],a.points[3],a.points[4],a.points[5]);break;case cr.QUAD_TO:(s=u/a.pathLength)>1&&(s=1),n=this.getPointOnQuadraticBezier(s,a.start.x,a.start.y,a.points[0],a.points[1],a.points[2],a.points[3])}if(n)return n;break}r+=a.pathLength}}catch(t){o.e(t)}finally{o.f()}return null}},{key:"getLineLength",value:function(t,e,r,n){return Math.sqrt((r-t)*(r-t)+(n-e)*(n-e))}},{key:"getPathLength",value:function(){var t;-1===this.pathLength&&(this.pathLength=F()(t=this.dataArray).call(t,(function(t,e){return e.pathLength>0?t+e.pathLength:t}),0));return this.pathLength}},{key:"getPointOnCubicBezier",value:function(t,e,r,n,i,o,a,u,s){return{x:u*xe(t)+o*me(t)+n*be(t)+e*Se(t),y:s*xe(t)+a*me(t)+i*be(t)+r*Se(t)}}},{key:"getPointOnQuadraticBezier",value:function(t,e,r,n,i,o,a){return{x:o*we(t)+n*Ae(t)+e*ke(t),y:a*we(t)+i*Ae(t)+r*ke(t)}}},{key:"getPointOnEllipticalArc",value:function(t,e,r,n,i,o){var a=Math.cos(o),u=Math.sin(o),s=r*Math.cos(i),c=n*Math.sin(i);return{x:t+(s*a-c*u),y:e+(s*u+c*a)}}},{key:"buildEquidistantCache",value:function(t,e){var r=this.getPathLength(),n=e||.25,i=t||r/100;if(!this.equidistantCache||this.equidistantCache.step!==i||this.equidistantCache.precision!==n){this.equidistantCache={step:i,precision:n,points:[]};for(var o=0,a=0;a<=r;a+=n){var u=this.getPointOnPath(a),s=this.getPointOnPath(a+n);u&&s&&((o+=this.getLineLength(u.x,u.y,s.x,s.y))>=i&&(this.equidistantCache.points.push({x:u.x,y:u.y,distance:a}),o-=i))}}}},{key:"getEquidistantPointOnPath",value:function(t,e,r){if(this.buildEquidistantCache(e,r),t<0||t-this.getPathLength()>5e-5)return null;var n=Math.round(t/this.getPathLength()*(this.equidistantCache.points.length-1));return this.equidistantCache.points[n]||null}}]),r}(nr);function yn(t){var e=function(){if("undefined"==typeof Reflect||!rt.a)return!1;if(rt.a.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(rt()(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=st()(t);if(e){var i=st()(this).constructor;r=rt()(n,arguments,i)}else r=n.apply(this,arguments);return at()(this,r)}}var dn=function(t){it()(i,t);var e,r,n=yn(i);function i(t,e,r){var o;V()(this,i),(o=n.call(this,t,e,r)).type="image",o.loaded=!1;var a=o.getHrefAttribute().getString();if(!a)return at()(o);var u=/\.svg$/.test(a);return t.images.push(Et()(o)),u?o.loadSvg(a):o.loadImage(a),o.isSvg=u,o}return I()(i,[{key:"loadImage",value:(r=M()(C.a.mark((function t(e){var r;return C.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,this.document.createImage(e);case 3:r=t.sent,this.image=r,t.next=10;break;case 7:t.prev=7,t.t0=t.catch(0),console.error('Error while loading image "'.concat(e,'":'),t.t0);case 10:this.loaded=!0;case 11:case"end":return t.stop()}}),t,this,[[0,7]])}))),function(t){return r.apply(this,arguments)})},{key:"loadSvg",value:(e=M()(C.a.mark((function t(e){var r,n;return C.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,this.document.fetch(e);case 3:return r=t.sent,t.next=6,r.text();case 6:n=t.sent,this.image=n,t.next=13;break;case 10:t.prev=10,t.t0=t.catch(0),console.error('Error while loading image "'.concat(e,'":'),t.t0);case 13:this.loaded=!0;case 14:case"end":return t.stop()}}),t,this,[[0,10]])}))),function(t){return e.apply(this,arguments)})},{key:"renderChildren",value:function(t){var e=this.document,r=this.image,n=this.loaded,i=this.getAttribute("x").getPixels("x"),o=this.getAttribute("y").getPixels("y"),a=this.getStyle("width").getPixels("x"),u=this.getStyle("height").getPixels("y");if(n&&r&&a&&u){if(t.save(),this.isSvg)e.canvg.forkString(t,this.image,{ignoreMouse:!0,ignoreAnimation:!0,ignoreDimensions:!0,ignoreClear:!0,offsetX:i,offsetY:o,scaleWidth:a,scaleHeight:u}).render();else{var s=this.image;t.translate(i,o),e.setViewBox({ctx:t,aspectRatio:this.getAttribute("preserveAspectRatio").getString(),width:a,desiredWidth:s.width,height:u,desiredHeight:s.height}),this.loaded&&(void 0===s.complete||s.complete)&&t.drawImage(s,0,0)}t.restore()}}},{key:"getBoundingBox",value:function(){var t=this.getAttribute("x").getPixels("x"),e=this.getAttribute("y").getPixels("y"),r=this.getStyle("width").getPixels("x"),n=this.getStyle("height").getPixels("y");return new Ke(t,e,t+r,e+n)}}]),i}(er);function gn(t){var e=function(){if("undefined"==typeof Reflect||!rt.a)return!1;if(rt.a.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(rt()(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=st()(t);if(e){var i=st()(this).constructor;r=rt()(n,arguments,i)}else r=n.apply(this,arguments);return at()(this,r)}}var xn=function(t){it()(r,t);var e=gn(r);function r(){var t;return V()(this,r),(t=e.apply(this,arguments)).type="symbol",t}return I()(r,[{key:"render",value:function(t){}}]),r}(er),mn=function(){function t(e){V()(this,t),this.document=e,this.loaded=!1,e.fonts.push(this)}var e;return I()(t,[{key:"load",value:(e=M()(C.a.mark((function t(e,r){var n,i,o,a;return C.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,i=this.document,t.next=4,i.canvg.parser.load(r);case 4:o=t.sent,a=o.getElementsByTagName("font"),x()(n=dt()(a)).call(n,(function(t){var r=i.createElement(t);i.definitions[e]=r})),t.next=12;break;case 9:t.prev=9,t.t0=t.catch(0),console.error('Error while loading font "'.concat(r,'":'),t.t0);case 12:this.loaded=!0;case 13:case"end":return t.stop()}}),t,this,[[0,9]])}))),function(t,r){return e.apply(this,arguments)})}]),t}();function bn(t){var e=function(){if("undefined"==typeof Reflect||!rt.a)return!1;if(rt.a.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(rt()(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=st()(t);if(e){var i=st()(this).constructor;r=rt()(n,arguments,i)}else r=n.apply(this,arguments);return at()(this,r)}}var Sn=function(t){it()(r,t);var e=bn(r);function r(t,n,i){var o,a;V()(this,r),(a=e.call(this,t,n,i)).type="style";var u=Zt(s()(o=dt()(n.childNodes)).call(o,(function(t){return t.data})).join("").replace(/(\/\*([^*]|[\r\n]|(\*+([^*\/]|[\r\n])))*\*+\/)|(^[\s]*\/\/.*)/gm,"").replace(/@import.*;/g,"")).split("}");return x()(u).call(u,(function(e){var r=J()(e).call(e);if(r){var n=r.split("{"),i=n[0].split(","),o=n[1].split(";");x()(i).call(i,(function(e){var r=J()(e).call(e);if(r){var n=t.styles[r]||{};if(x()(o).call(o,(function(e){var r,i,o=bt()(e).call(e,":"),a=J()(r=e.substr(0,o)).call(r),u=J()(i=e.substr(o+1,e.length-o)).call(i);a&&u&&(n[a]=new Te(t,a,u))})),t.styles[r]=n,t.stylesSpecificity[r]=pe(r),"@font-face"===r){var i=n["font-family"].getString().replace(/"|'/g,""),a=n.src.getString().split(",");x()(a).call(a,(function(e){if(bt()(e).call(e,'format("svg")')>0){var r=ne(e);r&&new mn(t).load(i,r)}}))}}}))}})),a}return r}(qe);function wn(t){var e=function(){if("undefined"==typeof Reflect||!rt.a)return!1;if(rt.a.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(rt()(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=st()(t);if(e){var i=st()(this).constructor;r=rt()(n,arguments,i)}else r=n.apply(this,arguments);return at()(this,r)}}Sn.parseExternalUrl=ne;var An=function(t){it()(r,t);var e=wn(r);function r(){var t;return V()(this,r),(t=e.apply(this,arguments)).type="use",t}return I()(r,[{key:"setContext",value:function(t){wt()(st()(r.prototype),"setContext",this).call(this,t);var e=this.getAttribute("x"),n=this.getAttribute("y");e.hasValue()&&t.translate(e.getPixels("x"),0),n.hasValue()&&t.translate(0,n.getPixels("y"))}},{key:"path",value:function(t){var e=this.element;e&&e.path(t)}},{key:"renderChildren",value:function(t){var e=this.document,r=this.element;if(r){var n=r;if("symbol"===r.type&&((n=new pr(e,null)).attributes.viewBox=new Te(e,"viewBox",r.getAttribute("viewBox").getString()),n.attributes.preserveAspectRatio=new Te(e,"preserveAspectRatio",r.getAttribute("preserveAspectRatio").getString()),n.attributes.overflow=new Te(e,"overflow",r.getAttribute("overflow").getString()),n.children=r.children,r.styles.opacity=new Te(e,"opacity",this.calculateOpacity())),"svg"===n.type){var i=this.getStyle("width",!1,!0),o=this.getStyle("height",!1,!0);i.hasValue()&&(n.attributes.width=new Te(e,"width",i.getString())),o.hasValue()&&(n.attributes.height=new Te(e,"height",o.getString()))}var a=n.parent;n.parent=this,n.render(t),n.parent=a}}},{key:"getBoundingBox",value:function(t){var e=this.element;return e?e.getBoundingBox(t):null}},{key:"elementTransform",value:function(){var t=this.document,e=this.element;return Ye.fromElement(t,e)}},{key:"element",get:function(){return this._element||(this._element=this.getHrefAttribute().getDefinition()),this._element}}]),r}(er);function kn(t){var e=function(){if("undefined"==typeof Reflect||!rt.a)return!1;if(rt.a.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(rt()(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=st()(t);if(e){var i=st()(this).constructor;r=rt()(n,arguments,i)}else r=n.apply(this,arguments);return at()(this,r)}}function Tn(t,e,r,n,i,o){return t[r*n*4+4*e+o]}function Pn(t,e,r,n,i,o,a){t[r*n*4+4*e+o]=a}function On(t,e,r){return t[e]*r}function Cn(t,e,r,n){return e+Math.cos(t)*r+Math.sin(t)*n}var En=function(t){it()(r,t);var e=kn(r);function r(t,n,i){var o;V()(this,r),(o=e.call(this,t,n,i)).type="feColorMatrix";var a=te(o.getAttribute("values").getString());switch(o.getAttribute("type").getString("matrix")){case"saturate":var u=a[0];a=[.213+.787*u,.715-.715*u,.072-.072*u,0,0,.213-.213*u,.715+.285*u,.072-.072*u,0,0,.213-.213*u,.715-.715*u,.072+.928*u,0,0,0,0,0,1,0,0,0,0,0,1];break;case"hueRotate":var s=a[0]*Math.PI/180;a=[Cn(s,.213,.787,-.213),Cn(s,.715,-.715,-.715),Cn(s,.072,-.072,.928),0,0,Cn(s,.213,-.213,.143),Cn(s,.715,.285,.14),Cn(s,.072,-.072,-.283),0,0,Cn(s,.213,-.213,-.787),Cn(s,.715,-.715,.715),Cn(s,.072,.928,.072),0,0,0,0,0,1,0,0,0,0,0,1];break;case"luminanceToAlpha":a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,.2125,.7154,.0721,0,0,0,0,0,0,1]}return o.matrix=a,o.includeOpacity=o.getAttribute("includeOpacity").hasValue(),o}return I()(r,[{key:"apply",value:function(t,e,r,n,i){for(var o=this.includeOpacity,a=this.matrix,u=t.getImageData(0,0,n,i),s=0;s<i;s++)for(var c=0;c<n;c++){var f=Tn(u.data,c,s,n,0,0),l=Tn(u.data,c,s,n,0,1),h=Tn(u.data,c,s,n,0,2),p=Tn(u.data,c,s,n,0,3),v=On(a,0,f)+On(a,1,l)+On(a,2,h)+On(a,3,p)+On(a,4,1),y=On(a,5,f)+On(a,6,l)+On(a,7,h)+On(a,8,p)+On(a,9,1),d=On(a,10,f)+On(a,11,l)+On(a,12,h)+On(a,13,p)+On(a,14,1),g=On(a,15,f)+On(a,16,l)+On(a,17,h)+On(a,18,p)+On(a,19,1);o&&(v=y=d=0,g*=p/255),Pn(u.data,c,s,n,0,0,v),Pn(u.data,c,s,n,0,1,y),Pn(u.data,c,s,n,0,2,d),Pn(u.data,c,s,n,0,3,g)}t.clearRect(0,0,n,i),t.putImageData(u,0,0)}}]),r}(qe);function Mn(t){var e=function(){if("undefined"==typeof Reflect||!rt.a)return!1;if(rt.a.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(rt()(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=st()(t);if(e){var i=st()(this).constructor;r=rt()(n,arguments,i)}else r=n.apply(this,arguments);return at()(this,r)}}var _n=function(t){it()(r,t);var e=Mn(r);function r(){var t;return V()(this,r),(t=e.apply(this,arguments)).type="mask",t}return I()(r,[{key:"apply",value:function(t,e){var n=this.document,i=this.getAttribute("x").getPixels("x"),o=this.getAttribute("y").getPixels("y"),a=this.getStyle("width").getPixels("x"),u=this.getStyle("height").getPixels("y");if(!a&&!u){var s,c=new Ke;x()(s=this.children).call(s,(function(e){c.addBoundingBox(e.getBoundingBox(t))})),i=Math.floor(c.x1),o=Math.floor(c.y1),a=Math.floor(c.width),u=Math.floor(c.height)}var f=this.removeStyles(e,r.ignoreStyles),l=n.createCanvas(i+a,o+u),h=l.getContext("2d");n.screen.setDefaults(h),this.renderChildren(h),new En(n,{nodeType:1,childNodes:[],attributes:[{nodeName:"type",value:"luminanceToAlpha"},{nodeName:"includeOpacity",value:"true"}]}).apply(h,0,0,i+a,o+u);var p=n.createCanvas(i+a,o+u),v=p.getContext("2d");n.screen.setDefaults(v),e.render(v),v.globalCompositeOperation="destination-in",v.fillStyle=h.createPattern(l,"no-repeat"),v.fillRect(0,0,i+a,o+u),t.fillStyle=v.createPattern(p,"no-repeat"),t.fillRect(0,0,i+a,o+u),this.restoreStyles(e,f)}},{key:"render",value:function(t){}}]),r}(qe);function Nn(t){var e=function(){if("undefined"==typeof Reflect||!rt.a)return!1;if(rt.a.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(rt()(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=st()(t);if(e){var i=st()(this).constructor;r=rt()(n,arguments,i)}else r=n.apply(this,arguments);return at()(this,r)}}_n.ignoreStyles=["mask","transform","clip-path"];var Rn=function(){},Vn=function(t){it()(r,t);var e=Nn(r);function r(){var t;return V()(this,r),(t=e.apply(this,arguments)).type="clipPath",t}return I()(r,[{key:"apply",value:function(t){var e,r=this.document,n=Gt()(t),i=t.beginPath,o=t.closePath;n&&(n.beginPath=Rn,n.closePath=Rn),Qt()(i,t,[]),x()(e=this.children).call(e,(function(e){if(void 0!==e.path){var i=void 0!==e.elementTransform?e.elementTransform():null;i||(i=Ye.fromElement(r,e)),i&&i.apply(t),e.path(t),n&&(n.closePath=o),i&&i.unapply(t)}})),Qt()(o,t,[]),t.clip(),n&&(n.beginPath=i,n.closePath=o)}},{key:"render",value:function(t){}}]),r}(qe);function Dn(t){var e=function(){if("undefined"==typeof Reflect||!rt.a)return!1;if(rt.a.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(rt()(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=st()(t);if(e){var i=st()(this).constructor;r=rt()(n,arguments,i)}else r=n.apply(this,arguments);return at()(this,r)}}var In=function(t){it()(r,t);var e=Dn(r);function r(){var t;return V()(this,r),(t=e.apply(this,arguments)).type="filter",t}return I()(r,[{key:"apply",value:function(t,e){var n=this.document,i=this.children,o=e.getBoundingBox(t);if(o){var a=0,u=0;x()(i).call(i,(function(t){var e=t.extraFilterDistance||0;a=Math.max(a,e),u=Math.max(u,e)}));var s=Math.floor(o.width),c=Math.floor(o.height),f=s+2*a,l=c+2*u;if(!(f<1||l<1)){var h=Math.floor(o.x),p=Math.floor(o.y),v=this.removeStyles(e,r.ignoreStyles),y=n.createCanvas(f,l),d=y.getContext("2d");n.screen.setDefaults(d),d.translate(-h+a,-p+u),e.render(d),x()(i).call(i,(function(t){"function"==typeof t.apply&&t.apply(d,0,0,f,l)})),t.drawImage(y,0,0,f,l,h-a,p-u,f,l),this.restoreStyles(e,v)}}}},{key:"render",value:function(t){}}]),r}(qe);function Ln(t){var e=function(){if("undefined"==typeof Reflect||!rt.a)return!1;if(rt.a.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(rt()(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=st()(t);if(e){var i=st()(this).constructor;r=rt()(n,arguments,i)}else r=n.apply(this,arguments);return at()(this,r)}}In.ignoreStyles=["filter","transform","clip-path"];var jn=function(t){it()(r,t);var e=Ln(r);function r(t,n,i){var o;return V()(this,r),(o=e.call(this,t,n,i)).type="feDropShadow",o.addStylesFromStyleDefinition(),o}return I()(r,[{key:"apply",value:function(t,e,r,n,i){}}]),r}(qe);function zn(t){var e=function(){if("undefined"==typeof Reflect||!rt.a)return!1;if(rt.a.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(rt()(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=st()(t);if(e){var i=st()(this).constructor;r=rt()(n,arguments,i)}else r=n.apply(this,arguments);return at()(this,r)}}var Fn=function(t){it()(r,t);var e=zn(r);function r(){var t;return V()(this,r),(t=e.apply(this,arguments)).type="feMorphology",t}return I()(r,[{key:"apply",value:function(t,e,r,n,i){}}]),r}(qe);function Bn(t){var e=function(){if("undefined"==typeof Reflect||!rt.a)return!1;if(rt.a.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(rt()(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=st()(t);if(e){var i=st()(this).constructor;r=rt()(n,arguments,i)}else r=n.apply(this,arguments);return at()(this,r)}}var Hn=function(t){it()(r,t);var e=Bn(r);function r(){var t;return V()(this,r),(t=e.apply(this,arguments)).type="feComposite",t}return I()(r,[{key:"apply",value:function(t,e,r,n,i){}}]),r}(qe);function Un(t){var e=function(){if("undefined"==typeof Reflect||!rt.a)return!1;if(rt.a.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(rt()(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=st()(t);if(e){var i=st()(this).constructor;r=rt()(n,arguments,i)}else r=n.apply(this,arguments);return at()(this,r)}}var Xn=function(t){it()(r,t);var e=Un(r);function r(t,n,i){var o;return V()(this,r),(o=e.call(this,t,n,i)).type="feGaussianBlur",o.blurRadius=Math.floor(o.getAttribute("stdDeviation").getNumber()),o.extraFilterDistance=o.blurRadius,o}return I()(r,[{key:"apply",value:function(t,e,r,n,i){var o=this.document,a=this.blurRadius,u=o.window?o.window.document.body:null,s=t.canvas;s.id=o.getUniqueId(),u&&(s.style.display="none",u.appendChild(s)),Object($t.a)(s,e,r,n,i,a),u&&u.removeChild(s)}}]),r}(qe);function Yn(t){var e=function(){if("undefined"==typeof Reflect||!rt.a)return!1;if(rt.a.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(rt()(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=st()(t);if(e){var i=st()(this).constructor;r=rt()(n,arguments,i)}else r=n.apply(this,arguments);return at()(this,r)}}var qn=function(t){it()(r,t);var e=Yn(r);function r(){var t;return V()(this,r),(t=e.apply(this,arguments)).type="title",t}return r}(qe);function Qn(t){var e=function(){if("undefined"==typeof Reflect||!rt.a)return!1;if(rt.a.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(rt()(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=st()(t);if(e){var i=st()(this).constructor;r=rt()(n,arguments,i)}else r=n.apply(this,arguments);return at()(this,r)}}var Wn=function(t){it()(r,t);var e=Qn(r);function r(){var t;return V()(this,r),(t=e.apply(this,arguments)).type="desc",t}return r}(qe),Gn={svg:pr,rect:yr,circle:gr,ellipse:mr,line:Sr,polyline:Ar,polygon:Tr,path:lr,pattern:Or,marker:Er,defs:_r,linearGradient:Lr,radialGradient:zr,stop:Br,animate:Ur,animateColor:Yr,animateTransform:Qr,font:Zr,"font-face":Kr,"missing-glyph":en,glyph:nn,text:nr,tspan:or,tref:an,a:sn,textPath:vn,image:dn,g:Rr,symbol:xn,style:Sn,use:An,mask:_n,clipPath:Vn,filter:In,feDropShadow:jn,feMorphology:Fn,feComposite:Hn,feColorMatrix:En,feGaussianBlur:Xn,title:qn,desc:Wn};function $n(t,e){var r=P()(t);if(k.a){var n=k()(t);e&&(n=w()(n).call(n,(function(e){return b()(t,e).enumerable}))),r.push.apply(r,n)}return r}function Zn(){return(Zn=M()(C.a.mark((function t(e){var r,n,i=arguments;return C.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=i.length>1&&void 0!==i[1]&&i[1],n=document.createElement("img"),r&&(n.crossOrigin="Anonymous"),t.abrupt("return",new q.a((function(t,r){n.onload=function(){t(n)},n.onerror=function(){r()},n.src=e})));case 4:case"end":return t.stop()}}),t)})))).apply(this,arguments)}var Jn=function(){function t(e){var r,n,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=i.rootEmSize,a=void 0===o?12:o,u=i.emSize,s=void 0===u?12:u,c=i.createCanvas,f=void 0===c?t.createCanvas:c,l=i.createImage,h=void 0===l?t.createImage:l,p=i.anonymousCrossOrigin;V()(this,t),this.canvg=e,this.definitions={},this.styles={},this.stylesSpecificity={},this.images=[],this.fonts=[],this.emSizeStack=[],this.uniqueId=0,this.screen=e.screen,this.rootEmSize=a,this.emSize=s,this.createCanvas=f,this.createImage=this.bindCreateImage(h,p),this.screen.wait(W()(r=this.isImagesLoaded).call(r,this)),this.screen.wait(W()(n=this.isFontsLoaded).call(n,this))}return I()(t,[{key:"bindCreateImage",value:function(t,e){return"boolean"==typeof e?function(r,n){return t(r,"boolean"==typeof n?n:e)}:t}},{key:"popEmSize",value:function(){this.emSizeStack.pop()}},{key:"getUniqueId",value:function(){return"canvg".concat(++this.uniqueId)}},{key:"isImagesLoaded",value:function(){var t;return X()(t=this.images).call(t,(function(t){return t.loaded}))}},{key:"isFontsLoaded",value:function(){var t;return X()(t=this.fonts).call(t,(function(t){return t.loaded}))}},{key:"createDocumentElement",value:function(t){var e=this.createElement(t.documentElement);return e.root=!0,e.addStylesFromStyleDefinition(),this.documentElement=e,e}},{key:"createElement",value:function(e){var r=e.nodeName.replace(/^[^:]+:/,""),n=t.elementTypes[r];return void 0!==n?new n(this,e):new We(this,e)}},{key:"createTextNode",value:function(t){return new ur(this,t)}},{key:"setViewBox",value:function(t){this.screen.setViewBox(function(t){for(var e=1;e<arguments.length;e++){var r,n=null!=arguments[e]?arguments[e]:{};if(e%2)x()(r=$n(Object(n),!0)).call(r,(function(e){N()(t,e,n[e])}));else if(d.a)v()(t,d()(n));else{var i;x()(i=$n(Object(n))).call(i,(function(e){h()(t,e,b()(n,e))}))}}return t}({document:this},t))}},{key:"window",get:function(){return this.screen.window}},{key:"fetch",get:function(){return this.screen.fetch}},{key:"ctx",get:function(){return this.screen.ctx}},{key:"emSize",get:function(){var t=this.emSizeStack;return t[t.length-1]},set:function(t){this.emSizeStack.push(t)}}]),t}();function Kn(t,e){var r=P()(t);if(k.a){var n=k()(t);e&&(n=w()(n).call(n,(function(e){return b()(t,e).enumerable}))),r.push.apply(r,n)}return r}function ti(t){for(var e=1;e<arguments.length;e++){var r,n=null!=arguments[e]?arguments[e]:{};if(e%2)x()(r=Kn(Object(n),!0)).call(r,(function(e){N()(t,e,n[e])}));else if(d.a)v()(t,d()(n));else{var i;x()(i=Kn(Object(n))).call(i,(function(e){h()(t,e,b()(n,e))}))}}return t}Jn.createCanvas=function(t,e){var r=document.createElement("canvas");return r.width=t,r.height=e,r},Jn.createImage=function(t){return Zn.apply(this,arguments)},Jn.elementTypes=Gn;var ei=function(){function t(e,r){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};V()(this,t),this.parser=new Ve(n),this.screen=new _e(e,n),this.options=n;var i=new Jn(this,n),o=i.createDocumentElement(r);this.document=i,this.documentElement=o}var e,r;return I()(t,[{key:"fork",value:function(e,r){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return t.from(e,r,ti(ti({},this.options),n))}},{key:"forkString",value:function(e,r){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return t.fromString(e,r,ti(ti({},this.options),n))}},{key:"ready",value:function(){return this.screen.ready()}},{key:"isReady",value:function(){return this.screen.isReady()}},{key:"render",value:(r=M()(C.a.mark((function t(){var e,r=arguments;return C.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return e=r.length>0&&void 0!==r[0]?r[0]:{},this.start(ti({enableRedraw:!0,ignoreAnimation:!0,ignoreMouse:!0},e)),t.next=4,this.ready();case 4:this.stop();case 5:case"end":return t.stop()}}),t,this)}))),function(){return r.apply(this,arguments)})},{key:"start",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=this.documentElement,r=this.screen,n=this.options;r.start(e,ti(ti({enableRedraw:!0},n),t))}},{key:"stop",value:function(){this.screen.stop()}},{key:"resize",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t,r=arguments.length>2&&void 0!==arguments[2]&&arguments[2];this.documentElement.resize(t,e,r)}}],[{key:"from",value:(e=M()(C.a.mark((function e(r,n){var i,o,a,u=arguments;return C.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return i=u.length>2&&void 0!==u[2]?u[2]:{},o=new Ve(i),e.next=4,o.parse(n);case 4:return a=e.sent,e.abrupt("return",new t(r,a,i));case 6:case"end":return e.stop()}}),e)}))),function(t,r){return e.apply(this,arguments)})},{key:"fromString",value:function(e,r){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},i=new Ve(n),o=i.parseFromString(r);return new t(e,o,n)}}]),t}();var ri=Object.freeze({__proto__:null,offscreen:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.DOMParser,r={window:null,ignoreAnimation:!0,ignoreMouse:!0,DOMParser:e,createCanvas:function(t,e){return new OffscreenCanvas(t,e)},createImage:function(t){return M()(C.a.mark((function e(){var r,n,i;return C.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,fetch(t);case 2:return r=e.sent,e.next=5,r.blob();case 5:return n=e.sent,e.next=8,createImageBitmap(n);case 8:return i=e.sent,e.abrupt("return",i);case 10:case"end":return e.stop()}}),e)})))()}};return"undefined"==typeof DOMParser&&void 0!==e||Ot()(r,"DOMParser"),r},node:function(t){var e=t.DOMParser,r=t.canvas;return{window:null,ignoreAnimation:!0,ignoreMouse:!0,DOMParser:e,fetch:t.fetch,createCanvas:r.createCanvas,createImage:r.loadImage}}});e.default=ei}.call(this,r(174))},,,,,,,,,,,,,,,function(t,e,r){"use strict";var n=r(1125),i=r(1141).f,o=r(1194),a=r(1123),u=r(1150),s=r(1134),c=r(1132),f=function(t){var e=function(e,r,n){if(this instanceof t){switch(arguments.length){case 0:return new t;case 1:return new t(e);case 2:return new t(e,r)}return new t(e,r,n)}return t.apply(this,arguments)};return e.prototype=t.prototype,e};t.exports=function(t,e){var r,l,h,p,v,y,d,g,x=t.target,m=t.global,b=t.stat,S=t.proto,w=m?n:b?n[x]:(n[x]||{}).prototype,A=m?a:a[x]||(a[x]={}),k=A.prototype;for(h in e)r=!o(m?h:x+(b?".":"#")+h,t.forced)&&w&&c(w,h),v=A[h],r&&(y=t.noTargetGet?(g=i(w,h))&&g.value:w[h]),p=r&&y?y:e[h],r&&typeof v==typeof p||(d=t.bind&&r?u(p,n):t.wrap&&r?f(p):S&&"function"==typeof p?u(Function.call,p):p,(t.sham||p&&p.sham||v&&v.sham)&&s(d,"sham",!0),A[h]=d,S&&(c(a,l=x+"Prototype")||s(a,l,{}),a[l][h]=p,t.real&&k&&!k[h]&&s(k,h,p)))}},function(t,e){t.exports={}},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e,r){(function(e){var r=function(t){return t&&t.Math==Math&&t};t.exports=r("object"==typeof globalThis&&globalThis)||r("object"==typeof window&&window)||r("object"==typeof self&&self)||r("object"==typeof e&&e)||Function("return this")()}).call(this,r(130))},function(t,e,r){var n=r(1125),i=r(1173),o=r(1132),a=r(1163),u=r(1174),s=r(1197),c=i("wks"),f=n.Symbol,l=s?f:f&&f.withoutSetter||a;t.exports=function(t){return o(c,t)||(u&&o(f,t)?c[t]=f[t]:c[t]=l("Symbol."+t)),c[t]}},function(t,e,r){var n=r(1123),i=r(1132),o=r(1184),a=r(1133).f;t.exports=function(t){var e=n.Symbol||(n.Symbol={});i(e,t)||a(e,t,{value:o.f(t)})}},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e,r){var n=r(1123);t.exports=function(t){return n[t+"Prototype"]}},function(t,e,r){var n=r(1124);t.exports=!n((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(t,e,r){var n=r(1128);t.exports=function(t){if(!n(t))throw TypeError(String(t)+" is not an object");return t}},function(t,e){var r={}.hasOwnProperty;t.exports=function(t,e){return r.call(t,e)}},function(t,e,r){var n=r(1130),i=r(1193),o=r(1131),a=r(1162),u=Object.defineProperty;e.f=n?u:function(t,e,r){if(o(t),e=a(e,!0),o(r),i)try{return u(t,e,r)}catch(t){}if("get"in r||"set"in r)throw TypeError("Accessors not supported");return"value"in r&&(t[e]=r.value),t}},function(t,e,r){var n=r(1130),i=r(1133),o=r(1148);t.exports=n?function(t,e,r){return i.f(t,e,o(1,r))}:function(t,e,r){return t[e]=r,t}},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(String(t)+" is not a function");return t}},function(t,e,r){var n=r(1123),i=r(1125),o=function(t){return"function"==typeof t?t:void 0};t.exports=function(t,e){return arguments.length<2?o(n[t])||o(i[t]):n[t]&&n[t][e]||i[t]&&i[t][e]}},function(t,e,r){var n=r(1170),i=r(1149);t.exports=function(t){return n(i(t))}},function(t,e,r){var n=r(1172),i=Math.min;t.exports=function(t){return t>0?i(n(t),9007199254740991):0}},function(t,e,r){var n=r(1149);t.exports=function(t){return Object(n(t))}},function(t,e,r){var n=r(1130),i=r(1124),o=r(1132),a=Object.defineProperty,u={},s=function(t){throw t};t.exports=function(t,e){if(o(u,t))return u[t];e||(e={});var r=[][t],c=!!o(e,"ACCESSORS")&&e.ACCESSORS,f=o(e,0)?e[0]:s,l=o(e,1)?e[1]:void 0;return u[t]=!!r&&!i((function(){if(c&&!n)return!0;var t={length:-1};c?a(t,1,{enumerable:!0,get:s}):t[1]=1,r.call(t,f,l)}))}},function(t,e,r){var n=r(1130),i=r(1192),o=r(1148),a=r(1137),u=r(1162),s=r(1132),c=r(1193),f=Object.getOwnPropertyDescriptor;e.f=n?f:function(t,e){if(t=a(t),e=u(e,!0),c)try{return f(t,e)}catch(t){}if(s(t,e))return o(!i.f.call(t,e),t[e])}},function(t,e){var r={}.toString;t.exports=function(t){return r.call(t).slice(8,-1)}},function(t,e){t.exports=!0},function(t,e,r){var n=r(1150),i=r(1170),o=r(1139),a=r(1138),u=r(1199),s=[].push,c=function(t){var e=1==t,r=2==t,c=3==t,f=4==t,l=6==t,h=5==t||l;return function(p,v,y,d){for(var g,x,m=o(p),b=i(m),S=n(v,y,3),w=a(b.length),A=0,k=d||u,T=e?k(p,w):r?k(p,0):void 0;w>A;A++)if((h||A in b)&&(x=S(g=b[A],A,m),t))if(e)T[A]=x;else if(x)switch(t){case 3:return!0;case 5:return g;case 6:return A;case 2:s.call(T,g)}else if(f)return!1;return l?-1:c||f?f:T}};t.exports={forEach:c(0),map:c(1),filter:c(2),some:c(3),every:c(4),find:c(5),findIndex:c(6)}},function(t,e,r){var n=r(1185),i=r(1133).f,o=r(1134),a=r(1132),u=r(1263),s=r(1126)("toStringTag");t.exports=function(t,e,r,c){if(t){var f=r?t:t.prototype;a(f,s)||i(f,s,{configurable:!0,value:e}),c&&!n&&o(f,"toString",u)}}},function(t,e,r){var n,i,o,a=r(1264),u=r(1125),s=r(1128),c=r(1134),f=r(1132),l=r(1167),h=r(1157),p=u.WeakMap;if(a){var v=new p,y=v.get,d=v.has,g=v.set;n=function(t,e){return g.call(v,t,e),e},i=function(t){return y.call(v,t)||{}},o=function(t){return d.call(v,t)}}else{var x=l("state");h[x]=!0,n=function(t,e){return c(t,x,e),e},i=function(t){return f(t,x)?t[x]:{}},o=function(t){return f(t,x)}}t.exports={set:n,get:i,has:o,enforce:function(t){return o(t)?i(t):n(t,{})},getterFor:function(t){return function(e){var r;if(!s(e)||(r=i(e)).type!==t)throw TypeError("Incompatible receiver, "+t+" required");return r}}}},function(t,e,r){r(1212);var n=r(1288),i=r(1125),o=r(1159),a=r(1134),u=r(1153),s=r(1126)("toStringTag");for(var c in n){var f=i[c],l=f&&f.prototype;l&&o(l)!==s&&a(l,s,c),u[c]=u.Array}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e){t.exports=function(t){if(null==t)throw TypeError("Can't call method on "+t);return t}},function(t,e,r){var n=r(1135);t.exports=function(t,e,r){if(n(t),void 0===e)return t;switch(r){case 0:return function(){return t.call(e)};case 1:return function(r){return t.call(e,r)};case 2:return function(r,n){return t.call(e,r,n)};case 3:return function(r,n,i){return t.call(e,r,n,i)}}return function(){return t.apply(e,arguments)}}},function(t,e,r){var n=r(1142);t.exports=Array.isArray||function(t){return"Array"==n(t)}},function(t,e,r){var n,i=r(1131),o=r(1206),a=r(1182),u=r(1157),s=r(1208),c=r(1171),f=r(1167),l=f("IE_PROTO"),h=function(){},p=function(t){return"<script>"+t+"<\/script>"},v=function(){try{n=document.domain&&new ActiveXObject("htmlfile")}catch(t){}var t,e;v=n?function(t){t.write(p("")),t.close();var e=t.parentWindow.Object;return t=null,e}(n):((e=c("iframe")).style.display="none",s.appendChild(e),e.src=String("javascript:"),(t=e.contentWindow.document).open(),t.write(p("document.F=Object")),t.close(),t.F);for(var r=a.length;r--;)delete v.prototype[a[r]];return v()};u[l]=!0,t.exports=Object.create||function(t,e){var r;return null!==t?(h.prototype=i(t),r=new h,h.prototype=null,r[l]=t):r=v(),void 0===e?r:o(r,e)}},function(t,e){t.exports={}},function(t,e,r){var n=r(1132),i=r(1139),o=r(1167),a=r(1189),u=o("IE_PROTO"),s=Object.prototype;t.exports=a?Object.getPrototypeOf:function(t){return t=i(t),n(t,u)?t[u]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?s:null}},function(t,e,r){"use strict";var n=r(1289).charAt,i=r(1146),o=r(1188),a=i.set,u=i.getterFor("String Iterator");o(String,"String",(function(t){a(this,{type:"String Iterator",string:String(t),index:0})}),(function(){var t,e=u(this),r=e.string,i=e.index;return i>=r.length?{value:void 0,done:!0}:(t=n(r,i),e.index+=t.length,{value:t,done:!1})}))},function(t,e,r){var n=r(1131),i=r(1219),o=r(1138),a=r(1150),u=r(1168),s=r(1218),c=function(t,e){this.stopped=t,this.result=e};(t.exports=function(t,e,r,f,l){var h,p,v,y,d,g,x,m=a(e,r,f?2:1);if(l)h=t;else{if("function"!=typeof(p=u(t)))throw TypeError("Target is not iterable");if(i(p)){for(v=0,y=o(t.length);y>v;v++)if((d=f?m(n(x=t[v])[0],x[1]):m(t[v]))&&d instanceof c)return d;return new c(!1)}h=p.call(t)}for(g=h.next;!(x=g.call(h)).done;)if("object"==typeof(d=s(h,m,x.value,f))&&d&&d instanceof c)return d;return new c(!1)}).stop=function(t){return new c(!0,t)}},function(t,e){t.exports={}},function(t,e,r){var n=r(1134);t.exports=function(t,e,r,i){i&&i.enumerable?t[e]=r:n(t,e,r)}},function(t,e,r){var n=r(1185),i=r(1142),o=r(1126)("toStringTag"),a="Arguments"==i(function(){return arguments}());t.exports=n?i:function(t){var e,r,n;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(r=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),o))?r:a?i(e):"Object"==(n=i(e))&&"function"==typeof e.callee?"Arguments":n}},function(t,e,r){"use strict";var n=r(1124);t.exports=function(t,e){var r=[][t];return!!r&&n((function(){r.call(null,e||function(){throw 1},1)}))}},function(t,e,r){"use strict";var n=r(1135),i=function(t){var e,r;this.promise=new t((function(t,n){if(void 0!==e||void 0!==r)throw TypeError("Bad Promise constructor");e=t,r=n})),this.resolve=n(e),this.reject=n(r)};t.exports.f=function(t){return new i(t)}},function(t,e,r){var n=r(1128);t.exports=function(t,e){if(!n(t))return t;var r,i;if(e&&"function"==typeof(r=t.toString)&&!n(i=r.call(t)))return i;if("function"==typeof(r=t.valueOf)&&!n(i=r.call(t)))return i;if(!e&&"function"==typeof(r=t.toString)&&!n(i=r.call(t)))return i;throw TypeError("Can't convert object to primitive value")}},function(t,e){var r=0,n=Math.random();t.exports=function(t){return"Symbol("+String(void 0===t?"":t)+")_"+(++r+n).toString(36)}},function(t,e){t.exports="\t\n\v\f\r                　\u2028\u2029\ufeff"},function(t,e,r){var n=r(1124),i=r(1126),o=r(1176),a=i("species");t.exports=function(t){return o>=51||!n((function(){var e=[];return(e.constructor={})[a]=function(){return{foo:1}},1!==e[t](Boolean).foo}))}},function(t,e,r){"use strict";var n=r(1162),i=r(1133),o=r(1148);t.exports=function(t,e,r){var a=n(e);a in t?i.f(t,a,o(0,r)):t[a]=r}},function(t,e,r){var n=r(1173),i=r(1163),o=n("keys");t.exports=function(t){return o[t]||(o[t]=i(t))}},function(t,e,r){var n=r(1159),i=r(1153),o=r(1126)("iterator");t.exports=function(t){if(null!=t)return t[o]||t["@@iterator"]||i[n(t)]}},function(t,e){t.exports=function(t){try{return{error:!1,value:t()}}catch(t){return{error:!0,value:t}}}},function(t,e,r){var n=r(1124),i=r(1142),o="".split;t.exports=n((function(){return!Object("z").propertyIsEnumerable(0)}))?function(t){return"String"==i(t)?o.call(t,""):Object(t)}:Object},function(t,e,r){var n=r(1125),i=r(1128),o=n.document,a=i(o)&&i(o.createElement);t.exports=function(t){return a?o.createElement(t):{}}},function(t,e){var r=Math.ceil,n=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?n:r)(t)}},function(t,e,r){var n=r(1143),i=r(1196);(t.exports=function(t,e){return i[t]||(i[t]=void 0!==e?e:{})})("versions",[]).push({version:"3.6.4",mode:n?"pure":"global",copyright:"© 2020 Denis Pushkarev (zloirock.ru)"})},function(t,e,r){var n=r(1124);t.exports=!!Object.getOwnPropertySymbols&&!n((function(){return!String(Symbol())}))},function(t,e,r){var n=r(1149),i="["+r(1164)+"]",o=RegExp("^"+i+i+"*"),a=RegExp(i+i+"*$"),u=function(t){return function(e){var r=String(n(e));return 1&t&&(r=r.replace(o,"")),2&t&&(r=r.replace(a,"")),r}};t.exports={start:u(1),end:u(2),trim:u(3)}},function(t,e,r){var n,i,o=r(1125),a=r(1200),u=o.process,s=u&&u.versions,c=s&&s.v8;c?i=(n=c.split("."))[0]+n[1]:a&&(!(n=a.match(/Edge\/(\d+)/))||n[1]>=74)&&(n=a.match(/Chrome\/(\d+)/))&&(i=n[1]),t.exports=i&&+i},function(t,e,r){t.exports=r(1261)},function(t,e){},function(t,e,r){var n=r(1207),i=r(1182);t.exports=Object.keys||function(t){return n(t,i)}},function(t,e,r){var n=r(1137),i=r(1138),o=r(1181),a=function(t){return function(e,r,a){var u,s=n(e),c=i(s.length),f=o(a,c);if(t&&r!=r){for(;c>f;)if((u=s[f++])!=u)return!0}else for(;c>f;f++)if((t||f in s)&&s[f]===r)return t||f||0;return!t&&-1}};t.exports={includes:a(!0),indexOf:a(!1)}},function(t,e,r){var n=r(1172),i=Math.max,o=Math.min;t.exports=function(t,e){var r=n(t);return r<0?i(r+e,0):o(r,e)}},function(t,e){t.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(t,e,r){var n=r(1207),i=r(1182).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return n(t,i)}},function(t,e,r){var n=r(1126);e.f=n},function(t,e,r){var n={};n[r(1126)("toStringTag")]="z",t.exports="[object z]"===String(n)},function(t,e,r){t.exports=r(1285)},function(t,e){t.exports=function(){}},function(t,e,r){"use strict";var n=r(1122),i=r(1286),o=r(1154),a=r(1190),u=r(1145),s=r(1134),c=r(1158),f=r(1126),l=r(1143),h=r(1153),p=r(1213),v=p.IteratorPrototype,y=p.BUGGY_SAFARI_ITERATORS,d=f("iterator"),g=function(){return this};t.exports=function(t,e,r,f,p,x,m){i(r,e,f);var b,S,w,A=function(t){if(t===p&&C)return C;if(!y&&t in P)return P[t];switch(t){case"keys":case"values":case"entries":return function(){return new r(this,t)}}return function(){return new r(this)}},k=e+" Iterator",T=!1,P=t.prototype,O=P[d]||P["@@iterator"]||p&&P[p],C=!y&&O||A(p),E="Array"==e&&P.entries||O;if(E&&(b=o(E.call(new t)),v!==Object.prototype&&b.next&&(l||o(b)===v||(a?a(b,v):"function"!=typeof b[d]&&s(b,d,g)),u(b,k,!0,!0),l&&(h[k]=g))),"values"==p&&O&&"values"!==O.name&&(T=!0,C=function(){return O.call(this)}),l&&!m||P[d]===C||s(P,d,C),h[e]=C,p)if(S={values:A("values"),keys:x?C:A("keys"),entries:A("entries")},m)for(w in S)(y||T||!(w in P))&&c(P,w,S[w]);else n({target:e,proto:!0,forced:y||T},S);return S}},function(t,e,r){var n=r(1124);t.exports=!n((function(){function t(){}return t.prototype.constructor=null,Object.getPrototypeOf(new t)!==t.prototype}))},function(t,e,r){var n=r(1131),i=r(1287);t.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var t,e=!1,r={};try{(t=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set).call(r,[]),e=r instanceof Array}catch(t){}return function(r,o){return n(r),i(o),e?t.call(r,o):r.__proto__=o,r}}():void 0)},function(t,e){t.exports=function(t,e,r){if(!(t instanceof e))throw TypeError("Incorrect "+(r?r+" ":"")+"invocation");return t}},function(t,e,r){"use strict";var n={}.propertyIsEnumerable,i=Object.getOwnPropertyDescriptor,o=i&&!n.call({1:2},1);e.f=o?function(t){var e=i(this,t);return!!e&&e.enumerable}:n},function(t,e,r){var n=r(1130),i=r(1124),o=r(1171);t.exports=!n&&!i((function(){return 7!=Object.defineProperty(o("div"),"a",{get:function(){return 7}}).a}))},function(t,e,r){var n=r(1124),i=/#|\.prototype\./,o=function(t,e){var r=u[a(t)];return r==c||r!=s&&("function"==typeof e?n(e):!!e)},a=o.normalize=function(t){return String(t).replace(i,".").toLowerCase()},u=o.data={},s=o.NATIVE="N",c=o.POLYFILL="P";t.exports=o},function(t,e,r){var n=r(1244);t.exports=function(t){if(n(t))throw TypeError("The method doesn't accept regular expressions");return t}},function(t,e,r){var n=r(1125),i=r(1245),o=n["__core-js_shared__"]||i("__core-js_shared__",{});t.exports=o},function(t,e,r){var n=r(1174);t.exports=n&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(t,e,r){var n=r(1126)("match");t.exports=function(t){var e=/./;try{"/./"[t](e)}catch(r){try{return e[n]=!1,"/./"[t](e)}catch(t){}}return!1}},function(t,e,r){var n=r(1128),i=r(1151),o=r(1126)("species");t.exports=function(t,e){var r;return i(t)&&("function"!=typeof(r=t.constructor)||r!==Array&&!i(r.prototype)?n(r)&&null===(r=r[o])&&(r=void 0):r=void 0),new(void 0===r?Array:r)(0===e?0:e)}},function(t,e,r){var n=r(1136);t.exports=n("navigator","userAgent")||""},function(t,e,r){t.exports=r(1258)},function(t,e,r){r(1259);var n=r(1123);t.exports=n.Array.isArray},function(t,e,r){r(1204),r(1178),r(1205),r(1265),r(1266),r(1267),r(1268),r(1211),r(1269),r(1270),r(1271),r(1272),r(1273),r(1274),r(1275),r(1276),r(1277),r(1278),r(1279);var n=r(1123);t.exports=n.Symbol},function(t,e,r){"use strict";var n=r(1122),i=r(1124),o=r(1151),a=r(1128),u=r(1139),s=r(1138),c=r(1166),f=r(1199),l=r(1165),h=r(1126),p=r(1176),v=h("isConcatSpreadable"),y=p>=51||!i((function(){var t=[];return t[v]=!1,t.concat()[0]!==t})),d=l("concat"),g=function(t){if(!a(t))return!1;var e=t[v];return void 0!==e?!!e:o(t)};n({target:"Array",proto:!0,forced:!y||!d},{concat:function(t){var e,r,n,i,o,a=u(this),l=f(a,0),h=0;for(e=-1,n=arguments.length;e<n;e++)if(g(o=-1===e?a:arguments[e])){if(h+(i=s(o.length))>9007199254740991)throw TypeError("Maximum allowed index exceeded");for(r=0;r<i;r++,h++)r in o&&c(l,h,o[r])}else{if(h>=9007199254740991)throw TypeError("Maximum allowed index exceeded");c(l,h++,o)}return l.length=h,l}})},function(t,e,r){"use strict";var n=r(1122),i=r(1125),o=r(1136),a=r(1143),u=r(1130),s=r(1174),c=r(1197),f=r(1124),l=r(1132),h=r(1151),p=r(1128),v=r(1131),y=r(1139),d=r(1137),g=r(1162),x=r(1148),m=r(1152),b=r(1179),S=r(1183),w=r(1262),A=r(1209),k=r(1141),T=r(1133),P=r(1192),O=r(1134),C=r(1158),E=r(1173),M=r(1167),_=r(1157),N=r(1163),R=r(1126),V=r(1184),D=r(1127),I=r(1145),L=r(1146),j=r(1144).forEach,z=M("hidden"),F=R("toPrimitive"),B=L.set,H=L.getterFor("Symbol"),U=Object.prototype,X=i.Symbol,Y=o("JSON","stringify"),q=k.f,Q=T.f,W=w.f,G=P.f,$=E("symbols"),Z=E("op-symbols"),J=E("string-to-symbol-registry"),K=E("symbol-to-string-registry"),tt=E("wks"),et=i.QObject,rt=!et||!et.prototype||!et.prototype.findChild,nt=u&&f((function(){return 7!=m(Q({},"a",{get:function(){return Q(this,"a",{value:7}).a}})).a}))?function(t,e,r){var n=q(U,e);n&&delete U[e],Q(t,e,r),n&&t!==U&&Q(U,e,n)}:Q,it=function(t,e){var r=$[t]=m(X.prototype);return B(r,{type:"Symbol",tag:t,description:e}),u||(r.description=e),r},ot=c?function(t){return"symbol"==typeof t}:function(t){return Object(t)instanceof X},at=function(t,e,r){t===U&&at(Z,e,r),v(t);var n=g(e,!0);return v(r),l($,n)?(r.enumerable?(l(t,z)&&t[z][n]&&(t[z][n]=!1),r=m(r,{enumerable:x(0,!1)})):(l(t,z)||Q(t,z,x(1,{})),t[z][n]=!0),nt(t,n,r)):Q(t,n,r)},ut=function(t,e){v(t);var r=d(e),n=b(r).concat(lt(r));return j(n,(function(e){u&&!st.call(r,e)||at(t,e,r[e])})),t},st=function(t){var e=g(t,!0),r=G.call(this,e);return!(this===U&&l($,e)&&!l(Z,e))&&(!(r||!l(this,e)||!l($,e)||l(this,z)&&this[z][e])||r)},ct=function(t,e){var r=d(t),n=g(e,!0);if(r!==U||!l($,n)||l(Z,n)){var i=q(r,n);return!i||!l($,n)||l(r,z)&&r[z][n]||(i.enumerable=!0),i}},ft=function(t){var e=W(d(t)),r=[];return j(e,(function(t){l($,t)||l(_,t)||r.push(t)})),r},lt=function(t){var e=t===U,r=W(e?Z:d(t)),n=[];return j(r,(function(t){!l($,t)||e&&!l(U,t)||n.push($[t])})),n};(s||(C((X=function(){if(this instanceof X)throw TypeError("Symbol is not a constructor");var t=arguments.length&&void 0!==arguments[0]?String(arguments[0]):void 0,e=N(t),r=function(t){this===U&&r.call(Z,t),l(this,z)&&l(this[z],e)&&(this[z][e]=!1),nt(this,e,x(1,t))};return u&&rt&&nt(U,e,{configurable:!0,set:r}),it(e,t)}).prototype,"toString",(function(){return H(this).tag})),C(X,"withoutSetter",(function(t){return it(N(t),t)})),P.f=st,T.f=at,k.f=ct,S.f=w.f=ft,A.f=lt,V.f=function(t){return it(R(t),t)},u&&(Q(X.prototype,"description",{configurable:!0,get:function(){return H(this).description}}),a||C(U,"propertyIsEnumerable",st,{unsafe:!0}))),n({global:!0,wrap:!0,forced:!s,sham:!s},{Symbol:X}),j(b(tt),(function(t){D(t)})),n({target:"Symbol",stat:!0,forced:!s},{for:function(t){var e=String(t);if(l(J,e))return J[e];var r=X(e);return J[e]=r,K[r]=e,r},keyFor:function(t){if(!ot(t))throw TypeError(t+" is not a symbol");if(l(K,t))return K[t]},useSetter:function(){rt=!0},useSimple:function(){rt=!1}}),n({target:"Object",stat:!0,forced:!s,sham:!u},{create:function(t,e){return void 0===e?m(t):ut(m(t),e)},defineProperty:at,defineProperties:ut,getOwnPropertyDescriptor:ct}),n({target:"Object",stat:!0,forced:!s},{getOwnPropertyNames:ft,getOwnPropertySymbols:lt}),n({target:"Object",stat:!0,forced:f((function(){A.f(1)}))},{getOwnPropertySymbols:function(t){return A.f(y(t))}}),Y)&&n({target:"JSON",stat:!0,forced:!s||f((function(){var t=X();return"[null]"!=Y([t])||"{}"!=Y({a:t})||"{}"!=Y(Object(t))}))},{stringify:function(t,e,r){for(var n,i=[t],o=1;arguments.length>o;)i.push(arguments[o++]);if(n=e,(p(e)||void 0!==t)&&!ot(t))return h(e)||(e=function(t,e){if("function"==typeof n&&(e=n.call(this,t,e)),!ot(e))return e}),i[1]=e,Y.apply(null,i)}});X.prototype[F]||O(X.prototype,F,X.prototype.valueOf),I(X,"Symbol"),_[z]=!0},function(t,e,r){var n=r(1130),i=r(1133),o=r(1131),a=r(1179);t.exports=n?Object.defineProperties:function(t,e){o(t);for(var r,n=a(e),u=n.length,s=0;u>s;)i.f(t,r=n[s++],e[r]);return t}},function(t,e,r){var n=r(1132),i=r(1137),o=r(1180).indexOf,a=r(1157);t.exports=function(t,e){var r,u=i(t),s=0,c=[];for(r in u)!n(a,r)&&n(u,r)&&c.push(r);for(;e.length>s;)n(u,r=e[s++])&&(~o(c,r)||c.push(r));return c}},function(t,e,r){var n=r(1136);t.exports=n("document","documentElement")},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e,r){var n=r(1196),i=Function.toString;"function"!=typeof n.inspectSource&&(n.inspectSource=function(t){return i.call(t)}),t.exports=n.inspectSource},function(t,e,r){r(1127)("iterator")},function(t,e,r){"use strict";var n=r(1137),i=r(1187),o=r(1153),a=r(1146),u=r(1188),s=a.set,c=a.getterFor("Array Iterator");t.exports=u(Array,"Array",(function(t,e){s(this,{type:"Array Iterator",target:n(t),index:0,kind:e})}),(function(){var t=c(this),e=t.target,r=t.kind,n=t.index++;return!e||n>=e.length?(t.target=void 0,{value:void 0,done:!0}):"keys"==r?{value:n,done:!1}:"values"==r?{value:e[n],done:!1}:{value:[n,e[n]],done:!1}}),"values"),o.Arguments=o.Array,i("keys"),i("values"),i("entries")},function(t,e,r){"use strict";var n,i,o,a=r(1154),u=r(1134),s=r(1132),c=r(1126),f=r(1143),l=c("iterator"),h=!1;[].keys&&("next"in(o=[].keys())?(i=a(a(o)))!==Object.prototype&&(n=i):h=!0),null==n&&(n={}),f||s(n,l)||u(n,l,(function(){return this})),t.exports={IteratorPrototype:n,BUGGY_SAFARI_ITERATORS:h}},function(t,e,r){var n=r(1290),i=r(1216),o=r(1221);t.exports=function(t,e){var r;if(t){if("string"==typeof t)return o(t,e);var a=n(r=Object.prototype.toString.call(t)).call(r,8,-1);return"Object"===a&&t.constructor&&(a=t.constructor.name),"Map"===a||"Set"===a?i(t):"Arguments"===a||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a)?o(t,e):void 0}},t.exports.default=t.exports,t.exports.__esModule=!0},function(t,e,r){var n=r(1292),i=Array.prototype;t.exports=function(t){var e=t.slice;return t===i||t instanceof Array&&e===i.slice?n:e}},function(t,e,r){t.exports=r(1294)},function(t,e,r){r(1155),r(1295);var n=r(1123);t.exports=n.Array.from},function(t,e,r){var n=r(1131);t.exports=function(t,e,r,i){try{return i?e(n(r)[0],r[1]):e(r)}catch(e){var o=t.return;throw void 0!==o&&n(o.call(t)),e}}},function(t,e,r){var n=r(1126),i=r(1153),o=n("iterator"),a=Array.prototype;t.exports=function(t){return void 0!==t&&(i.Array===t||a[o]===t)}},function(t,e,r){var n=r(1126)("iterator"),i=!1;try{var o=0,a={next:function(){return{done:!!o++}},return:function(){i=!0}};a[n]=function(){return this},Array.from(a,(function(){throw 2}))}catch(t){}t.exports=function(t,e){if(!e&&!i)return!1;var r=!1;try{var o={};o[n]=function(){return{next:function(){return{done:r=!0}}}},t(o)}catch(t){}return r}},function(t,e){t.exports=function(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n},t.exports.default=t.exports,t.exports.__esModule=!0},function(t,e,r){r(1300);var n=r(1123).Object,i=t.exports=function(t,e,r){return n.defineProperty(t,e,r)};n.defineProperty.sham&&(i.sham=!0)},function(t,e,r){r(1318);var n=r(1123).Object,i=t.exports=function(t,e){return n.getOwnPropertyDescriptor(t,e)};n.getOwnPropertyDescriptor.sham&&(i.sham=!0)},function(t,e,r){r(1178),r(1155),r(1147),r(1335),r(1232),r(1338);var n=r(1123);t.exports=n.Promise},function(t,e,r){var n=r(1125);t.exports=n.Promise},function(t,e,r){var n=r(1158);t.exports=function(t,e,r){for(var i in e)r&&r.unsafe&&t[i]?t[i]=e[i]:n(t,i,e[i],r);return t}},function(t,e,r){"use strict";var n=r(1136),i=r(1133),o=r(1126),a=r(1130),u=o("species");t.exports=function(t){var e=n(t),r=i.f;a&&e&&!e[u]&&r(e,u,{configurable:!0,get:function(){return this}})}},function(t,e,r){var n=r(1131),i=r(1135),o=r(1126)("species");t.exports=function(t,e){var r,a=n(t).constructor;return void 0===a||null==(r=n(a)[o])?e:i(r)}},function(t,e,r){var n,i,o,a=r(1125),u=r(1124),s=r(1142),c=r(1150),f=r(1208),l=r(1171),h=r(1230),p=a.location,v=a.setImmediate,y=a.clearImmediate,d=a.process,g=a.MessageChannel,x=a.Dispatch,m=0,b={},S=function(t){if(b.hasOwnProperty(t)){var e=b[t];delete b[t],e()}},w=function(t){return function(){S(t)}},A=function(t){S(t.data)},k=function(t){a.postMessage(t+"",p.protocol+"//"+p.host)};v&&y||(v=function(t){for(var e=[],r=1;arguments.length>r;)e.push(arguments[r++]);return b[++m]=function(){("function"==typeof t?t:Function(t)).apply(void 0,e)},n(m),m},y=function(t){delete b[t]},"process"==s(d)?n=function(t){d.nextTick(w(t))}:x&&x.now?n=function(t){x.now(w(t))}:g&&!h?(o=(i=new g).port2,i.port1.onmessage=A,n=c(o.postMessage,o,1)):!a.addEventListener||"function"!=typeof postMessage||a.importScripts||u(k)||"file:"===p.protocol?n="onreadystatechange"in l("script")?function(t){f.appendChild(l("script")).onreadystatechange=function(){f.removeChild(this),S(t)}}:function(t){setTimeout(w(t),0)}:(n=k,a.addEventListener("message",A,!1))),t.exports={set:v,clear:y}},function(t,e,r){var n=r(1200);t.exports=/(iphone|ipod|ipad).*applewebkit/i.test(n)},function(t,e,r){var n=r(1131),i=r(1128),o=r(1161);t.exports=function(t,e){if(n(t),i(e)&&e.constructor===t)return e;var r=o.f(t);return(0,r.resolve)(e),r.promise}},function(t,e,r){"use strict";var n=r(1122),i=r(1135),o=r(1161),a=r(1169),u=r(1156);n({target:"Promise",stat:!0},{allSettled:function(t){var e=this,r=o.f(e),n=r.resolve,s=r.reject,c=a((function(){var r=i(e.resolve),o=[],a=0,s=1;u(t,(function(t){var i=a++,u=!1;o.push(void 0),s++,r.call(e,t).then((function(t){u||(u=!0,o[i]={status:"fulfilled",value:t},--s||n(o))}),(function(t){u||(u=!0,o[i]={status:"rejected",reason:t},--s||n(o))}))})),--s||n(o)}));return c.error&&s(c.value),r.promise}})},function(t,e,r){t.exports=r(1344)},function(t,e,r){"use strict";var n=r(1135),i=r(1128),o=[].slice,a={},u=function(t,e,r){if(!(e in a)){for(var n=[],i=0;i<e;i++)n[i]="a["+i+"]";a[e]=Function("C,a","return new C("+n.join(",")+")")}return a[e](t,r)};t.exports=Function.bind||function(t){var e=n(this),r=o.call(arguments,1),a=function(){var n=r.concat(o.call(arguments));return this instanceof a?u(e,n.length,n):e.apply(t,n)};return i(e.prototype)&&(a.prototype=e.prototype),a}},function(t,e,r){t.exports=r(1392)},function(t,e){t.exports=function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t},t.exports.default=t.exports,t.exports.__esModule=!0},function(t,e,r){var n=r(1235),i=r(1400);function o(e){return t.exports=o=n?i:function(t){return t.__proto__||i(t)},t.exports.default=t.exports,t.exports.__esModule=!0,o(e)}t.exports=o,t.exports.default=t.exports,t.exports.__esModule=!0},function(t,e,r){var n=r(1157),i=r(1128),o=r(1132),a=r(1133).f,u=r(1163),s=r(1474),c=u("meta"),f=0,l=Object.isExtensible||function(){return!0},h=function(t){a(t,c,{value:{objectID:"O"+ ++f,weakData:{}}})},p=t.exports={REQUIRED:!1,fastKey:function(t,e){if(!i(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!o(t,c)){if(!l(t))return"F";if(!e)return"E";h(t)}return t[c].objectID},getWeakData:function(t,e){if(!o(t,c)){if(!l(t))return!0;if(!e)return!1;h(t)}return t[c].weakData},onFreeze:function(t){return s&&p.REQUIRED&&l(t)&&!o(t,c)&&h(t),t}};n[c]=!0},function(t,e,r){t.exports=r(1240)},function(t,e,r){var n=r(1241);t.exports=n},function(t,e,r){var n=r(1242),i=String.prototype;t.exports=function(t){var e=t.startsWith;return"string"==typeof t||t===i||t instanceof String&&e===i.startsWith?n:e}},function(t,e,r){r(1243);var n=r(1129);t.exports=n("String").startsWith},function(t,e,r){"use strict";var n,i=r(1122),o=r(1141).f,a=r(1138),u=r(1195),s=r(1149),c=r(1198),f=r(1143),l="".startsWith,h=Math.min,p=c("startsWith");i({target:"String",proto:!0,forced:!!(f||p||(n=o(String.prototype,"startsWith"),!n||n.writable))&&!p},{startsWith:function(t){var e=String(s(this));u(t);var r=a(h(arguments.length>1?arguments[1]:void 0,e.length)),n=String(t);return l?l.call(e,n,r):e.slice(r,r+n.length)===n}})},function(t,e,r){var n=r(1128),i=r(1142),o=r(1126)("match");t.exports=function(t){var e;return n(t)&&(void 0!==(e=t[o])?!!e:"RegExp"==i(t))}},function(t,e,r){var n=r(1125),i=r(1134);t.exports=function(t,e){try{i(n,t,e)}catch(r){n[t]=e}return e}},function(t,e,r){t.exports=r(1247)},function(t,e,r){var n=r(1248);t.exports=n},function(t,e,r){r(1249);var n=r(1123);t.exports=n.parseFloat},function(t,e,r){var n=r(1122),i=r(1250);n({global:!0,forced:parseFloat!=i},{parseFloat:i})},function(t,e,r){var n=r(1125),i=r(1175).trim,o=r(1164),a=n.parseFloat,u=1/a(o+"-0")!=-1/0;t.exports=u?function(t){var e=i(String(t)),r=a(e);return 0===r&&"-"==e.charAt(0)?-0:r}:a},function(t,e,r){t.exports=r(1252)},function(t,e,r){var n=r(1253);t.exports=n},function(t,e,r){var n=r(1254),i=Array.prototype;t.exports=function(t){var e=t.map;return t===i||t instanceof Array&&e===i.map?n:e}},function(t,e,r){r(1255);var n=r(1129);t.exports=n("Array").map},function(t,e,r){"use strict";var n=r(1122),i=r(1144).map,o=r(1165),a=r(1140),u=o("map"),s=a("map");n({target:"Array",proto:!0,forced:!u||!s},{map:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}})},function(t,e,r){var n=r(1257),i=r(1260),o=r(1214),a=r(1297);t.exports=function(t,e){return n(t)||i(t,e)||o(t,e)||a()},t.exports.default=t.exports,t.exports.__esModule=!0},function(t,e,r){var n=r(1201);t.exports=function(t){if(n(t))return t},t.exports.default=t.exports,t.exports.__esModule=!0},function(t,e,r){var n=r(1202);t.exports=n},function(t,e,r){r(1122)({target:"Array",stat:!0},{isArray:r(1151)})},function(t,e,r){var n=r(1177),i=r(1186);t.exports=function(t,e){var r=t&&(void 0!==n&&i(t)||t["@@iterator"]);if(null!=r){var o,a,u=[],s=!0,c=!1;try{for(r=r.call(t);!(s=(o=r.next()).done)&&(u.push(o.value),!e||u.length!==e);s=!0);}catch(t){c=!0,a=t}finally{try{s||null==r.return||r.return()}finally{if(c)throw a}}return u}},t.exports.default=t.exports,t.exports.__esModule=!0},function(t,e,r){var n=r(1203);r(1280),r(1281),r(1282),r(1283),r(1284),t.exports=n},function(t,e,r){var n=r(1137),i=r(1183).f,o={}.toString,a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return a&&"[object Window]"==o.call(t)?function(t){try{return i(t)}catch(t){return a.slice()}}(t):i(n(t))}},function(t,e,r){"use strict";var n=r(1185),i=r(1159);t.exports=n?{}.toString:function(){return"[object "+i(this)+"]"}},function(t,e,r){var n=r(1125),i=r(1210),o=n.WeakMap;t.exports="function"==typeof o&&/native code/.test(i(o))},function(t,e,r){r(1127)("asyncIterator")},function(t,e){},function(t,e,r){r(1127)("hasInstance")},function(t,e,r){r(1127)("isConcatSpreadable")},function(t,e,r){r(1127)("match")},function(t,e,r){r(1127)("matchAll")},function(t,e,r){r(1127)("replace")},function(t,e,r){r(1127)("search")},function(t,e,r){r(1127)("species")},function(t,e,r){r(1127)("split")},function(t,e,r){r(1127)("toPrimitive")},function(t,e,r){r(1127)("toStringTag")},function(t,e,r){r(1127)("unscopables")},function(t,e,r){r(1145)(Math,"Math",!0)},function(t,e,r){var n=r(1125);r(1145)(n.JSON,"JSON",!0)},function(t,e,r){r(1127)("asyncDispose")},function(t,e,r){r(1127)("dispose")},function(t,e,r){r(1127)("observable")},function(t,e,r){r(1127)("patternMatch")},function(t,e,r){r(1127)("replaceAll")},function(t,e,r){r(1147),r(1155);var n=r(1168);t.exports=n},function(t,e,r){"use strict";var n=r(1213).IteratorPrototype,i=r(1152),o=r(1148),a=r(1145),u=r(1153),s=function(){return this};t.exports=function(t,e,r){var c=e+" Iterator";return t.prototype=i(n,{next:o(1,r)}),a(t,c,!1,!0),u[c]=s,t}},function(t,e,r){var n=r(1128);t.exports=function(t){if(!n(t)&&null!==t)throw TypeError("Can't set "+String(t)+" as a prototype");return t}},function(t,e){t.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},function(t,e,r){var n=r(1172),i=r(1149),o=function(t){return function(e,r){var o,a,u=String(i(e)),s=n(r),c=u.length;return s<0||s>=c?t?"":void 0:(o=u.charCodeAt(s))<55296||o>56319||s+1===c||(a=u.charCodeAt(s+1))<56320||a>57343?t?u.charAt(s):o:t?u.slice(s,s+2):a-56320+(o-55296<<10)+65536}};t.exports={codeAt:o(!1),charAt:o(!0)}},function(t,e,r){t.exports=r(1291)},function(t,e,r){var n=r(1215);t.exports=n},function(t,e,r){r(1293);var n=r(1129);t.exports=n("Array").slice},function(t,e,r){"use strict";var n=r(1122),i=r(1128),o=r(1151),a=r(1181),u=r(1138),s=r(1137),c=r(1166),f=r(1126),l=r(1165),h=r(1140),p=l("slice"),v=h("slice",{ACCESSORS:!0,0:0,1:2}),y=f("species"),d=[].slice,g=Math.max;n({target:"Array",proto:!0,forced:!p||!v},{slice:function(t,e){var r,n,f,l=s(this),h=u(l.length),p=a(t,h),v=a(void 0===e?h:e,h);if(o(l)&&("function"!=typeof(r=l.constructor)||r!==Array&&!o(r.prototype)?i(r)&&null===(r=r[y])&&(r=void 0):r=void 0,r===Array||void 0===r))return d.call(l,p,v);for(n=new(void 0===r?Array:r)(g(v-p,0)),f=0;p<v;p++,f++)p in l&&c(n,f,l[p]);return n.length=f,n}})},function(t,e,r){var n=r(1217);t.exports=n},function(t,e,r){var n=r(1122),i=r(1296);n({target:"Array",stat:!0,forced:!r(1220)((function(t){Array.from(t)}))},{from:i})},function(t,e,r){"use strict";var n=r(1150),i=r(1139),o=r(1218),a=r(1219),u=r(1138),s=r(1166),c=r(1168);t.exports=function(t){var e,r,f,l,h,p,v=i(t),y="function"==typeof this?this:Array,d=arguments.length,g=d>1?arguments[1]:void 0,x=void 0!==g,m=c(v),b=0;if(x&&(g=n(g,d>2?arguments[2]:void 0,2)),null==m||y==Array&&a(m))for(r=new y(e=u(v.length));e>b;b++)p=x?g(v[b],b):v[b],s(r,b,p);else for(h=(l=m.call(v)).next,r=new y;!(f=h.call(l)).done;b++)p=x?o(l,g,[f.value,b],!0):f.value,s(r,b,p);return r.length=b,r}},function(t,e){t.exports=function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")},t.exports.default=t.exports,t.exports.__esModule=!0},function(t,e,r){t.exports=r(1299)},function(t,e,r){var n=r(1222);t.exports=n},function(t,e,r){var n=r(1122),i=r(1130);n({target:"Object",stat:!0,forced:!i,sham:!i},{defineProperty:r(1133).f})},function(t,e,r){t.exports=r(1302)},function(t,e,r){var n=r(1303);t.exports=n},function(t,e,r){r(1304);var n=r(1123).Object,i=t.exports=function(t,e){return n.defineProperties(t,e)};n.defineProperties.sham&&(i.sham=!0)},function(t,e,r){var n=r(1122),i=r(1130);n({target:"Object",stat:!0,forced:!i,sham:!i},{defineProperties:r(1206)})},function(t,e,r){t.exports=r(1306)},function(t,e,r){var n=r(1307);t.exports=n},function(t,e,r){r(1308);var n=r(1123);t.exports=n.Object.getOwnPropertyDescriptors},function(t,e,r){var n=r(1122),i=r(1130),o=r(1309),a=r(1137),u=r(1141),s=r(1166);n({target:"Object",stat:!0,sham:!i},{getOwnPropertyDescriptors:function(t){for(var e,r,n=a(t),i=u.f,c=o(n),f={},l=0;c.length>l;)void 0!==(r=i(n,e=c[l++]))&&s(f,e,r);return f}})},function(t,e,r){var n=r(1136),i=r(1183),o=r(1209),a=r(1131);t.exports=n("Reflect","ownKeys")||function(t){var e=i.f(a(t)),r=o.f;return r?e.concat(r(t)):e}},function(t,e,r){t.exports=r(1311)},function(t,e,r){r(1147);var n=r(1312),i=r(1159),o=Array.prototype,a={DOMTokenList:!0,NodeList:!0};t.exports=function(t){var e=t.forEach;return t===o||t instanceof Array&&e===o.forEach||a.hasOwnProperty(i(t))?n:e}},function(t,e,r){var n=r(1313);t.exports=n},function(t,e,r){r(1314);var n=r(1129);t.exports=n("Array").forEach},function(t,e,r){"use strict";var n=r(1122),i=r(1315);n({target:"Array",proto:!0,forced:[].forEach!=i},{forEach:i})},function(t,e,r){"use strict";var n=r(1144).forEach,i=r(1160),o=r(1140),a=i("forEach"),u=o("forEach");t.exports=a&&u?[].forEach:function(t){return n(this,t,arguments.length>1?arguments[1]:void 0)}},function(t,e,r){t.exports=r(1317)},function(t,e,r){var n=r(1223);t.exports=n},function(t,e,r){var n=r(1122),i=r(1124),o=r(1137),a=r(1141).f,u=r(1130),s=i((function(){a(1)}));n({target:"Object",stat:!0,forced:!u||s,sham:!u},{getOwnPropertyDescriptor:function(t,e){return a(o(t),e)}})},function(t,e,r){t.exports=r(1320)},function(t,e,r){var n=r(1321);t.exports=n},function(t,e,r){var n=r(1322),i=Array.prototype;t.exports=function(t){var e=t.filter;return t===i||t instanceof Array&&e===i.filter?n:e}},function(t,e,r){r(1323);var n=r(1129);t.exports=n("Array").filter},function(t,e,r){"use strict";var n=r(1122),i=r(1144).filter,o=r(1165),a=r(1140),u=o("filter"),s=a("filter");n({target:"Array",proto:!0,forced:!u||!s},{filter:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}})},function(t,e,r){t.exports=r(1325)},function(t,e,r){var n=r(1326);t.exports=n},function(t,e,r){r(1205);var n=r(1123);t.exports=n.Object.getOwnPropertySymbols},function(t,e,r){t.exports=r(1328)},function(t,e,r){var n=r(1329);t.exports=n},function(t,e,r){r(1330);var n=r(1123);t.exports=n.Object.keys},function(t,e,r){var n=r(1122),i=r(1139),o=r(1179);n({target:"Object",stat:!0,forced:r(1124)((function(){o(1)}))},{keys:function(t){return o(i(t))}})},function(t,e,r){t.exports=r(486)},function(t,e,r){var n=r(1333);function i(t,e,r,i,o,a,u){try{var s=t[a](u),c=s.value}catch(t){return void r(t)}s.done?e(c):n.resolve(c).then(i,o)}t.exports=function(t){return function(){var e=this,r=arguments;return new n((function(n,o){var a=t.apply(e,r);function u(t){i(a,n,o,u,s,"next",t)}function s(t){i(a,n,o,u,s,"throw",t)}u(void 0)}))}},t.exports.default=t.exports,t.exports.__esModule=!0},function(t,e,r){t.exports=r(1334)},function(t,e,r){var n=r(1224);r(1339),r(1340),r(1341),r(1342),t.exports=n},function(t,e,r){"use strict";var n,i,o,a,u=r(1122),s=r(1143),c=r(1125),f=r(1136),l=r(1225),h=r(1158),p=r(1226),v=r(1145),y=r(1227),d=r(1128),g=r(1135),x=r(1191),m=r(1142),b=r(1210),S=r(1156),w=r(1220),A=r(1228),k=r(1229).set,T=r(1336),P=r(1231),O=r(1337),C=r(1161),E=r(1169),M=r(1146),_=r(1194),N=r(1126),R=r(1176),V=N("species"),D="Promise",I=M.get,L=M.set,j=M.getterFor(D),z=l,F=c.TypeError,B=c.document,H=c.process,U=f("fetch"),X=C.f,Y=X,q="process"==m(H),Q=!!(B&&B.createEvent&&c.dispatchEvent),W=_(D,(function(){if(!(b(z)!==String(z))){if(66===R)return!0;if(!q&&"function"!=typeof PromiseRejectionEvent)return!0}if(s&&!z.prototype.finally)return!0;if(R>=51&&/native code/.test(z))return!1;var t=z.resolve(1),e=function(t){t((function(){}),(function(){}))};return(t.constructor={})[V]=e,!(t.then((function(){}))instanceof e)})),G=W||!w((function(t){z.all(t).catch((function(){}))})),$=function(t){var e;return!(!d(t)||"function"!=typeof(e=t.then))&&e},Z=function(t,e,r){if(!e.notified){e.notified=!0;var n=e.reactions;T((function(){for(var i=e.value,o=1==e.state,a=0;n.length>a;){var u,s,c,f=n[a++],l=o?f.ok:f.fail,h=f.resolve,p=f.reject,v=f.domain;try{l?(o||(2===e.rejection&&et(t,e),e.rejection=1),!0===l?u=i:(v&&v.enter(),u=l(i),v&&(v.exit(),c=!0)),u===f.promise?p(F("Promise-chain cycle")):(s=$(u))?s.call(u,h,p):h(u)):p(i)}catch(t){v&&!c&&v.exit(),p(t)}}e.reactions=[],e.notified=!1,r&&!e.rejection&&K(t,e)}))}},J=function(t,e,r){var n,i;Q?((n=B.createEvent("Event")).promise=e,n.reason=r,n.initEvent(t,!1,!0),c.dispatchEvent(n)):n={promise:e,reason:r},(i=c["on"+t])?i(n):"unhandledrejection"===t&&O("Unhandled promise rejection",r)},K=function(t,e){k.call(c,(function(){var r,n=e.value;if(tt(e)&&(r=E((function(){q?H.emit("unhandledRejection",n,t):J("unhandledrejection",t,n)})),e.rejection=q||tt(e)?2:1,r.error))throw r.value}))},tt=function(t){return 1!==t.rejection&&!t.parent},et=function(t,e){k.call(c,(function(){q?H.emit("rejectionHandled",t):J("rejectionhandled",t,e.value)}))},rt=function(t,e,r,n){return function(i){t(e,r,i,n)}},nt=function(t,e,r,n){e.done||(e.done=!0,n&&(e=n),e.value=r,e.state=2,Z(t,e,!0))},it=function(t,e,r,n){if(!e.done){e.done=!0,n&&(e=n);try{if(t===r)throw F("Promise can't be resolved itself");var i=$(r);i?T((function(){var n={done:!1};try{i.call(r,rt(it,t,n,e),rt(nt,t,n,e))}catch(r){nt(t,n,r,e)}})):(e.value=r,e.state=1,Z(t,e,!1))}catch(r){nt(t,{done:!1},r,e)}}};W&&(z=function(t){x(this,z,D),g(t),n.call(this);var e=I(this);try{t(rt(it,this,e),rt(nt,this,e))}catch(t){nt(this,e,t)}},(n=function(t){L(this,{type:D,done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:0,value:void 0})}).prototype=p(z.prototype,{then:function(t,e){var r=j(this),n=X(A(this,z));return n.ok="function"!=typeof t||t,n.fail="function"==typeof e&&e,n.domain=q?H.domain:void 0,r.parent=!0,r.reactions.push(n),0!=r.state&&Z(this,r,!1),n.promise},catch:function(t){return this.then(void 0,t)}}),i=function(){var t=new n,e=I(t);this.promise=t,this.resolve=rt(it,t,e),this.reject=rt(nt,t,e)},C.f=X=function(t){return t===z||t===o?new i(t):Y(t)},s||"function"!=typeof l||(a=l.prototype.then,h(l.prototype,"then",(function(t,e){var r=this;return new z((function(t,e){a.call(r,t,e)})).then(t,e)}),{unsafe:!0}),"function"==typeof U&&u({global:!0,enumerable:!0,forced:!0},{fetch:function(t){return P(z,U.apply(c,arguments))}}))),u({global:!0,wrap:!0,forced:W},{Promise:z}),v(z,D,!1,!0),y(D),o=f(D),u({target:D,stat:!0,forced:W},{reject:function(t){var e=X(this);return e.reject.call(void 0,t),e.promise}}),u({target:D,stat:!0,forced:s||W},{resolve:function(t){return P(s&&this===o?z:this,t)}}),u({target:D,stat:!0,forced:G},{all:function(t){var e=this,r=X(e),n=r.resolve,i=r.reject,o=E((function(){var r=g(e.resolve),o=[],a=0,u=1;S(t,(function(t){var s=a++,c=!1;o.push(void 0),u++,r.call(e,t).then((function(t){c||(c=!0,o[s]=t,--u||n(o))}),i)})),--u||n(o)}));return o.error&&i(o.value),r.promise},race:function(t){var e=this,r=X(e),n=r.reject,i=E((function(){var i=g(e.resolve);S(t,(function(t){i.call(e,t).then(r.resolve,n)}))}));return i.error&&n(i.value),r.promise}})},function(t,e,r){var n,i,o,a,u,s,c,f,l=r(1125),h=r(1141).f,p=r(1142),v=r(1229).set,y=r(1230),d=l.MutationObserver||l.WebKitMutationObserver,g=l.process,x=l.Promise,m="process"==p(g),b=h(l,"queueMicrotask"),S=b&&b.value;S||(n=function(){var t,e;for(m&&(t=g.domain)&&t.exit();i;){e=i.fn,i=i.next;try{e()}catch(t){throw i?a():o=void 0,t}}o=void 0,t&&t.enter()},m?a=function(){g.nextTick(n)}:d&&!y?(u=!0,s=document.createTextNode(""),new d(n).observe(s,{characterData:!0}),a=function(){s.data=u=!u}):x&&x.resolve?(c=x.resolve(void 0),f=c.then,a=function(){f.call(c,n)}):a=function(){v.call(l,n)}),t.exports=S||function(t){var e={fn:t,next:void 0};o&&(o.next=e),i||(i=e,a()),o=e}},function(t,e,r){var n=r(1125);t.exports=function(t,e){var r=n.console;r&&r.error&&(1===arguments.length?r.error(t):r.error(t,e))}},function(t,e,r){"use strict";var n=r(1122),i=r(1143),o=r(1225),a=r(1124),u=r(1136),s=r(1228),c=r(1231),f=r(1158);n({target:"Promise",proto:!0,real:!0,forced:!!o&&a((function(){o.prototype.finally.call({then:function(){}},(function(){}))}))},{finally:function(t){var e=s(this,u("Promise")),r="function"==typeof t;return this.then(r?function(r){return c(e,t()).then((function(){return r}))}:t,r?function(r){return c(e,t()).then((function(){throw r}))}:t)}}),i||"function"!=typeof o||o.prototype.finally||f(o.prototype,"finally",u("Promise").prototype.finally)},function(t,e,r){"use strict";var n=r(1122),i=r(1130),o=r(1154),a=r(1190),u=r(1152),s=r(1133),c=r(1148),f=r(1156),l=r(1134),h=r(1146),p=h.set,v=h.getterFor("AggregateError"),y=function(t,e){var r=this;if(!(r instanceof y))return new y(t,e);a&&(r=a(new Error(e),o(r)));var n=[];return f(t,n.push,n),i?p(r,{errors:n,type:"AggregateError"}):r.errors=n,void 0!==e&&l(r,"message",String(e)),r};y.prototype=u(Error.prototype,{constructor:c(5,y),message:c(5,""),name:c(5,"AggregateError")}),i&&s.f(y.prototype,"errors",{get:function(){return v(this).errors},configurable:!0}),n({global:!0},{AggregateError:y})},function(t,e,r){r(1232)},function(t,e,r){"use strict";var n=r(1122),i=r(1161),o=r(1169);n({target:"Promise",stat:!0},{try:function(t){var e=i.f(this),r=o(t);return(r.error?e.reject:e.resolve)(r.value),e.promise}})},function(t,e,r){"use strict";var n=r(1122),i=r(1135),o=r(1136),a=r(1161),u=r(1169),s=r(1156);n({target:"Promise",stat:!0},{any:function(t){var e=this,r=a.f(e),n=r.resolve,c=r.reject,f=u((function(){var r=i(e.resolve),a=[],u=0,f=1,l=!1;s(t,(function(t){var i=u++,s=!1;a.push(void 0),f++,r.call(e,t).then((function(t){s||l||(l=!0,n(t))}),(function(t){s||l||(s=!0,a[i]=t,--f||c(new(o("AggregateError"))(a,"No one promise resolved")))}))})),--f||c(new(o("AggregateError"))(a,"No one promise resolved"))}));return f.error&&c(f.value),r.promise}})},function(t,e,r){var n=r(1233);t.exports=function(t,e,r){return e in t?n(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t},t.exports.default=t.exports,t.exports.__esModule=!0},function(t,e,r){var n=r(1222);t.exports=n},function(t,e){t.exports=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},t.exports.default=t.exports,t.exports.__esModule=!0},function(t,e,r){var n=r(1233);function i(t,e){for(var r=0;r<e.length;r++){var i=e[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),n(t,i.key,i)}}t.exports=function(t,e,r){return e&&i(t.prototype,e),r&&i(t,r),t},t.exports.default=t.exports,t.exports.__esModule=!0},function(t,e,r){t.exports=r(1348)},function(t,e,r){var n=r(1349);t.exports=n},function(t,e,r){var n=r(1350),i=Array.prototype;t.exports=function(t){var e=t.concat;return t===i||t instanceof Array&&e===i.concat?n:e}},function(t,e,r){r(1204);var n=r(1129);t.exports=n("Array").concat},function(t,e,r){t.exports=r(1352)},function(t,e,r){var n=r(1353);t.exports=n},function(t,e,r){var n=r(1354),i=Array.prototype;t.exports=function(t){var e=t.reduce;return t===i||t instanceof Array&&e===i.reduce?n:e}},function(t,e,r){r(1355);var n=r(1129);t.exports=n("Array").reduce},function(t,e,r){"use strict";var n=r(1122),i=r(1356).left,o=r(1160),a=r(1140),u=o("reduce"),s=a("reduce",{1:0});n({target:"Array",proto:!0,forced:!u||!s},{reduce:function(t){return i(this,t,arguments.length,arguments.length>1?arguments[1]:void 0)}})},function(t,e,r){var n=r(1135),i=r(1139),o=r(1170),a=r(1138),u=function(t){return function(e,r,u,s){n(r);var c=i(e),f=o(c),l=a(c.length),h=t?l-1:0,p=t?-1:1;if(u<2)for(;;){if(h in f){s=f[h],h+=p;break}if(h+=p,t?h<0:l<=h)throw TypeError("Reduce of empty array with no initial value")}for(;t?h>=0:l>h;h+=p)h in f&&(s=r(s,f[h],h,c));return s}};t.exports={left:u(!1),right:u(!0)}},function(t,e,r){t.exports=r(1358)},function(t,e,r){var n=r(1359);t.exports=n},function(t,e,r){r(1360);var n=r(1123);t.exports=n.Date.now},function(t,e,r){r(1122)({target:"Date",stat:!0},{now:function(){return(new Date).getTime()}})},function(t,e,r){t.exports=r(1362)},function(t,e,r){var n=r(1363);t.exports=n},function(t,e,r){var n=r(1364),i=Array.prototype;t.exports=function(t){var e=t.every;return t===i||t instanceof Array&&e===i.every?n:e}},function(t,e,r){r(1365);var n=r(1129);t.exports=n("Array").every},function(t,e,r){"use strict";var n=r(1122),i=r(1144).every,o=r(1160),a=r(1140),u=o("every"),s=a("every");n({target:"Array",proto:!0,forced:!u||!s},{every:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}})},function(t,e,r){t.exports=r(1367)},function(t,e,r){var n=r(1224);t.exports=n},function(t,e,r){t.exports=r(1369)},function(t,e,r){var n=r(1370);t.exports=n},function(t,e,r){var n=r(1371),i=Function.prototype;t.exports=function(t){var e=t.bind;return t===i||t instanceof Function&&e===i.bind?n:e}},function(t,e,r){r(1372);var n=r(1129);t.exports=n("Function").bind},function(t,e,r){r(1122)({target:"Function",proto:!0},{bind:r(1234)})},function(t,e,r){(function(e){for(var n=r(1374),i="undefined"==typeof window?e:window,o=["moz","webkit"],a="AnimationFrame",u=i["request"+a],s=i["cancel"+a]||i["cancelRequest"+a],c=0;!u&&c<o.length;c++)u=i[o[c]+"Request"+a],s=i[o[c]+"Cancel"+a]||i[o[c]+"CancelRequest"+a];if(!u||!s){var f=0,l=0,h=[];u=function(t){if(0===h.length){var e=n(),r=Math.max(0,1e3/60-(e-f));f=r+e,setTimeout((function(){var t=h.slice(0);h.length=0;for(var e=0;e<t.length;e++)if(!t[e].cancelled)try{t[e].callback(f)}catch(t){setTimeout((function(){throw t}),0)}}),Math.round(r))}return h.push({handle:++l,callback:t,cancelled:!1}),l},s=function(t){for(var e=0;e<h.length;e++)h[e].handle===t&&(h[e].cancelled=!0)}}t.exports=function(t){return u.call(i,t)},t.exports.cancel=function(){s.apply(i,arguments)},t.exports.polyfill=function(t){t||(t=i),t.requestAnimationFrame=u,t.cancelAnimationFrame=s}}).call(this,r(130))},function(t,e,r){(function(e){(function(){var r,n,i,o,a,u;"undefined"!=typeof performance&&null!==performance&&performance.now?t.exports=function(){return performance.now()}:null!=e&&e.hrtime?(t.exports=function(){return(r()-a)/1e6},n=e.hrtime,o=(r=function(){var t;return 1e9*(t=n())[0]+t[1]})(),u=1e9*e.uptime(),a=o-u):Date.now?(t.exports=function(){return Date.now()-i},i=Date.now()):(t.exports=function(){return(new Date).getTime()-i},i=(new Date).getTime())}).call(this)}).call(this,r(174))},function(t,e,r){t.exports=r(1376)},function(t,e,r){var n=r(1377);t.exports=n},function(t,e,r){var n=r(1378),i=String.prototype;t.exports=function(t){var e=t.trim;return"string"==typeof t||t===i||t instanceof String&&e===i.trim?n:e}},function(t,e,r){r(1379);var n=r(1129);t.exports=n("String").trim},function(t,e,r){"use strict";var n=r(1122),i=r(1175).trim;n({target:"String",proto:!0,forced:r(1380)("trim")},{trim:function(){return i(this)}})},function(t,e,r){var n=r(1124),i=r(1164);t.exports=function(t){return n((function(){return!!i[t]()||"​᠎"!="​᠎"[t]()||i[t].name!==t}))}},function(t,e){t.exports=function(t){this.ok=!1,this.alpha=1,"#"==t.charAt(0)&&(t=t.substr(1,6)),t=(t=t.replace(/ /g,"")).toLowerCase();var e={aliceblue:"f0f8ff",antiquewhite:"faebd7",aqua:"00ffff",aquamarine:"7fffd4",azure:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"000000",blanchedalmond:"ffebcd",blue:"0000ff",blueviolet:"8a2be2",brown:"a52a2a",burlywood:"deb887",cadetblue:"5f9ea0",chartreuse:"7fff00",chocolate:"d2691e",coral:"ff7f50",cornflowerblue:"6495ed",cornsilk:"fff8dc",crimson:"dc143c",cyan:"00ffff",darkblue:"00008b",darkcyan:"008b8b",darkgoldenrod:"b8860b",darkgray:"a9a9a9",darkgreen:"006400",darkkhaki:"bdb76b",darkmagenta:"8b008b",darkolivegreen:"556b2f",darkorange:"ff8c00",darkorchid:"9932cc",darkred:"8b0000",darksalmon:"e9967a",darkseagreen:"8fbc8f",darkslateblue:"483d8b",darkslategray:"2f4f4f",darkturquoise:"00ced1",darkviolet:"9400d3",deeppink:"ff1493",deepskyblue:"00bfff",dimgray:"696969",dodgerblue:"1e90ff",feldspar:"d19275",firebrick:"b22222",floralwhite:"fffaf0",forestgreen:"228b22",fuchsia:"ff00ff",gainsboro:"dcdcdc",ghostwhite:"f8f8ff",gold:"ffd700",goldenrod:"daa520",gray:"808080",green:"008000",greenyellow:"adff2f",honeydew:"f0fff0",hotpink:"ff69b4",indianred:"cd5c5c",indigo:"4b0082",ivory:"fffff0",khaki:"f0e68c",lavender:"e6e6fa",lavenderblush:"fff0f5",lawngreen:"7cfc00",lemonchiffon:"fffacd",lightblue:"add8e6",lightcoral:"f08080",lightcyan:"e0ffff",lightgoldenrodyellow:"fafad2",lightgrey:"d3d3d3",lightgreen:"90ee90",lightpink:"ffb6c1",lightsalmon:"ffa07a",lightseagreen:"20b2aa",lightskyblue:"87cefa",lightslateblue:"8470ff",lightslategray:"778899",lightsteelblue:"b0c4de",lightyellow:"ffffe0",lime:"00ff00",limegreen:"32cd32",linen:"faf0e6",magenta:"ff00ff",maroon:"800000",mediumaquamarine:"66cdaa",mediumblue:"0000cd",mediumorchid:"ba55d3",mediumpurple:"9370d8",mediumseagreen:"3cb371",mediumslateblue:"7b68ee",mediumspringgreen:"00fa9a",mediumturquoise:"48d1cc",mediumvioletred:"c71585",midnightblue:"191970",mintcream:"f5fffa",mistyrose:"ffe4e1",moccasin:"ffe4b5",navajowhite:"ffdead",navy:"000080",oldlace:"fdf5e6",olive:"808000",olivedrab:"6b8e23",orange:"ffa500",orangered:"ff4500",orchid:"da70d6",palegoldenrod:"eee8aa",palegreen:"98fb98",paleturquoise:"afeeee",palevioletred:"d87093",papayawhip:"ffefd5",peachpuff:"ffdab9",peru:"cd853f",pink:"ffc0cb",plum:"dda0dd",powderblue:"b0e0e6",purple:"800080",rebeccapurple:"663399",red:"ff0000",rosybrown:"bc8f8f",royalblue:"4169e1",saddlebrown:"8b4513",salmon:"fa8072",sandybrown:"f4a460",seagreen:"2e8b57",seashell:"fff5ee",sienna:"a0522d",silver:"c0c0c0",skyblue:"87ceeb",slateblue:"6a5acd",slategray:"708090",snow:"fffafa",springgreen:"00ff7f",steelblue:"4682b4",tan:"d2b48c",teal:"008080",thistle:"d8bfd8",tomato:"ff6347",turquoise:"40e0d0",violet:"ee82ee",violetred:"d02090",wheat:"f5deb3",white:"ffffff",whitesmoke:"f5f5f5",yellow:"ffff00",yellowgreen:"9acd32"};t=e[t]||t;for(var r=[{re:/^rgba\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3}),\s*((?:\d?\.)?\d)\)$/,example:["rgba(123, 234, 45, 0.8)","rgba(255,234,245,1.0)"],process:function(t){return[parseInt(t[1]),parseInt(t[2]),parseInt(t[3]),parseFloat(t[4])]}},{re:/^rgb\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3})\)$/,example:["rgb(123, 234, 45)","rgb(255,234,245)"],process:function(t){return[parseInt(t[1]),parseInt(t[2]),parseInt(t[3])]}},{re:/^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,example:["#00ff00","336699"],process:function(t){return[parseInt(t[1],16),parseInt(t[2],16),parseInt(t[3],16)]}},{re:/^([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,example:["#fb0","f0f"],process:function(t){return[parseInt(t[1]+t[1],16),parseInt(t[2]+t[2],16),parseInt(t[3]+t[3],16)]}}],n=0;n<r.length;n++){var i=r[n].re,o=r[n].process,a=i.exec(t);if(a){var u=o(a);this.r=u[0],this.g=u[1],this.b=u[2],u.length>3&&(this.alpha=u[3]),this.ok=!0}}this.r=this.r<0||isNaN(this.r)?0:this.r>255?255:this.r,this.g=this.g<0||isNaN(this.g)?0:this.g>255?255:this.g,this.b=this.b<0||isNaN(this.b)?0:this.b>255?255:this.b,this.alpha=this.alpha<0?0:this.alpha>1||isNaN(this.alpha)?1:this.alpha,this.toRGB=function(){return"rgb("+this.r+", "+this.g+", "+this.b+")"},this.toRGBA=function(){return"rgba("+this.r+", "+this.g+", "+this.b+", "+this.alpha+")"},this.toHex=function(){var t=this.r.toString(16),e=this.g.toString(16),r=this.b.toString(16);return 1==t.length&&(t="0"+t),1==e.length&&(e="0"+e),1==r.length&&(r="0"+r),"#"+t+e+r},this.getHelpXML=function(){for(var t=new Array,n=0;n<r.length;n++)for(var i=r[n].example,o=0;o<i.length;o++)t[t.length]=i[o];for(var a in e)t[t.length]=a;var u=document.createElement("ul");u.setAttribute("id","rgbcolor-examples");for(n=0;n<t.length;n++)try{var s=document.createElement("li"),c=new RGBColor(t[n]),f=document.createElement("div");f.style.cssText="margin: 3px; border: 1px solid black; background:"+c.toHex()+"; color:"+c.toHex(),f.appendChild(document.createTextNode("test"));var l=document.createTextNode(" "+t[n]+" -> "+c.toRGB()+" -> "+c.toHex());s.appendChild(f),s.appendChild(l),u.appendChild(s)}catch(t){}return u}}},function(t,e,r){t.exports=r(1383)},function(t,e,r){var n=r(1384);t.exports=n},function(t,e,r){r(1385);var n=r(1123);t.exports=n.Reflect.construct},function(t,e,r){var n=r(1122),i=r(1136),o=r(1135),a=r(1131),u=r(1128),s=r(1152),c=r(1234),f=r(1124),l=i("Reflect","construct"),h=f((function(){function t(){}return!(l((function(){}),[],t)instanceof t)})),p=!f((function(){l((function(){}))})),v=h||p;n({target:"Reflect",stat:!0,forced:v,sham:v},{construct:function(t,e){o(t),a(e);var r=arguments.length<3?t:o(arguments[2]);if(p&&!h)return l(t,e,r);if(t==r){switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3])}var n=[null];return n.push.apply(n,e),new(c.apply(t,n))}var i=r.prototype,f=s(u(i)?i:Object.prototype),v=Function.apply.call(t,f,e);return u(v)?v:f}})},function(t,e,r){var n=r(1387),i=r(1391);t.exports=function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=n(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&i(t,e)},t.exports.default=t.exports,t.exports.__esModule=!0},function(t,e,r){t.exports=r(1388)},function(t,e,r){var n=r(1389);t.exports=n},function(t,e,r){r(1390);var n=r(1123).Object;t.exports=function(t,e){return n.create(t,e)}},function(t,e,r){r(1122)({target:"Object",stat:!0,sham:!r(1130)},{create:r(1152)})},function(t,e,r){var n=r(1235);function i(e,r){return t.exports=i=n||function(t,e){return t.__proto__=e,t},t.exports.default=t.exports,t.exports.__esModule=!0,i(e,r)}t.exports=i,t.exports.default=t.exports,t.exports.__esModule=!0},function(t,e,r){var n=r(1393);t.exports=n},function(t,e,r){r(1394);var n=r(1123);t.exports=n.Object.setPrototypeOf},function(t,e,r){r(1122)({target:"Object",stat:!0},{setPrototypeOf:r(1190)})},function(t,e,r){var n=r(1396).default,i=r(1236);t.exports=function(t,e){return!e||"object"!==n(e)&&"function"!=typeof e?i(t):e},t.exports.default=t.exports,t.exports.__esModule=!0},function(t,e,r){var n=r(1177),i=r(1397);function o(e){return"function"==typeof n&&"symbol"==typeof i?(t.exports=o=function(t){return typeof t},t.exports.default=t.exports,t.exports.__esModule=!0):(t.exports=o=function(t){return t&&"function"==typeof n&&t.constructor===n&&t!==n.prototype?"symbol":typeof t},t.exports.default=t.exports,t.exports.__esModule=!0),o(e)}t.exports=o,t.exports.default=t.exports,t.exports.__esModule=!0},function(t,e,r){t.exports=r(1398)},function(t,e,r){var n=r(1399);t.exports=n},function(t,e,r){r(1211),r(1155),r(1147);var n=r(1184);t.exports=n.f("iterator")},function(t,e,r){t.exports=r(1401)},function(t,e,r){var n=r(1402);t.exports=n},function(t,e,r){r(1403);var n=r(1123);t.exports=n.Object.getPrototypeOf},function(t,e,r){var n=r(1122),i=r(1124),o=r(1139),a=r(1154),u=r(1189);n({target:"Object",stat:!0,forced:i((function(){a(1)})),sham:!u},{getPrototypeOf:function(t){return a(o(t))}})},function(t,e,r){var n=r(1405),i=r(1406),o=r(1214),a=r(1407);t.exports=function(t){return n(t)||i(t)||o(t)||a()},t.exports.default=t.exports,t.exports.__esModule=!0},function(t,e,r){var n=r(1201),i=r(1221);t.exports=function(t){if(n(t))return i(t)},t.exports.default=t.exports,t.exports.__esModule=!0},function(t,e,r){var n=r(1177),i=r(1186),o=r(1216);t.exports=function(t){if(void 0!==n&&null!=i(t)||null!=t["@@iterator"])return o(t)},t.exports.default=t.exports,t.exports.__esModule=!0},function(t,e){t.exports=function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")},t.exports.default=t.exports,t.exports.__esModule=!0},function(t,e,r){t.exports=r(1409)},function(t,e,r){var n=r(1410);t.exports=n},function(t,e,r){var n=r(1411),i=Array.prototype;t.exports=function(t){var e=t.some;return t===i||t instanceof Array&&e===i.some?n:e}},function(t,e,r){r(1412);var n=r(1129);t.exports=n("Array").some},function(t,e,r){"use strict";var n=r(1122),i=r(1144).some,o=r(1160),a=r(1140),u=o("some"),s=a("some");n({target:"Array",proto:!0,forced:!u||!s},{some:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}})},function(t,e,r){t.exports=r(1414)},function(t,e,r){var n=r(1415);t.exports=n},function(t,e,r){var n=r(1416),i=r(1418),o=Array.prototype,a=String.prototype;t.exports=function(t){var e=t.includes;return t===o||t instanceof Array&&e===o.includes?n:"string"==typeof t||t===a||t instanceof String&&e===a.includes?i:e}},function(t,e,r){r(1417);var n=r(1129);t.exports=n("Array").includes},function(t,e,r){"use strict";var n=r(1122),i=r(1180).includes,o=r(1187);n({target:"Array",proto:!0,forced:!r(1140)("indexOf",{ACCESSORS:!0,1:0})},{includes:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),o("includes")},function(t,e,r){r(1419);var n=r(1129);t.exports=n("String").includes},function(t,e,r){"use strict";var n=r(1122),i=r(1195),o=r(1149);n({target:"String",proto:!0,forced:!r(1198)("includes")},{includes:function(t){return!!~String(o(this)).indexOf(i(t),arguments.length>1?arguments[1]:void 0)}})},function(t,e,r){t.exports=r(1421)},function(t,e,r){var n=r(1217);t.exports=n},function(t,e,r){t.exports=r(1423)},function(t,e,r){var n=r(1424);t.exports=n},function(t,e,r){var n=r(1425),i=Array.prototype;t.exports=function(t){var e=t.reverse;return t===i||t instanceof Array&&e===i.reverse?n:e}},function(t,e,r){r(1426);var n=r(1129);t.exports=n("Array").reverse},function(t,e,r){"use strict";var n=r(1122),i=r(1151),o=[].reverse,a=[1,2];n({target:"Array",proto:!0,forced:String(a)===String(a.reverse())},{reverse:function(){return i(this)&&(this.length=this.length),o.call(this)}})},function(t,e,r){t.exports=r(1428)},function(t,e,r){var n=r(1429);t.exports=n},function(t,e,r){var n=r(1430),i=Array.prototype;t.exports=function(t){var e=t.indexOf;return t===i||t instanceof Array&&e===i.indexOf?n:e}},function(t,e,r){r(1431);var n=r(1129);t.exports=n("Array").indexOf},function(t,e,r){"use strict";var n=r(1122),i=r(1180).indexOf,o=r(1160),a=r(1140),u=[].indexOf,s=!!u&&1/[1].indexOf(1,-0)<0,c=o("indexOf"),f=a("indexOf",{ACCESSORS:!0,1:0});n({target:"Array",proto:!0,forced:s||!c||!f},{indexOf:function(t){return s?u.apply(this,arguments)||0:i(this,t,arguments.length>1?arguments[1]:void 0)}})},function(t,e,r){var n=r(1433),i=r(1437),o=r(1439);function a(e,r,u){return"undefined"!=typeof Reflect&&n?(t.exports=a=n,t.exports.default=t.exports,t.exports.__esModule=!0):(t.exports=a=function(t,e,r){var n=o(t,e);if(n){var a=i(n,e);return a.get?a.get.call(r):a.value}},t.exports.default=t.exports,t.exports.__esModule=!0),a(e,r,u||e)}t.exports=a,t.exports.default=t.exports,t.exports.__esModule=!0},function(t,e,r){t.exports=r(1434)},function(t,e,r){var n=r(1435);t.exports=n},function(t,e,r){r(1436);var n=r(1123);t.exports=n.Reflect.get},function(t,e,r){var n=r(1122),i=r(1128),o=r(1131),a=r(1132),u=r(1141),s=r(1154);n({target:"Reflect",stat:!0},{get:function t(e,r){var n,c,f=arguments.length<3?e:arguments[2];return o(e)===f?e[r]:(n=u.f(e,r))?a(n,"value")?n.value:void 0===n.get?void 0:n.get.call(f):i(c=s(e))?t(c,r,f):void 0}})},function(t,e,r){t.exports=r(1438)},function(t,e,r){var n=r(1223);t.exports=n},function(t,e,r){var n=r(1237);t.exports=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=n(t)););return t},t.exports.default=t.exports,t.exports.__esModule=!0},function(t,e,r){t.exports=r(1441)},function(t,e,r){var n=r(1442);t.exports=n},function(t,e,r){var n=r(1443),i=Array.prototype;t.exports=function(t){var e=t.fill;return t===i||t instanceof Array&&e===i.fill?n:e}},function(t,e,r){r(1444);var n=r(1129);t.exports=n("Array").fill},function(t,e,r){var n=r(1122),i=r(1445),o=r(1187);n({target:"Array",proto:!0},{fill:i}),o("fill")},function(t,e,r){"use strict";var n=r(1139),i=r(1181),o=r(1138);t.exports=function(t){for(var e=n(this),r=o(e.length),a=arguments.length,u=i(a>1?arguments[1]:void 0,r),s=a>2?arguments[2]:void 0,c=void 0===s?r:i(s,r);c>u;)e[u++]=t;return e}},function(t,e,r){"use strict";r.d(e,"a",(function(){return S}));
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)};function i(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}function o(t,e){var r=t[0],n=t[1];return[r*Math.cos(e)-n*Math.sin(e),r*Math.sin(e)+n*Math.cos(e)]}function a(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];for(var r=0;r<t.length;r++)if("number"!=typeof t[r])throw new Error("assertNumbers arguments["+r+"] is not a number. "+typeof t[r]+" == typeof "+t[r]);return!0}var u=Math.PI;function s(t,e,r){t.lArcFlag=0===t.lArcFlag?0:1,t.sweepFlag=0===t.sweepFlag?0:1;var n=t.rX,i=t.rY,a=t.x,s=t.y;n=Math.abs(t.rX),i=Math.abs(t.rY);var c=o([(e-a)/2,(r-s)/2],-t.xRot/180*u),f=c[0],l=c[1],h=Math.pow(f,2)/Math.pow(n,2)+Math.pow(l,2)/Math.pow(i,2);1<h&&(n*=Math.sqrt(h),i*=Math.sqrt(h)),t.rX=n,t.rY=i;var p=Math.pow(n,2)*Math.pow(l,2)+Math.pow(i,2)*Math.pow(f,2),v=(t.lArcFlag!==t.sweepFlag?1:-1)*Math.sqrt(Math.max(0,(Math.pow(n,2)*Math.pow(i,2)-p)/p)),y=n*l/i*v,d=-i*f/n*v,g=o([y,d],t.xRot/180*u);t.cX=g[0]+(e+a)/2,t.cY=g[1]+(r+s)/2,t.phi1=Math.atan2((l-d)/i,(f-y)/n),t.phi2=Math.atan2((-l-d)/i,(-f-y)/n),0===t.sweepFlag&&t.phi2>t.phi1&&(t.phi2-=2*u),1===t.sweepFlag&&t.phi2<t.phi1&&(t.phi2+=2*u),t.phi1*=180/u,t.phi2*=180/u}function c(t,e,r){a(t,e,r);var n=t*t+e*e-r*r;if(0>n)return[];if(0===n)return[[t*r/(t*t+e*e),e*r/(t*t+e*e)]];var i=Math.sqrt(n);return[[(t*r+e*i)/(t*t+e*e),(e*r-t*i)/(t*t+e*e)],[(t*r-e*i)/(t*t+e*e),(e*r+t*i)/(t*t+e*e)]]}var f,l=Math.PI/180;function h(t,e,r){return(1-r)*t+r*e}function p(t,e,r,n){return t+Math.cos(n/180*u)*e+Math.sin(n/180*u)*r}function v(t,e,r,n){var i=e-t,o=r-e,a=3*i+3*(n-r)-6*o,u=6*(o-i),s=3*i;return Math.abs(a)<1e-6?[-s/u]:function(t,e,r){void 0===r&&(r=1e-6);var n=t*t/4-e;if(n<-r)return[];if(n<=r)return[-t/2];var i=Math.sqrt(n);return[-t/2-i,-t/2+i]}(u/a,s/a,1e-6)}function y(t,e,r,n,i){var o=1-i;return t*(o*o*o)+e*(3*o*o*i)+r*(3*o*i*i)+n*(i*i*i)}!function(t){function e(){return i((function(t,e,r){return t.relative&&(void 0!==t.x1&&(t.x1+=e),void 0!==t.y1&&(t.y1+=r),void 0!==t.x2&&(t.x2+=e),void 0!==t.y2&&(t.y2+=r),void 0!==t.x&&(t.x+=e),void 0!==t.y&&(t.y+=r),t.relative=!1),t}))}function r(){var t=NaN,e=NaN,r=NaN,n=NaN;return i((function(i,o,a){return i.type&S.SMOOTH_CURVE_TO&&(i.type=S.CURVE_TO,t=isNaN(t)?o:t,e=isNaN(e)?a:e,i.x1=i.relative?o-t:2*o-t,i.y1=i.relative?a-e:2*a-e),i.type&S.CURVE_TO?(t=i.relative?o+i.x2:i.x2,e=i.relative?a+i.y2:i.y2):(t=NaN,e=NaN),i.type&S.SMOOTH_QUAD_TO&&(i.type=S.QUAD_TO,r=isNaN(r)?o:r,n=isNaN(n)?a:n,i.x1=i.relative?o-r:2*o-r,i.y1=i.relative?a-n:2*a-n),i.type&S.QUAD_TO?(r=i.relative?o+i.x1:i.x1,n=i.relative?a+i.y1:i.y1):(r=NaN,n=NaN),i}))}function n(){var t=NaN,e=NaN;return i((function(r,n,i){if(r.type&S.SMOOTH_QUAD_TO&&(r.type=S.QUAD_TO,t=isNaN(t)?n:t,e=isNaN(e)?i:e,r.x1=r.relative?n-t:2*n-t,r.y1=r.relative?i-e:2*i-e),r.type&S.QUAD_TO){t=r.relative?n+r.x1:r.x1,e=r.relative?i+r.y1:r.y1;var o=r.x1,a=r.y1;r.type=S.CURVE_TO,r.x1=((r.relative?0:n)+2*o)/3,r.y1=((r.relative?0:i)+2*a)/3,r.x2=(r.x+2*o)/3,r.y2=(r.y+2*a)/3}else t=NaN,e=NaN;return r}))}function i(t){var e=0,r=0,n=NaN,i=NaN;return function(o){if(isNaN(n)&&!(o.type&S.MOVE_TO))throw new Error("path must start with moveto");var a=t(o,e,r,n,i);return o.type&S.CLOSE_PATH&&(e=n,r=i),void 0!==o.x&&(e=o.relative?e+o.x:o.x),void 0!==o.y&&(r=o.relative?r+o.y:o.y),o.type&S.MOVE_TO&&(n=e,i=r),a}}function u(t,e,r,n,o,u){return a(t,e,r,n,o,u),i((function(i,a,s,c){var f=i.x1,l=i.x2,h=i.relative&&!isNaN(c),p=void 0!==i.x?i.x:h?0:a,v=void 0!==i.y?i.y:h?0:s;function y(t){return t*t}i.type&S.HORIZ_LINE_TO&&0!==e&&(i.type=S.LINE_TO,i.y=i.relative?0:s),i.type&S.VERT_LINE_TO&&0!==r&&(i.type=S.LINE_TO,i.x=i.relative?0:a),void 0!==i.x&&(i.x=i.x*t+v*r+(h?0:o)),void 0!==i.y&&(i.y=p*e+i.y*n+(h?0:u)),void 0!==i.x1&&(i.x1=i.x1*t+i.y1*r+(h?0:o)),void 0!==i.y1&&(i.y1=f*e+i.y1*n+(h?0:u)),void 0!==i.x2&&(i.x2=i.x2*t+i.y2*r+(h?0:o)),void 0!==i.y2&&(i.y2=l*e+i.y2*n+(h?0:u));var d=t*n-e*r;if(void 0!==i.xRot&&(1!==t||0!==e||0!==r||1!==n))if(0===d)delete i.rX,delete i.rY,delete i.xRot,delete i.lArcFlag,delete i.sweepFlag,i.type=S.LINE_TO;else{var g=i.xRot*Math.PI/180,x=Math.sin(g),m=Math.cos(g),b=1/y(i.rX),w=1/y(i.rY),A=y(m)*b+y(x)*w,k=2*x*m*(b-w),T=y(x)*b+y(m)*w,P=A*n*n-k*e*n+T*e*e,O=k*(t*n+e*r)-2*(A*r*n+T*t*e),C=A*r*r-k*t*r+T*t*t,E=(Math.atan2(O,P-C)+Math.PI)%Math.PI/2,M=Math.sin(E),_=Math.cos(E);i.rX=Math.abs(d)/Math.sqrt(P*y(_)+O*M*_+C*y(M)),i.rY=Math.abs(d)/Math.sqrt(P*y(M)-O*M*_+C*y(_)),i.xRot=180*E/Math.PI}return void 0!==i.sweepFlag&&0>d&&(i.sweepFlag=+!i.sweepFlag),i}))}t.ROUND=function(t){function e(e){return Math.round(e*t)/t}return void 0===t&&(t=1e13),a(t),function(t){return void 0!==t.x1&&(t.x1=e(t.x1)),void 0!==t.y1&&(t.y1=e(t.y1)),void 0!==t.x2&&(t.x2=e(t.x2)),void 0!==t.y2&&(t.y2=e(t.y2)),void 0!==t.x&&(t.x=e(t.x)),void 0!==t.y&&(t.y=e(t.y)),void 0!==t.rX&&(t.rX=e(t.rX)),void 0!==t.rY&&(t.rY=e(t.rY)),t}},t.TO_ABS=e,t.TO_REL=function(){return i((function(t,e,r){return t.relative||(void 0!==t.x1&&(t.x1-=e),void 0!==t.y1&&(t.y1-=r),void 0!==t.x2&&(t.x2-=e),void 0!==t.y2&&(t.y2-=r),void 0!==t.x&&(t.x-=e),void 0!==t.y&&(t.y-=r),t.relative=!0),t}))},t.NORMALIZE_HVZ=function(t,e,r){return void 0===t&&(t=!0),void 0===e&&(e=!0),void 0===r&&(r=!0),i((function(n,i,o,a,u){if(isNaN(a)&&!(n.type&S.MOVE_TO))throw new Error("path must start with moveto");return e&&n.type&S.HORIZ_LINE_TO&&(n.type=S.LINE_TO,n.y=n.relative?0:o),r&&n.type&S.VERT_LINE_TO&&(n.type=S.LINE_TO,n.x=n.relative?0:i),t&&n.type&S.CLOSE_PATH&&(n.type=S.LINE_TO,n.x=n.relative?a-i:a,n.y=n.relative?u-o:u),n.type&S.ARC&&(0===n.rX||0===n.rY)&&(n.type=S.LINE_TO,delete n.rX,delete n.rY,delete n.xRot,delete n.lArcFlag,delete n.sweepFlag),n}))},t.NORMALIZE_ST=r,t.QT_TO_C=n,t.INFO=i,t.SANITIZE=function(t){void 0===t&&(t=0),a(t);var e=NaN,r=NaN,n=NaN,o=NaN;return i((function(i,a,u,s,c){var f=Math.abs,l=!1,h=0,p=0;if(i.type&S.SMOOTH_CURVE_TO&&(h=isNaN(e)?0:a-e,p=isNaN(r)?0:u-r),i.type&(S.CURVE_TO|S.SMOOTH_CURVE_TO)?(e=i.relative?a+i.x2:i.x2,r=i.relative?u+i.y2:i.y2):(e=NaN,r=NaN),i.type&S.SMOOTH_QUAD_TO?(n=isNaN(n)?a:2*a-n,o=isNaN(o)?u:2*u-o):i.type&S.QUAD_TO?(n=i.relative?a+i.x1:i.x1,o=i.relative?u+i.y1:i.y2):(n=NaN,o=NaN),i.type&S.LINE_COMMANDS||i.type&S.ARC&&(0===i.rX||0===i.rY||!i.lArcFlag)||i.type&S.CURVE_TO||i.type&S.SMOOTH_CURVE_TO||i.type&S.QUAD_TO||i.type&S.SMOOTH_QUAD_TO){var v=void 0===i.x?0:i.relative?i.x:i.x-a,y=void 0===i.y?0:i.relative?i.y:i.y-u;h=isNaN(n)?void 0===i.x1?h:i.relative?i.x:i.x1-a:n-a,p=isNaN(o)?void 0===i.y1?p:i.relative?i.y:i.y1-u:o-u;var d=void 0===i.x2?0:i.relative?i.x:i.x2-a,g=void 0===i.y2?0:i.relative?i.y:i.y2-u;f(v)<=t&&f(y)<=t&&f(h)<=t&&f(p)<=t&&f(d)<=t&&f(g)<=t&&(l=!0)}return i.type&S.CLOSE_PATH&&f(a-s)<=t&&f(u-c)<=t&&(l=!0),l?[]:i}))},t.MATRIX=u,t.ROTATE=function(t,e,r){void 0===e&&(e=0),void 0===r&&(r=0),a(t,e,r);var n=Math.sin(t),i=Math.cos(t);return u(i,n,-n,i,e-e*i+r*n,r-e*n-r*i)},t.TRANSLATE=function(t,e){return void 0===e&&(e=0),a(t,e),u(1,0,0,1,t,e)},t.SCALE=function(t,e){return void 0===e&&(e=t),a(t,e),u(t,0,0,e,0,0)},t.SKEW_X=function(t){return a(t),u(1,0,Math.atan(t),1,0,0)},t.SKEW_Y=function(t){return a(t),u(1,Math.atan(t),0,1,0,0)},t.X_AXIS_SYMMETRY=function(t){return void 0===t&&(t=0),a(t),u(-1,0,0,1,t,0)},t.Y_AXIS_SYMMETRY=function(t){return void 0===t&&(t=0),a(t),u(1,0,0,-1,0,t)},t.A_TO_C=function(){return i((function(t,e,r){return S.ARC===t.type?function(t,e,r){var n,i,a,u;t.cX||s(t,e,r);for(var c=Math.min(t.phi1,t.phi2),f=Math.max(t.phi1,t.phi2)-c,p=Math.ceil(f/90),v=new Array(p),y=e,d=r,g=0;g<p;g++){var x=h(t.phi1,t.phi2,g/p),m=h(t.phi1,t.phi2,(g+1)/p),b=m-x,w=4/3*Math.tan(b*l/4),A=[Math.cos(x*l)-w*Math.sin(x*l),Math.sin(x*l)+w*Math.cos(x*l)],k=A[0],T=A[1],P=[Math.cos(m*l),Math.sin(m*l)],O=P[0],C=P[1],E=[O+w*Math.sin(m*l),C-w*Math.cos(m*l)],M=E[0],_=E[1];v[g]={relative:t.relative,type:S.CURVE_TO};var N=function(e,r){var n=o([e*t.rX,r*t.rY],t.xRot),i=n[0],a=n[1];return[t.cX+i,t.cY+a]};n=N(k,T),v[g].x1=n[0],v[g].y1=n[1],i=N(M,_),v[g].x2=i[0],v[g].y2=i[1],a=N(O,C),v[g].x=a[0],v[g].y=a[1],t.relative&&(v[g].x1-=y,v[g].y1-=d,v[g].x2-=y,v[g].y2-=d,v[g].x-=y,v[g].y-=d),y=(u=[v[g].x,v[g].y])[0],d=u[1]}return v}(t,t.relative?0:e,t.relative?0:r):t}))},t.ANNOTATE_ARCS=function(){return i((function(t,e,r){return t.relative&&(e=0,r=0),S.ARC===t.type&&s(t,e,r),t}))},t.CLONE=function(){return function(t){var e={};for(var r in t)e[r]=t[r];return e}},t.CALCULATE_BOUNDS=function(){var t=e(),o=n(),a=r(),u=i((function(e,r,n){var i=a(o(t(function(t){var e={};for(var r in t)e[r]=t[r];return e}(e))));function f(t){t>u.maxX&&(u.maxX=t),t<u.minX&&(u.minX=t)}function l(t){t>u.maxY&&(u.maxY=t),t<u.minY&&(u.minY=t)}if(i.type&S.DRAWING_COMMANDS&&(f(r),l(n)),i.type&S.HORIZ_LINE_TO&&f(i.x),i.type&S.VERT_LINE_TO&&l(i.y),i.type&S.LINE_TO&&(f(i.x),l(i.y)),i.type&S.CURVE_TO){f(i.x),l(i.y);for(var h=0,d=v(r,i.x1,i.x2,i.x);h<d.length;h++)0<(R=d[h])&&1>R&&f(y(r,i.x1,i.x2,i.x,R));for(var g=0,x=v(n,i.y1,i.y2,i.y);g<x.length;g++)0<(R=x[g])&&1>R&&l(y(n,i.y1,i.y2,i.y,R))}if(i.type&S.ARC){f(i.x),l(i.y),s(i,r,n);for(var m=i.xRot/180*Math.PI,b=Math.cos(m)*i.rX,w=Math.sin(m)*i.rX,A=-Math.sin(m)*i.rY,k=Math.cos(m)*i.rY,T=i.phi1<i.phi2?[i.phi1,i.phi2]:-180>i.phi2?[i.phi2+360,i.phi1+360]:[i.phi2,i.phi1],P=T[0],O=T[1],C=function(t){var e=t[0],r=t[1],n=180*Math.atan2(r,e)/Math.PI;return n<P?n+360:n},E=0,M=c(A,-b,0).map(C);E<M.length;E++)(R=M[E])>P&&R<O&&f(p(i.cX,b,A,R));for(var _=0,N=c(k,-w,0).map(C);_<N.length;_++){var R;(R=N[_])>P&&R<O&&l(p(i.cY,w,k,R))}}return e}));return u.minX=1/0,u.maxX=-1/0,u.minY=1/0,u.maxY=-1/0,u}}(f||(f={}));var d,g=function(){function t(){}return t.prototype.round=function(t){return this.transform(f.ROUND(t))},t.prototype.toAbs=function(){return this.transform(f.TO_ABS())},t.prototype.toRel=function(){return this.transform(f.TO_REL())},t.prototype.normalizeHVZ=function(t,e,r){return this.transform(f.NORMALIZE_HVZ(t,e,r))},t.prototype.normalizeST=function(){return this.transform(f.NORMALIZE_ST())},t.prototype.qtToC=function(){return this.transform(f.QT_TO_C())},t.prototype.aToC=function(){return this.transform(f.A_TO_C())},t.prototype.sanitize=function(t){return this.transform(f.SANITIZE(t))},t.prototype.translate=function(t,e){return this.transform(f.TRANSLATE(t,e))},t.prototype.scale=function(t,e){return this.transform(f.SCALE(t,e))},t.prototype.rotate=function(t,e,r){return this.transform(f.ROTATE(t,e,r))},t.prototype.matrix=function(t,e,r,n,i,o){return this.transform(f.MATRIX(t,e,r,n,i,o))},t.prototype.skewX=function(t){return this.transform(f.SKEW_X(t))},t.prototype.skewY=function(t){return this.transform(f.SKEW_Y(t))},t.prototype.xSymmetry=function(t){return this.transform(f.X_AXIS_SYMMETRY(t))},t.prototype.ySymmetry=function(t){return this.transform(f.Y_AXIS_SYMMETRY(t))},t.prototype.annotateArcs=function(){return this.transform(f.ANNOTATE_ARCS())},t}(),x=function(t){return" "===t||"\t"===t||"\r"===t||"\n"===t},m=function(t){return"0".charCodeAt(0)<=t.charCodeAt(0)&&t.charCodeAt(0)<="9".charCodeAt(0)},b=function(t){function e(){var e=t.call(this)||this;return e.curNumber="",e.curCommandType=-1,e.curCommandRelative=!1,e.canParseCommandOrComma=!0,e.curNumberHasExp=!1,e.curNumberHasExpDigits=!1,e.curNumberHasDecimal=!1,e.curArgs=[],e}return i(e,t),e.prototype.finish=function(t){if(void 0===t&&(t=[]),this.parse(" ",t),0!==this.curArgs.length||!this.canParseCommandOrComma)throw new SyntaxError("Unterminated command at the path end.");return t},e.prototype.parse=function(t,e){var r=this;void 0===e&&(e=[]);for(var n=function(t){e.push(t),r.curArgs.length=0,r.canParseCommandOrComma=!0},i=0;i<t.length;i++){var o=t[i],a=!(this.curCommandType!==S.ARC||3!==this.curArgs.length&&4!==this.curArgs.length||1!==this.curNumber.length||"0"!==this.curNumber&&"1"!==this.curNumber),u=m(o)&&("0"===this.curNumber&&"0"===o||a);if(!m(o)||u)if("e"!==o&&"E"!==o)if("-"!==o&&"+"!==o||!this.curNumberHasExp||this.curNumberHasExpDigits)if("."!==o||this.curNumberHasExp||this.curNumberHasDecimal||a){if(this.curNumber&&-1!==this.curCommandType){var s=Number(this.curNumber);if(isNaN(s))throw new SyntaxError("Invalid number ending at "+i);if(this.curCommandType===S.ARC)if(0===this.curArgs.length||1===this.curArgs.length){if(0>s)throw new SyntaxError('Expected positive number, got "'+s+'" at index "'+i+'"')}else if((3===this.curArgs.length||4===this.curArgs.length)&&"0"!==this.curNumber&&"1"!==this.curNumber)throw new SyntaxError('Expected a flag, got "'+this.curNumber+'" at index "'+i+'"');this.curArgs.push(s),this.curArgs.length===w[this.curCommandType]&&(S.HORIZ_LINE_TO===this.curCommandType?n({type:S.HORIZ_LINE_TO,relative:this.curCommandRelative,x:s}):S.VERT_LINE_TO===this.curCommandType?n({type:S.VERT_LINE_TO,relative:this.curCommandRelative,y:s}):this.curCommandType===S.MOVE_TO||this.curCommandType===S.LINE_TO||this.curCommandType===S.SMOOTH_QUAD_TO?(n({type:this.curCommandType,relative:this.curCommandRelative,x:this.curArgs[0],y:this.curArgs[1]}),S.MOVE_TO===this.curCommandType&&(this.curCommandType=S.LINE_TO)):this.curCommandType===S.CURVE_TO?n({type:S.CURVE_TO,relative:this.curCommandRelative,x1:this.curArgs[0],y1:this.curArgs[1],x2:this.curArgs[2],y2:this.curArgs[3],x:this.curArgs[4],y:this.curArgs[5]}):this.curCommandType===S.SMOOTH_CURVE_TO?n({type:S.SMOOTH_CURVE_TO,relative:this.curCommandRelative,x2:this.curArgs[0],y2:this.curArgs[1],x:this.curArgs[2],y:this.curArgs[3]}):this.curCommandType===S.QUAD_TO?n({type:S.QUAD_TO,relative:this.curCommandRelative,x1:this.curArgs[0],y1:this.curArgs[1],x:this.curArgs[2],y:this.curArgs[3]}):this.curCommandType===S.ARC&&n({type:S.ARC,relative:this.curCommandRelative,rX:this.curArgs[0],rY:this.curArgs[1],xRot:this.curArgs[2],lArcFlag:this.curArgs[3],sweepFlag:this.curArgs[4],x:this.curArgs[5],y:this.curArgs[6]})),this.curNumber="",this.curNumberHasExpDigits=!1,this.curNumberHasExp=!1,this.curNumberHasDecimal=!1,this.canParseCommandOrComma=!0}if(!x(o))if(","===o&&this.canParseCommandOrComma)this.canParseCommandOrComma=!1;else if("+"!==o&&"-"!==o&&"."!==o)if(u)this.curNumber=o,this.curNumberHasDecimal=!1;else{if(0!==this.curArgs.length)throw new SyntaxError("Unterminated command at index "+i+".");if(!this.canParseCommandOrComma)throw new SyntaxError('Unexpected character "'+o+'" at index '+i+". Command cannot follow comma");if(this.canParseCommandOrComma=!1,"z"!==o&&"Z"!==o)if("h"===o||"H"===o)this.curCommandType=S.HORIZ_LINE_TO,this.curCommandRelative="h"===o;else if("v"===o||"V"===o)this.curCommandType=S.VERT_LINE_TO,this.curCommandRelative="v"===o;else if("m"===o||"M"===o)this.curCommandType=S.MOVE_TO,this.curCommandRelative="m"===o;else if("l"===o||"L"===o)this.curCommandType=S.LINE_TO,this.curCommandRelative="l"===o;else if("c"===o||"C"===o)this.curCommandType=S.CURVE_TO,this.curCommandRelative="c"===o;else if("s"===o||"S"===o)this.curCommandType=S.SMOOTH_CURVE_TO,this.curCommandRelative="s"===o;else if("q"===o||"Q"===o)this.curCommandType=S.QUAD_TO,this.curCommandRelative="q"===o;else if("t"===o||"T"===o)this.curCommandType=S.SMOOTH_QUAD_TO,this.curCommandRelative="t"===o;else{if("a"!==o&&"A"!==o)throw new SyntaxError('Unexpected character "'+o+'" at index '+i+".");this.curCommandType=S.ARC,this.curCommandRelative="a"===o}else e.push({type:S.CLOSE_PATH}),this.canParseCommandOrComma=!0,this.curCommandType=-1}else this.curNumber=o,this.curNumberHasDecimal="."===o}else this.curNumber+=o,this.curNumberHasDecimal=!0;else this.curNumber+=o;else this.curNumber+=o,this.curNumberHasExp=!0;else this.curNumber+=o,this.curNumberHasExpDigits=this.curNumberHasExp}return e},e.prototype.transform=function(t){return Object.create(this,{parse:{value:function(e,r){void 0===r&&(r=[]);for(var n=0,i=Object.getPrototypeOf(this).parse.call(this,e);n<i.length;n++){var o=i[n],a=t(o);Array.isArray(a)?r.push.apply(r,a):r.push(a)}return r}}})},e}(g),S=function(t){function e(r){var n=t.call(this)||this;return n.commands="string"==typeof r?e.parse(r):r,n}return i(e,t),e.prototype.encode=function(){return e.encode(this.commands)},e.prototype.getBounds=function(){var t=f.CALCULATE_BOUNDS();return this.transform(t),t},e.prototype.transform=function(t){for(var e=[],r=0,n=this.commands;r<n.length;r++){var i=t(n[r]);Array.isArray(i)?e.push.apply(e,i):e.push(i)}return this.commands=e,this},e.encode=function(t){return function(t){var e="";Array.isArray(t)||(t=[t]);for(var r=0;r<t.length;r++){var n=t[r];if(n.type===S.CLOSE_PATH)e+="z";else if(n.type===S.HORIZ_LINE_TO)e+=(n.relative?"h":"H")+n.x;else if(n.type===S.VERT_LINE_TO)e+=(n.relative?"v":"V")+n.y;else if(n.type===S.MOVE_TO)e+=(n.relative?"m":"M")+n.x+" "+n.y;else if(n.type===S.LINE_TO)e+=(n.relative?"l":"L")+n.x+" "+n.y;else if(n.type===S.CURVE_TO)e+=(n.relative?"c":"C")+n.x1+" "+n.y1+" "+n.x2+" "+n.y2+" "+n.x+" "+n.y;else if(n.type===S.SMOOTH_CURVE_TO)e+=(n.relative?"s":"S")+n.x2+" "+n.y2+" "+n.x+" "+n.y;else if(n.type===S.QUAD_TO)e+=(n.relative?"q":"Q")+n.x1+" "+n.y1+" "+n.x+" "+n.y;else if(n.type===S.SMOOTH_QUAD_TO)e+=(n.relative?"t":"T")+n.x+" "+n.y;else{if(n.type!==S.ARC)throw new Error('Unexpected command type "'+n.type+'" at index '+r+".");e+=(n.relative?"a":"A")+n.rX+" "+n.rY+" "+n.xRot+" "+ +n.lArcFlag+" "+ +n.sweepFlag+" "+n.x+" "+n.y}}return e}(t)},e.parse=function(t){var e=new b,r=[];return e.parse(t,r),e.finish(r),r},e.CLOSE_PATH=1,e.MOVE_TO=2,e.HORIZ_LINE_TO=4,e.VERT_LINE_TO=8,e.LINE_TO=16,e.CURVE_TO=32,e.SMOOTH_CURVE_TO=64,e.QUAD_TO=128,e.SMOOTH_QUAD_TO=256,e.ARC=512,e.LINE_COMMANDS=e.LINE_TO|e.HORIZ_LINE_TO|e.VERT_LINE_TO,e.DRAWING_COMMANDS=e.HORIZ_LINE_TO|e.VERT_LINE_TO|e.LINE_TO|e.CURVE_TO|e.SMOOTH_CURVE_TO|e.QUAD_TO|e.SMOOTH_QUAD_TO|e.ARC,e}(g),w=((d={})[S.MOVE_TO]=2,d[S.LINE_TO]=2,d[S.HORIZ_LINE_TO]=1,d[S.VERT_LINE_TO]=1,d[S.CLOSE_PATH]=0,d[S.QUAD_TO]=4,d[S.SMOOTH_QUAD_TO]=2,d[S.CURVE_TO]=6,d[S.SMOOTH_CURVE_TO]=4,d[S.ARC]=7,d)},function(t,e,r){t.exports=r(1448)},function(t,e,r){var n=r(1449);t.exports=n},function(t,e,r){r(1450);var n=r(1123);t.exports=n.Reflect.deleteProperty},function(t,e,r){var n=r(1122),i=r(1131),o=r(1141).f;n({target:"Reflect",stat:!0},{deleteProperty:function(t,e){var r=o(i(t),e);return!(r&&!r.configurable)&&delete t[e]}})},function(t,e,r){t.exports=r(1452)},function(t,e,r){r(1147);var n=r(1453),i=r(1159),o=Array.prototype,a={DOMTokenList:!0,NodeList:!0};t.exports=function(t){var e=t.values;return t===o||t instanceof Array&&e===o.values||a.hasOwnProperty(i(t))?n:e}},function(t,e,r){var n=r(1454);t.exports=n},function(t,e,r){r(1212);var n=r(1129);t.exports=n("Array").values},function(t,e,r){t.exports=r(1456)},function(t,e,r){var n=r(1457);t.exports=n},function(t,e,r){r(1458);var n=r(1123);t.exports=n.parseInt},function(t,e,r){var n=r(1122),i=r(1459);n({global:!0,forced:parseInt!=i},{parseInt:i})},function(t,e,r){var n=r(1125),i=r(1175).trim,o=r(1164),a=n.parseInt,u=/^[+-]?0[Xx]/,s=8!==a(o+"08")||22!==a(o+"0x16");t.exports=s?function(t,e){var r=i(String(t));return a(r,e>>>0||(u.test(r)?16:10))}:a},function(t,e,r){t.exports=r(1461)},function(t,e,r){r(1147),r(1155);var n=r(1462);t.exports=n},function(t,e,r){var n=r(1131),i=r(1168);t.exports=function(t){var e=i(t);if("function"!=typeof e)throw TypeError(String(t)+" is not iterable");return n(e.call(t))}},function(t,e,r){t.exports=r(1464)},function(t,e,r){var n=r(1202);t.exports=n},function(t,e,r){t.exports=r(1466)},function(t,e,r){var n=r(1203);t.exports=n},function(t,e,r){t.exports=r(1468)},function(t,e,r){var n=r(1215);t.exports=n},function(t,e,r){t.exports=r(1470)},function(t,e,r){var n=r(1471);t.exports=n},function(t,e,r){r(1472),r(1178),r(1155),r(1147);var n=r(1123);t.exports=n.Map},function(t,e,r){"use strict";var n=r(1473),i=r(1475);t.exports=n("Map",(function(t){return function(){return t(this,arguments.length?arguments[0]:void 0)}}),i)},function(t,e,r){"use strict";var n=r(1122),i=r(1125),o=r(1238),a=r(1124),u=r(1134),s=r(1156),c=r(1191),f=r(1128),l=r(1145),h=r(1133).f,p=r(1144).forEach,v=r(1130),y=r(1146),d=y.set,g=y.getterFor;t.exports=function(t,e,r){var y,x=-1!==t.indexOf("Map"),m=-1!==t.indexOf("Weak"),b=x?"set":"add",S=i[t],w=S&&S.prototype,A={};if(v&&"function"==typeof S&&(m||w.forEach&&!a((function(){(new S).entries().next()})))){y=e((function(e,r){d(c(e,y,t),{type:t,collection:new S}),null!=r&&s(r,e[b],e,x)}));var k=g(t);p(["add","clear","delete","forEach","get","has","set","keys","values","entries"],(function(t){var e="add"==t||"set"==t;!(t in w)||m&&"clear"==t||u(y.prototype,t,(function(r,n){var i=k(this).collection;if(!e&&m&&!f(r))return"get"==t&&void 0;var o=i[t](0===r?0:r,n);return e?this:o}))})),m||h(y.prototype,"size",{configurable:!0,get:function(){return k(this).collection.size}})}else y=r.getConstructor(e,t,x,b),o.REQUIRED=!0;return l(y,t,!1,!0),A[t]=y,n({global:!0,forced:!0},A),m||r.setStrong(y,t,x),y}},function(t,e,r){var n=r(1124);t.exports=!n((function(){return Object.isExtensible(Object.preventExtensions({}))}))},function(t,e,r){"use strict";var n=r(1133).f,i=r(1152),o=r(1226),a=r(1150),u=r(1191),s=r(1156),c=r(1188),f=r(1227),l=r(1130),h=r(1238).fastKey,p=r(1146),v=p.set,y=p.getterFor;t.exports={getConstructor:function(t,e,r,c){var f=t((function(t,n){u(t,f,e),v(t,{type:e,index:i(null),first:void 0,last:void 0,size:0}),l||(t.size=0),null!=n&&s(n,t[c],t,r)})),p=y(e),d=function(t,e,r){var n,i,o=p(t),a=g(t,e);return a?a.value=r:(o.last=a={index:i=h(e,!0),key:e,value:r,previous:n=o.last,next:void 0,removed:!1},o.first||(o.first=a),n&&(n.next=a),l?o.size++:t.size++,"F"!==i&&(o.index[i]=a)),t},g=function(t,e){var r,n=p(t),i=h(e);if("F"!==i)return n.index[i];for(r=n.first;r;r=r.next)if(r.key==e)return r};return o(f.prototype,{clear:function(){for(var t=p(this),e=t.index,r=t.first;r;)r.removed=!0,r.previous&&(r.previous=r.previous.next=void 0),delete e[r.index],r=r.next;t.first=t.last=void 0,l?t.size=0:this.size=0},delete:function(t){var e=p(this),r=g(this,t);if(r){var n=r.next,i=r.previous;delete e.index[r.index],r.removed=!0,i&&(i.next=n),n&&(n.previous=i),e.first==r&&(e.first=n),e.last==r&&(e.last=i),l?e.size--:this.size--}return!!r},forEach:function(t){for(var e,r=p(this),n=a(t,arguments.length>1?arguments[1]:void 0,3);e=e?e.next:r.first;)for(n(e.value,e.key,this);e&&e.removed;)e=e.previous},has:function(t){return!!g(this,t)}}),o(f.prototype,r?{get:function(t){var e=g(this,t);return e&&e.value},set:function(t,e){return d(this,0===t?0:t,e)}}:{add:function(t){return d(this,t=0===t?0:t,t)}}),l&&n(f.prototype,"size",{get:function(){return p(this).size}}),f},setStrong:function(t,e,r){var n=e+" Iterator",i=y(e),o=y(n);c(t,e,(function(t,e){v(this,{type:n,target:t,state:i(t),kind:e,last:void 0})}),(function(){for(var t=o(this),e=t.kind,r=t.last;r&&r.removed;)r=r.previous;return t.target&&(t.last=r=r?r.next:t.state.first)?"keys"==e?{value:r.key,done:!1}:"values"==e?{value:r.value,done:!1}:{value:[r.key,r.value],done:!1}:(t.target=void 0,{value:void 0,done:!0})}),r?"entries":"values",!r,!0),f(e)}}},function(t,e,r){t.exports=r(1477)},function(t,e,r){var n=r(1478);t.exports=n},function(t,e,r){r(1479);var n=r(1123);t.exports=n.Reflect.apply},function(t,e,r){var n=r(1122),i=r(1136),o=r(1135),a=r(1131),u=r(1124),s=i("Reflect","apply"),c=Function.apply;n({target:"Reflect",stat:!0,forced:!u((function(){s((function(){}))}))},{apply:function(t,e,r){return o(t),a(r),s?s(t,e,r):c.call(t,e,r)}})},function(t,e,r){t.exports=r(1481)},function(t,e,r){var n=r(1482);t.exports=n},function(t,e,r){r(1483);var n=r(1123);t.exports=n.Reflect.getPrototypeOf},function(t,e,r){var n=r(1122),i=r(1131),o=r(1154);n({target:"Reflect",stat:!0,sham:!r(1189)},{getPrototypeOf:function(t){return o(i(t))}})},function(t,e,r){"use strict";function n(t){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}r.d(e,"a",(function(){return u}));var i=[512,512,456,512,328,456,335,512,405,328,271,456,388,335,292,512,454,405,364,328,298,271,496,456,420,388,360,335,312,292,273,512,482,454,428,405,383,364,345,328,312,298,284,271,259,496,475,456,437,420,404,388,374,360,347,335,323,312,302,292,282,273,265,512,497,482,468,454,441,428,417,405,394,383,373,364,354,345,337,328,320,312,305,298,291,284,278,271,265,259,507,496,485,475,465,456,446,437,428,420,412,404,396,388,381,374,367,360,354,347,341,335,329,323,318,312,307,302,297,292,287,282,278,273,269,265,261,512,505,497,489,482,475,468,461,454,447,441,435,428,422,417,411,405,399,394,389,383,378,373,368,364,359,354,350,345,341,337,332,328,324,320,316,312,309,305,301,298,294,291,287,284,281,278,274,271,268,265,262,259,257,507,501,496,491,485,480,475,470,465,460,456,451,446,442,437,433,428,424,420,416,412,408,404,400,396,392,388,385,381,377,374,370,367,363,360,357,354,350,347,344,341,338,335,332,329,326,323,320,318,315,312,310,307,304,302,299,297,294,292,289,287,285,282,280,278,275,273,271,269,267,265,263,261,259],o=[9,11,12,13,13,14,14,15,15,15,15,16,16,16,16,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24];function a(t,e,r,i,o){if("string"==typeof t&&(t=document.getElementById(t)),!t||"object"!==n(t)||!("getContext"in t))throw new TypeError("Expecting canvas with `getContext` method in processCanvasRGB(A) calls!");var a=t.getContext("2d");try{return a.getImageData(e,r,i,o)}catch(t){throw new Error("unable to access image data: "+t)}}function u(t,e,r,n,u,c){if(!(isNaN(c)||c<1)){c|=0;var f=a(t,e,r,n,u);f=function(t,e,r,n,a,u){for(var c,f=t.data,l=2*u+1,h=n-1,p=a-1,v=u+1,y=v*(v+1)/2,d=new s,g=d,x=1;x<l;x++)g=g.next=new s,x===v&&(c=g);g.next=d;for(var m=null,b=null,S=0,w=0,A=i[u],k=o[u],T=0;T<a;T++){g=d;for(var P=f[w],O=f[w+1],C=f[w+2],E=f[w+3],M=0;M<v;M++)g.r=P,g.g=O,g.b=C,g.a=E,g=g.next;for(var _=0,N=0,R=0,V=0,D=v*P,I=v*O,L=v*C,j=v*E,z=y*P,F=y*O,B=y*C,H=y*E,U=1;U<v;U++){var X=w+((h<U?h:U)<<2),Y=f[X],q=f[X+1],Q=f[X+2],W=f[X+3],G=v-U;z+=(g.r=Y)*G,F+=(g.g=q)*G,B+=(g.b=Q)*G,H+=(g.a=W)*G,_+=Y,N+=q,R+=Q,V+=W,g=g.next}m=d,b=c;for(var $=0;$<n;$++){var Z=H*A>>k;if(f[w+3]=Z,0!==Z){var J=255/Z;f[w]=(z*A>>k)*J,f[w+1]=(F*A>>k)*J,f[w+2]=(B*A>>k)*J}else f[w]=f[w+1]=f[w+2]=0;z-=D,F-=I,B-=L,H-=j,D-=m.r,I-=m.g,L-=m.b,j-=m.a;var K=$+u+1;K=S+(K<h?K:h)<<2,_+=m.r=f[K],N+=m.g=f[K+1],R+=m.b=f[K+2],V+=m.a=f[K+3],z+=_,F+=N,B+=R,H+=V,m=m.next;var tt=b,et=tt.r,rt=tt.g,nt=tt.b,it=tt.a;D+=et,I+=rt,L+=nt,j+=it,_-=et,N-=rt,R-=nt,V-=it,b=b.next,w+=4}S+=n}for(var ot=0;ot<n;ot++){var at=f[w=ot<<2],ut=f[w+1],st=f[w+2],ct=f[w+3],ft=v*at,lt=v*ut,ht=v*st,pt=v*ct,vt=y*at,yt=y*ut,dt=y*st,gt=y*ct;g=d;for(var xt=0;xt<v;xt++)g.r=at,g.g=ut,g.b=st,g.a=ct,g=g.next;for(var mt=n,bt=0,St=0,wt=0,At=0,kt=1;kt<=u;kt++){w=mt+ot<<2;var Tt=v-kt;vt+=(g.r=at=f[w])*Tt,yt+=(g.g=ut=f[w+1])*Tt,dt+=(g.b=st=f[w+2])*Tt,gt+=(g.a=ct=f[w+3])*Tt,At+=at,bt+=ut,St+=st,wt+=ct,g=g.next,kt<p&&(mt+=n)}w=ot,m=d,b=c;for(var Pt=0;Pt<a;Pt++){var Ot=w<<2;f[Ot+3]=ct=gt*A>>k,ct>0?(ct=255/ct,f[Ot]=(vt*A>>k)*ct,f[Ot+1]=(yt*A>>k)*ct,f[Ot+2]=(dt*A>>k)*ct):f[Ot]=f[Ot+1]=f[Ot+2]=0,vt-=ft,yt-=lt,dt-=ht,gt-=pt,ft-=m.r,lt-=m.g,ht-=m.b,pt-=m.a,Ot=ot+((Ot=Pt+v)<p?Ot:p)*n<<2,vt+=At+=m.r=f[Ot],yt+=bt+=m.g=f[Ot+1],dt+=St+=m.b=f[Ot+2],gt+=wt+=m.a=f[Ot+3],m=m.next,ft+=at=b.r,lt+=ut=b.g,ht+=st=b.b,pt+=ct=b.a,At-=at,bt-=ut,St-=st,wt-=ct,b=b.next,w+=n}}return t}(f,0,0,n,u,c),t.getContext("2d").putImageData(f,e,r)}}var s=function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.r=0,this.g=0,this.b=0,this.a=0,this.next=null}}])]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=1.js.map