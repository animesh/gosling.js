!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=234)}([function(t,e,n){"use strict";var r=n(2),i=n(40).f,o=n(142),a=n(1),s=n(42),u=n(16),f=n(13),c=function(t){var e=function(e,n,r){if(this instanceof t){switch(arguments.length){case 0:return new t;case 1:return new t(e);case 2:return new t(e,n)}return new t(e,n,r)}return t.apply(this,arguments)};return e.prototype=t.prototype,e};t.exports=function(t,e){var n,l,h,d,p,g,v,b,y=t.target,m=t.global,w=t.stat,_=t.proto,x=m?r:w?r[y]:(r[y]||{}).prototype,k=m?a:a[y]||(a[y]={}),E=k.prototype;for(h in e)n=!o(m?h:y+(w?".":"#")+h,t.forced)&&x&&f(x,h),p=k[h],n&&(g=t.noTargetGet?(b=i(x,h))&&b.value:x[h]),d=n&&g?g:e[h],n&&typeof p==typeof d||(v=t.bind&&n?s(d,r):t.wrap&&n?c(d):_&&"function"==typeof d?s(Function.call,d):d,(t.sham||d&&d.sham||p&&p.sham)&&u(v,"sham",!0),k[h]=v,_&&(f(a,l=y+"Prototype")||u(a,l,{}),a[l][h]=d,t.real&&E&&!E[h]&&u(E,h,d)))}},function(t,e){t.exports={}},function(t,e,n){(function(e){var n=function(t){return t&&t.Math==Math&&t};t.exports=n("object"==typeof globalThis&&globalThis)||n("object"==typeof window&&window)||n("object"==typeof self&&self)||n("object"==typeof e&&e)||Function("return this")()}).call(this,n(21))},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e,n){var r=n(2),i=n(91),o=n(13),a=n(72),s=n(92),u=n(151),f=i("wks"),c=r.Symbol,l=u?c:c&&c.withoutSetter||a;t.exports=function(t){return o(f,t)||(s&&o(c,t)?f[t]=c[t]:f[t]=l("Symbol."+t)),f[t]}},function(t,e,n){var r=n(1),i=n(13),o=n(79),a=n(17).f;t.exports=function(t){var e=r.Symbol||(r.Symbol={});i(e,t)||a(e,t,{value:o.f(t)})}},function(t,e,n){"use strict";n.d(e,"c",(function(){return d})),n.d(e,"a",(function(){return b})),n.d(e,"d",(function(){return y})),n.d(e,"b",(function(){return m}));var r=function(t,e){return t<e?-1:t>e?1:t>=e?0:NaN};var i,o,a=(1===(i=r).length&&(o=i,i=function(t,e){return r(o(t),e)}),{left:function(t,e,n,r){for(null==n&&(n=0),null==r&&(r=t.length);n<r;){var o=n+r>>>1;i(t[o],e)<0?n=o+1:r=o}return n},right:function(t,e,n,r){for(null==n&&(n=0),null==r&&(r=t.length);n<r;){var o=n+r>>>1;i(t[o],e)>0?r=o:n=o+1}return n}}),s=a.right,u=n(498),f=n(66),c=n(497),l=function(t){return+t},h=[0,1];function d(t){return t}function p(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:(n=isNaN(e)?NaN:.5,function(){return n});var n}function g(t,e,n){var r=t[0],i=t[1],o=e[0],a=e[1];return i<r?(r=p(i,r),o=n(a,o)):(r=p(r,i),o=n(o,a)),function(t){return o(r(t))}}function v(t,e,n){var r=Math.min(t.length,e.length)-1,i=new Array(r),o=new Array(r),a=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++a<r;)i[a]=p(t[a],t[a+1]),o[a]=n(e[a],e[a+1]);return function(e){var n=s(t,e,1,r)-1;return o[n](i[n](e))}}function b(t,e){return e.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function y(){var t,e,n,r,i,o,a=h,s=h,p=u.a,b=d;function y(){var t,e,n,u=Math.min(a.length,s.length);return b!==d&&(t=a[0],e=a[u-1],t>e&&(n=t,t=e,e=n),b=function(n){return Math.max(t,Math.min(e,n))}),r=u>2?v:g,i=o=null,m}function m(e){return isNaN(e=+e)?n:(i||(i=r(a.map(t),s,p)))(t(b(e)))}return m.invert=function(n){return b(e((o||(o=r(s,a.map(t),f.a)))(n)))},m.domain=function(t){return arguments.length?(a=Array.from(t,l),y()):a.slice()},m.range=function(t){return arguments.length?(s=Array.from(t),y()):s.slice()},m.rangeRound=function(t){return s=Array.from(t),p=c.a,y()},m.clamp=function(t){return arguments.length?(b=!!t||d,y()):b!==d},m.interpolate=function(t){return arguments.length?(p=t,y()):p},m.unknown=function(t){return arguments.length?(n=t,m):n},function(n,r){return t=n,e=r,y()}}function m(){return y()(d,d)}},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e,n){"use strict";function r(t,e){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(e).domain(t)}return this}function i(t,e){switch(arguments.length){case 0:break;case 1:"function"==typeof t?this.interpolator(t):this.range(t);break;default:this.domain(t),"function"==typeof e?this.interpolator(e):this.range(e)}return this}n.d(e,"b",(function(){return r})),n.d(e,"a",(function(){return i}))},function(t,e,n){"use strict";(function(t){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
var r=n(235),i=n(236),o=n(137);function a(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function s(t,e){if(a()<e)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=u.prototype:(null===t&&(t=new u(e)),t.length=e),t}function u(t,e,n){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(t,e,n);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return l(this,t)}return f(this,t,e,n)}function f(t,e,n,r){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,n,r){if(e.byteLength,n<0||e.byteLength<n)throw new RangeError("'offset' is out of bounds");if(e.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");e=void 0===n&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,n):new Uint8Array(e,n,r);u.TYPED_ARRAY_SUPPORT?(t=e).__proto__=u.prototype:t=h(t,e);return t}(t,e,n,r):"string"==typeof e?function(t,e,n){"string"==typeof n&&""!==n||(n="utf8");if(!u.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|p(e,n),i=(t=s(t,r)).write(e,n);i!==r&&(t=t.slice(0,i));return t}(t,e,n):function(t,e){if(u.isBuffer(e)){var n=0|d(e.length);return 0===(t=s(t,n)).length||e.copy(t,0,0,n),t}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||(r=e.length)!=r?s(t,0):h(t,e);if("Buffer"===e.type&&o(e.data))return h(t,e.data)}var r;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function c(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function l(t,e){if(c(e),t=s(t,e<0?0:0|d(e)),!u.TYPED_ARRAY_SUPPORT)for(var n=0;n<e;++n)t[n]=0;return t}function h(t,e){var n=e.length<0?0:0|d(e.length);t=s(t,n);for(var r=0;r<n;r+=1)t[r]=255&e[r];return t}function d(t){if(t>=a())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+a().toString(16)+" bytes");return 0|t}function p(t,e){if(u.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var n=t.length;if(0===n)return 0;for(var r=!1;;)switch(e){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return U(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return D(t).length;default:if(r)return U(t).length;e=(""+e).toLowerCase(),r=!0}}function g(t,e,n){var r=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return M(this,e,n);case"utf8":case"utf-8":return A(this,e,n);case"ascii":return O(this,e,n);case"latin1":case"binary":return T(this,e,n);case"base64":return S(this,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return R(this,e,n);default:if(r)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),r=!0}}function v(t,e,n){var r=t[e];t[e]=t[n],t[n]=r}function b(t,e,n,r,i){if(0===t.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=i?0:t.length-1),n<0&&(n=t.length+n),n>=t.length){if(i)return-1;n=t.length-1}else if(n<0){if(!i)return-1;n=0}if("string"==typeof e&&(e=u.from(e,r)),u.isBuffer(e))return 0===e.length?-1:y(t,e,n,r,i);if("number"==typeof e)return e&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(t,e,n):Uint8Array.prototype.lastIndexOf.call(t,e,n):y(t,[e],n,r,i);throw new TypeError("val must be string, number or Buffer")}function y(t,e,n,r,i){var o,a=1,s=t.length,u=e.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(t.length<2||e.length<2)return-1;a=2,s/=2,u/=2,n/=2}function f(t,e){return 1===a?t[e]:t.readUInt16BE(e*a)}if(i){var c=-1;for(o=n;o<s;o++)if(f(t,o)===f(e,-1===c?0:o-c)){if(-1===c&&(c=o),o-c+1===u)return c*a}else-1!==c&&(o-=o-c),c=-1}else for(n+u>s&&(n=s-u),o=n;o>=0;o--){for(var l=!0,h=0;h<u;h++)if(f(t,o+h)!==f(e,h)){l=!1;break}if(l)return o}return-1}function m(t,e,n,r){n=Number(n)||0;var i=t.length-n;r?(r=Number(r))>i&&(r=i):r=i;var o=e.length;if(o%2!=0)throw new TypeError("Invalid hex string");r>o/2&&(r=o/2);for(var a=0;a<r;++a){var s=parseInt(e.substr(2*a,2),16);if(isNaN(s))return a;t[n+a]=s}return a}function w(t,e,n,r){return Z(U(e,t.length-n),t,n,r)}function _(t,e,n,r){return Z(function(t){for(var e=[],n=0;n<t.length;++n)e.push(255&t.charCodeAt(n));return e}(e),t,n,r)}function x(t,e,n,r){return _(t,e,n,r)}function k(t,e,n,r){return Z(D(e),t,n,r)}function E(t,e,n,r){return Z(function(t,e){for(var n,r,i,o=[],a=0;a<t.length&&!((e-=2)<0);++a)n=t.charCodeAt(a),r=n>>8,i=n%256,o.push(i),o.push(r);return o}(e,t.length-n),t,n,r)}function S(t,e,n){return 0===e&&n===t.length?r.fromByteArray(t):r.fromByteArray(t.slice(e,n))}function A(t,e,n){n=Math.min(t.length,n);for(var r=[],i=e;i<n;){var o,a,s,u,f=t[i],c=null,l=f>239?4:f>223?3:f>191?2:1;if(i+l<=n)switch(l){case 1:f<128&&(c=f);break;case 2:128==(192&(o=t[i+1]))&&(u=(31&f)<<6|63&o)>127&&(c=u);break;case 3:o=t[i+1],a=t[i+2],128==(192&o)&&128==(192&a)&&(u=(15&f)<<12|(63&o)<<6|63&a)>2047&&(u<55296||u>57343)&&(c=u);break;case 4:o=t[i+1],a=t[i+2],s=t[i+3],128==(192&o)&&128==(192&a)&&128==(192&s)&&(u=(15&f)<<18|(63&o)<<12|(63&a)<<6|63&s)>65535&&u<1114112&&(c=u)}null===c?(c=65533,l=1):c>65535&&(c-=65536,r.push(c>>>10&1023|55296),c=56320|1023&c),r.push(c),i+=l}return function(t){var e=t.length;if(e<=4096)return String.fromCharCode.apply(String,t);var n="",r=0;for(;r<e;)n+=String.fromCharCode.apply(String,t.slice(r,r+=4096));return n}(r)}e.Buffer=u,e.SlowBuffer=function(t){+t!=t&&(t=0);return u.alloc(+t)},e.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}(),e.kMaxLength=a(),u.poolSize=8192,u._augment=function(t){return t.__proto__=u.prototype,t},u.from=function(t,e,n){return f(null,t,e,n)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(t,e,n){return function(t,e,n,r){return c(e),e<=0?s(t,e):void 0!==n?"string"==typeof r?s(t,e).fill(n,r):s(t,e).fill(n):s(t,e)}(null,t,e,n)},u.allocUnsafe=function(t){return l(null,t)},u.allocUnsafeSlow=function(t){return l(null,t)},u.isBuffer=function(t){return!(null==t||!t._isBuffer)},u.compare=function(t,e){if(!u.isBuffer(t)||!u.isBuffer(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var n=t.length,r=e.length,i=0,o=Math.min(n,r);i<o;++i)if(t[i]!==e[i]){n=t[i],r=e[i];break}return n<r?-1:r<n?1:0},u.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(t,e){if(!o(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return u.alloc(0);var n;if(void 0===e)for(e=0,n=0;n<t.length;++n)e+=t[n].length;var r=u.allocUnsafe(e),i=0;for(n=0;n<t.length;++n){var a=t[n];if(!u.isBuffer(a))throw new TypeError('"list" argument must be an Array of Buffers');a.copy(r,i),i+=a.length}return r},u.byteLength=p,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)v(this,e,e+1);return this},u.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)v(this,e,e+3),v(this,e+1,e+2);return this},u.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)v(this,e,e+7),v(this,e+1,e+6),v(this,e+2,e+5),v(this,e+3,e+4);return this},u.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?A(this,0,t):g.apply(this,arguments)},u.prototype.equals=function(t){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===u.compare(this,t)},u.prototype.inspect=function(){var t="",n=e.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(t+=" ... ")),"<Buffer "+t+">"},u.prototype.compare=function(t,e,n,r,i){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===n&&(n=t?t.length:0),void 0===r&&(r=0),void 0===i&&(i=this.length),e<0||n>t.length||r<0||i>this.length)throw new RangeError("out of range index");if(r>=i&&e>=n)return 0;if(r>=i)return-1;if(e>=n)return 1;if(this===t)return 0;for(var o=(i>>>=0)-(r>>>=0),a=(n>>>=0)-(e>>>=0),s=Math.min(o,a),f=this.slice(r,i),c=t.slice(e,n),l=0;l<s;++l)if(f[l]!==c[l]){o=f[l],a=c[l];break}return o<a?-1:a<o?1:0},u.prototype.includes=function(t,e,n){return-1!==this.indexOf(t,e,n)},u.prototype.indexOf=function(t,e,n){return b(this,t,e,n,!0)},u.prototype.lastIndexOf=function(t,e,n){return b(this,t,e,n,!1)},u.prototype.write=function(t,e,n,r){if(void 0===e)r="utf8",n=this.length,e=0;else if(void 0===n&&"string"==typeof e)r=e,n=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var i=this.length-e;if((void 0===n||n>i)&&(n=i),t.length>0&&(n<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var o=!1;;)switch(r){case"hex":return m(this,t,e,n);case"utf8":case"utf-8":return w(this,t,e,n);case"ascii":return _(this,t,e,n);case"latin1":case"binary":return x(this,t,e,n);case"base64":return k(this,t,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return E(this,t,e,n);default:if(o)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),o=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function O(t,e,n){var r="";n=Math.min(t.length,n);for(var i=e;i<n;++i)r+=String.fromCharCode(127&t[i]);return r}function T(t,e,n){var r="";n=Math.min(t.length,n);for(var i=e;i<n;++i)r+=String.fromCharCode(t[i]);return r}function M(t,e,n){var r=t.length;(!e||e<0)&&(e=0),(!n||n<0||n>r)&&(n=r);for(var i="",o=e;o<n;++o)i+=F(t[o]);return i}function R(t,e,n){for(var r=t.slice(e,n),i="",o=0;o<r.length;o+=2)i+=String.fromCharCode(r[o]+256*r[o+1]);return i}function j(t,e,n){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>n)throw new RangeError("Trying to access beyond buffer length")}function L(t,e,n,r,i,o){if(!u.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>i||e<o)throw new RangeError('"value" argument is out of bounds');if(n+r>t.length)throw new RangeError("Index out of range")}function P(t,e,n,r){e<0&&(e=65535+e+1);for(var i=0,o=Math.min(t.length-n,2);i<o;++i)t[n+i]=(e&255<<8*(r?i:1-i))>>>8*(r?i:1-i)}function I(t,e,n,r){e<0&&(e=4294967295+e+1);for(var i=0,o=Math.min(t.length-n,4);i<o;++i)t[n+i]=e>>>8*(r?i:3-i)&255}function N(t,e,n,r,i,o){if(n+r>t.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function C(t,e,n,r,o){return o||N(t,0,n,4),i.write(t,e,n,r,23,4),n+4}function B(t,e,n,r,o){return o||N(t,0,n,8),i.write(t,e,n,r,52,8),n+8}u.prototype.slice=function(t,e){var n,r=this.length;if((t=~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),(e=void 0===e?r:~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),e<t&&(e=t),u.TYPED_ARRAY_SUPPORT)(n=this.subarray(t,e)).__proto__=u.prototype;else{var i=e-t;n=new u(i,void 0);for(var o=0;o<i;++o)n[o]=this[o+t]}return n},u.prototype.readUIntLE=function(t,e,n){t|=0,e|=0,n||j(t,e,this.length);for(var r=this[t],i=1,o=0;++o<e&&(i*=256);)r+=this[t+o]*i;return r},u.prototype.readUIntBE=function(t,e,n){t|=0,e|=0,n||j(t,e,this.length);for(var r=this[t+--e],i=1;e>0&&(i*=256);)r+=this[t+--e]*i;return r},u.prototype.readUInt8=function(t,e){return e||j(t,1,this.length),this[t]},u.prototype.readUInt16LE=function(t,e){return e||j(t,2,this.length),this[t]|this[t+1]<<8},u.prototype.readUInt16BE=function(t,e){return e||j(t,2,this.length),this[t]<<8|this[t+1]},u.prototype.readUInt32LE=function(t,e){return e||j(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},u.prototype.readUInt32BE=function(t,e){return e||j(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},u.prototype.readIntLE=function(t,e,n){t|=0,e|=0,n||j(t,e,this.length);for(var r=this[t],i=1,o=0;++o<e&&(i*=256);)r+=this[t+o]*i;return r>=(i*=128)&&(r-=Math.pow(2,8*e)),r},u.prototype.readIntBE=function(t,e,n){t|=0,e|=0,n||j(t,e,this.length);for(var r=e,i=1,o=this[t+--r];r>0&&(i*=256);)o+=this[t+--r]*i;return o>=(i*=128)&&(o-=Math.pow(2,8*e)),o},u.prototype.readInt8=function(t,e){return e||j(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},u.prototype.readInt16LE=function(t,e){e||j(t,2,this.length);var n=this[t]|this[t+1]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt16BE=function(t,e){e||j(t,2,this.length);var n=this[t+1]|this[t]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt32LE=function(t,e){return e||j(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},u.prototype.readInt32BE=function(t,e){return e||j(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},u.prototype.readFloatLE=function(t,e){return e||j(t,4,this.length),i.read(this,t,!0,23,4)},u.prototype.readFloatBE=function(t,e){return e||j(t,4,this.length),i.read(this,t,!1,23,4)},u.prototype.readDoubleLE=function(t,e){return e||j(t,8,this.length),i.read(this,t,!0,52,8)},u.prototype.readDoubleBE=function(t,e){return e||j(t,8,this.length),i.read(this,t,!1,52,8)},u.prototype.writeUIntLE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||L(this,t,e,n,Math.pow(2,8*n)-1,0);var i=1,o=0;for(this[e]=255&t;++o<n&&(i*=256);)this[e+o]=t/i&255;return e+n},u.prototype.writeUIntBE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||L(this,t,e,n,Math.pow(2,8*n)-1,0);var i=n-1,o=1;for(this[e+i]=255&t;--i>=0&&(o*=256);)this[e+i]=t/o&255;return e+n},u.prototype.writeUInt8=function(t,e,n){return t=+t,e|=0,n||L(this,t,e,1,255,0),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},u.prototype.writeUInt16LE=function(t,e,n){return t=+t,e|=0,n||L(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):P(this,t,e,!0),e+2},u.prototype.writeUInt16BE=function(t,e,n){return t=+t,e|=0,n||L(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):P(this,t,e,!1),e+2},u.prototype.writeUInt32LE=function(t,e,n){return t=+t,e|=0,n||L(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):I(this,t,e,!0),e+4},u.prototype.writeUInt32BE=function(t,e,n){return t=+t,e|=0,n||L(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):I(this,t,e,!1),e+4},u.prototype.writeIntLE=function(t,e,n,r){if(t=+t,e|=0,!r){var i=Math.pow(2,8*n-1);L(this,t,e,n,i-1,-i)}var o=0,a=1,s=0;for(this[e]=255&t;++o<n&&(a*=256);)t<0&&0===s&&0!==this[e+o-1]&&(s=1),this[e+o]=(t/a>>0)-s&255;return e+n},u.prototype.writeIntBE=function(t,e,n,r){if(t=+t,e|=0,!r){var i=Math.pow(2,8*n-1);L(this,t,e,n,i-1,-i)}var o=n-1,a=1,s=0;for(this[e+o]=255&t;--o>=0&&(a*=256);)t<0&&0===s&&0!==this[e+o+1]&&(s=1),this[e+o]=(t/a>>0)-s&255;return e+n},u.prototype.writeInt8=function(t,e,n){return t=+t,e|=0,n||L(this,t,e,1,127,-128),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},u.prototype.writeInt16LE=function(t,e,n){return t=+t,e|=0,n||L(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):P(this,t,e,!0),e+2},u.prototype.writeInt16BE=function(t,e,n){return t=+t,e|=0,n||L(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):P(this,t,e,!1),e+2},u.prototype.writeInt32LE=function(t,e,n){return t=+t,e|=0,n||L(this,t,e,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):I(this,t,e,!0),e+4},u.prototype.writeInt32BE=function(t,e,n){return t=+t,e|=0,n||L(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):I(this,t,e,!1),e+4},u.prototype.writeFloatLE=function(t,e,n){return C(this,t,e,!0,n)},u.prototype.writeFloatBE=function(t,e,n){return C(this,t,e,!1,n)},u.prototype.writeDoubleLE=function(t,e,n){return B(this,t,e,!0,n)},u.prototype.writeDoubleBE=function(t,e,n){return B(this,t,e,!1,n)},u.prototype.copy=function(t,e,n,r){if(n||(n=0),r||0===r||(r=this.length),e>=t.length&&(e=t.length),e||(e=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),t.length-e<r-n&&(r=t.length-e+n);var i,o=r-n;if(this===t&&n<e&&e<r)for(i=o-1;i>=0;--i)t[i+e]=this[i+n];else if(o<1e3||!u.TYPED_ARRAY_SUPPORT)for(i=0;i<o;++i)t[i+e]=this[i+n];else Uint8Array.prototype.set.call(t,this.subarray(n,n+o),e);return o},u.prototype.fill=function(t,e,n,r){if("string"==typeof t){if("string"==typeof e?(r=e,e=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===t.length){var i=t.charCodeAt(0);i<256&&(t=i)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!u.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<n)throw new RangeError("Out of range index");if(n<=e)return this;var o;if(e>>>=0,n=void 0===n?this.length:n>>>0,t||(t=0),"number"==typeof t)for(o=e;o<n;++o)this[o]=t;else{var a=u.isBuffer(t)?t:U(new u(t,r).toString()),s=a.length;for(o=0;o<n-e;++o)this[o+e]=a[o%s]}return this};var z=/[^+\/0-9A-Za-z-_]/g;function F(t){return t<16?"0"+t.toString(16):t.toString(16)}function U(t,e){var n;e=e||1/0;for(var r=t.length,i=null,o=[],a=0;a<r;++a){if((n=t.charCodeAt(a))>55295&&n<57344){if(!i){if(n>56319){(e-=3)>-1&&o.push(239,191,189);continue}if(a+1===r){(e-=3)>-1&&o.push(239,191,189);continue}i=n;continue}if(n<56320){(e-=3)>-1&&o.push(239,191,189),i=n;continue}n=65536+(i-55296<<10|n-56320)}else i&&(e-=3)>-1&&o.push(239,191,189);if(i=null,n<128){if((e-=1)<0)break;o.push(n)}else if(n<2048){if((e-=2)<0)break;o.push(n>>6|192,63&n|128)}else if(n<65536){if((e-=3)<0)break;o.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;o.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return o}function D(t){return r.toByteArray(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(z,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function Z(t,e,n,r){for(var i=0;i<r&&!(i+n>=e.length||i>=t.length);++i)e[i+n]=t[i];return i}}).call(this,n(21))},function(t,e,n){var r=n(3);t.exports=!r((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(t,e,n){var r=n(7);t.exports=function(t){if(!r(t))throw TypeError(String(t)+" is not an object");return t}},function(t,e,n){t.exports=n(243)},function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(String(t)+" is not a function");return t}},function(t,e){t.exports=function(t){return t&&t.__esModule?t:{default:t}},t.exports.default=t.exports,t.exports.__esModule=!0},function(t,e,n){var r=n(10),i=n(17),o=n(41);t.exports=r?function(t,e,n){return i.f(t,e,o(1,n))}:function(t,e,n){return t[e]=n,t}},function(t,e,n){var r=n(10),i=n(141),o=n(11),a=n(70),s=Object.defineProperty;e.f=r?s:function(t,e,n){if(o(t),e=a(e,!0),o(n),i)try{return s(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported");return"value"in n&&(t[e]=n.value),t}},function(t,e,n){var r=n(54);t.exports=function(t){return Object(r(t))}},function(t,e,n){var r=n(1);t.exports=function(t){return r[t+"Prototype"]}},function(t,e,n){"use strict";var r=n(39);e.a=function(t){return(t=Object(r.a)(Math.abs(t)))?t[1]:NaN}},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e){var n,r,i=t.exports={};function o(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(t){if(n===setTimeout)return setTimeout(t,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(t){n=o}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(t){r=a}}();var u,f=[],c=!1,l=-1;function h(){c&&u&&(c=!1,u.length?f=u.concat(f):l=-1,f.length&&d())}function d(){if(!c){var t=s(h);c=!0;for(var e=f.length;e;){for(u=f,f=[];++l<e;)u&&u[l].run();l=-1,e=f.length}u=null,c=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function p(t,e){this.fun=t,this.array=e}function g(){}i.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];f.push(new p(t,e)),1!==f.length||c||s(d)},p.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=g,i.addListener=g,i.once=g,i.off=g,i.removeListener=g,i.removeAllListeners=g,i.emit=g,i.prependListener=g,i.prependOnceListener=g,i.listeners=function(t){return[]},i.binding=function(t){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(t){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(t,e,n){var r=n(69),i=n(54);t.exports=function(t){return r(i(t))}},function(t,e){t.exports=!0},function(t,e,n){var r=n(1),i=n(2),o=function(t){return"function"==typeof t?t:void 0};t.exports=function(t,e){return arguments.length<2?o(r[t])||o(i[t]):r[t]&&r[t][e]||i[t]&&i[t][e]}},function(t,e,n){"use strict";n.d(e,"b",(function(){return c})),n.d(e,"a",(function(){return l}));var r=n(496),i=n(6),o=n(8),a=n(136),s=n(20),u=n(499),f=function(t,e,n,i){var o,f=Object(r.c)(t,e,n);switch((i=Object(a.a)(null==i?",f":i)).type){case"s":var c=Math.max(Math.abs(t),Math.abs(e));return null!=i.precision||isNaN(o=function(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(Object(s.a)(e)/3)))-Object(s.a)(Math.abs(t)))}(f,c))||(i.precision=o),Object(u.b)(i,c);case"":case"e":case"g":case"p":case"r":null!=i.precision||isNaN(o=function(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,Object(s.a)(e)-Object(s.a)(t))+1}(f,Math.max(Math.abs(t),Math.abs(e))))||(i.precision=o-("e"===i.type));break;case"f":case"%":null!=i.precision||isNaN(o=function(t){return Math.max(0,-Object(s.a)(Math.abs(t)))}(f))||(i.precision=o-2*("%"===i.type))}return Object(u.a)(i)};function c(t){var e=t.domain;return t.ticks=function(t){var n=e();return Object(r.a)(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){var r=e();return f(r[0],r[r.length-1],null==t?10:t,n)},t.nice=function(n){null==n&&(n=10);var i,o=e(),a=0,s=o.length-1,u=o[a],f=o[s];return f<u&&(i=u,u=f,f=i,i=a,a=s,s=i),(i=Object(r.b)(u,f,n))>0?(u=Math.floor(u/i)*i,f=Math.ceil(f/i)*i,i=Object(r.b)(u,f,n)):i<0&&(u=Math.ceil(u*i)/i,f=Math.floor(f*i)/i,i=Object(r.b)(u,f,n)),i>0?(o[a]=Math.floor(u/i)*i,o[s]=Math.ceil(f/i)*i,e(o)):i<0&&(o[a]=Math.ceil(u*i)/i,o[s]=Math.floor(f*i)/i,e(o)),t},t}function l(){var t=Object(i.b)();return t.copy=function(){return Object(i.a)(t,l())},o.b.apply(t,arguments),c(t)}},function(t,e,n){var r,i,o,a=n(145),s=n(2),u=n(7),f=n(16),c=n(13),l=n(71),h=n(55),d=s.WeakMap;if(a){var p=new d,g=p.get,v=p.has,b=p.set;r=function(t,e){return b.call(p,t,e),e},i=function(t){return g.call(p,t)||{}},o=function(t){return v.call(p,t)}}else{var y=l("state");h[y]=!0,r=function(t,e){return f(t,y,e),e},i=function(t){return c(t,y)?t[y]:{}},o=function(t){return c(t,y)}}t.exports={set:r,get:i,has:o,enforce:function(t){return o(t)?i(t):r(t,{})},getterFor:function(t){return function(e){var n;if(!u(e)||(n=i(e)).type!==t)throw TypeError("Incompatible receiver, "+t+" required");return n}}}},function(t,e,n){var r=n(93),i=Math.min;t.exports=function(t){return t>0?i(r(t),9007199254740991):0}},function(t,e,n){var r=n(107);t.exports=function(t,e,n){return e in t?r(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t},t.exports.default=t.exports,t.exports.__esModule=!0},function(t,e){t.exports=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},t.exports.default=t.exports,t.exports.__esModule=!0},function(t,e,n){var r=n(107);function i(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),r(t,i.key,i)}}t.exports=function(t,e,n){return e&&i(t.prototype,e),n&&i(t,n),t},t.exports.default=t.exports,t.exports.__esModule=!0},function(t,e){t.exports=function(t){return t&&t.__esModule?t:{default:t}}},function(t,e,n){"use strict";var r="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Int32Array;function i(t,e){return Object.prototype.hasOwnProperty.call(t,e)}e.assign=function(t){for(var e=Array.prototype.slice.call(arguments,1);e.length;){var n=e.shift();if(n){if("object"!=typeof n)throw new TypeError(n+"must be non-object");for(var r in n)i(n,r)&&(t[r]=n[r])}}return t},e.shrinkBuf=function(t,e){return t.length===e?t:t.subarray?t.subarray(0,e):(t.length=e,t)};var o={arraySet:function(t,e,n,r,i){if(e.subarray&&t.subarray)t.set(e.subarray(n,n+r),i);else for(var o=0;o<r;o++)t[i+o]=e[n+o]},flattenChunks:function(t){var e,n,r,i,o,a;for(r=0,e=0,n=t.length;e<n;e++)r+=t[e].length;for(a=new Uint8Array(r),i=0,e=0,n=t.length;e<n;e++)o=t[e],a.set(o,i),i+=o.length;return a}},a={arraySet:function(t,e,n,r,i){for(var o=0;o<r;o++)t[i+o]=e[n+o]},flattenChunks:function(t){return[].concat.apply([],t)}};e.setTyped=function(t){t?(e.Buf8=Uint8Array,e.Buf16=Uint16Array,e.Buf32=Int32Array,e.assign(e,o)):(e.Buf8=Array,e.Buf16=Array,e.Buf32=Array,e.assign(e,a))},e.setTyped(r)},function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},function(t,e,n){var r=n(95),i=n(17).f,o=n(16),a=n(13),s=n(250),u=n(4)("toStringTag");t.exports=function(t,e,n,f){if(t){var c=n?t:t.prototype;a(c,u)||i(c,u,{configurable:!0,value:e}),f&&!r&&o(c,"toString",s)}}},function(t,e,n){t.exports=n(284)},function(t,e,n){var r=n(11),i=n(169),o=n(28),a=n(42),s=n(76),u=n(168),f=function(t,e){this.stopped=t,this.result=e};(t.exports=function(t,e,n,c,l){var h,d,p,g,v,b,y,m=a(e,n,c?2:1);if(l)h=t;else{if("function"!=typeof(d=s(t)))throw TypeError("Target is not iterable");if(i(d)){for(p=0,g=o(t.length);g>p;p++)if((v=c?m(r(y=t[p])[0],y[1]):m(t[p]))&&v instanceof f)return v;return new f(!1)}h=d.call(t)}for(b=h.next;!(y=b.call(h)).done;)if("object"==typeof(v=u(h,m,y.value,c))&&v&&v instanceof f)return v;return new f(!1)}).stop=function(t){return new f(!0,t)}},function(t,e,n){"use strict";var r=n(86),i=Object.keys||function(t){var e=[];for(var n in t)e.push(n);return e};t.exports=l;var o=Object.create(n(65));o.inherits=n(53);var a=n(199),s=n(126);o.inherits(l,a);for(var u=i(s.prototype),f=0;f<u.length;f++){var c=u[f];l.prototype[c]||(l.prototype[c]=s.prototype[c])}function l(t){if(!(this instanceof l))return new l(t);a.call(this,t),s.call(this,t),t&&!1===t.readable&&(this.readable=!1),t&&!1===t.writable&&(this.writable=!1),this.allowHalfOpen=!0,t&&!1===t.allowHalfOpen&&(this.allowHalfOpen=!1),this.once("end",h)}function h(){this.allowHalfOpen||this._writableState.ended||r.nextTick(d,this)}function d(t){t.end()}Object.defineProperty(l.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(l.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed&&this._writableState.destroyed)},set:function(t){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=t,this._writableState.destroyed=t)}}),l.prototype._destroy=function(t,e){this.push(null),this.end(),r.nextTick(e,t)}},function(t,e,n){"use strict";e.a=function(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,r=t.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+t.slice(n+1)]}},function(t,e,n){var r=n(10),i=n(89),o=n(41),a=n(23),s=n(70),u=n(13),f=n(141),c=Object.getOwnPropertyDescriptor;e.f=r?c:function(t,e){if(t=a(t),e=s(e,!0),f)try{return c(t,e)}catch(t){}if(u(t,e))return o(!i.f.call(t,e),t[e])}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e,n){var r=n(14);t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 0:return function(){return t.call(e)};case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,i){return t.call(e,n,r,i)}}return function(){return t.apply(e,arguments)}}},function(t,e,n){n(246);var r=n(252),i=n(2),o=n(75),a=n(16),s=n(44),u=n(4)("toStringTag");for(var f in r){var c=i[f],l=c&&c.prototype;l&&o(l)!==u&&a(l,u,f),s[f]=s.Array}},function(t,e){t.exports={}},function(t,e,n){var r=n(42),i=n(69),o=n(18),a=n(28),s=n(162),u=[].push,f=function(t){var e=1==t,n=2==t,f=3==t,c=4==t,l=6==t,h=5==t||l;return function(d,p,g,v){for(var b,y,m=o(d),w=i(m),_=r(p,g,3),x=a(w.length),k=0,E=v||s,S=e?E(d,x):n?E(d,0):void 0;x>k;k++)if((h||k in w)&&(y=_(b=w[k],k,m),t))if(e)S[k]=y;else if(y)switch(t){case 3:return!0;case 5:return b;case 6:return k;case 2:u.call(S,b)}else if(c)return!1;return l?-1:f||c?c:S}};t.exports={forEach:f(0),map:f(1),filter:f(2),some:f(3),every:f(4),find:f(5),findIndex:f(6)}},function(t,e,n){var r=n(10),i=n(3),o=n(13),a=Object.defineProperty,s={},u=function(t){throw t};t.exports=function(t,e){if(o(s,t))return s[t];e||(e={});var n=[][t],f=!!o(e,"ACCESSORS")&&e.ACCESSORS,c=o(e,0)?e[0]:u,l=o(e,1)?e[1]:void 0;return s[t]=!!n&&!i((function(){if(f&&!r)return!0;var t={length:-1};f?a(t,1,{enumerable:!0,get:u}):t[1]=1,n.call(t,c,l)}))}},function(t,e,n){t.exports=n(304)},function(t,e,n){t.exports=n(108)},function(t,e,n){var r=n(109);function i(t,e,n,i,o,a,s){try{var u=t[a](s),f=u.value}catch(t){return void n(t)}u.done?e(f):r.resolve(f).then(i,o)}t.exports=function(t){return function(){var e=this,n=arguments;return new r((function(r,o){var a=t.apply(e,n);function s(t){i(a,r,o,s,u,"next",t)}function u(t){i(a,r,o,s,u,"throw",t)}s(void 0)}))}},t.exports.default=t.exports,t.exports.__esModule=!0},function(t,e,n){t.exports=n(346)},function(t,e){t.exports=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}},function(t,e){function n(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}t.exports=function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}},function(t,e){"function"==typeof Object.create?t.exports=function(t,e){e&&(t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}))}:t.exports=function(t,e){if(e){t.super_=e;var n=function(){};n.prototype=e.prototype,t.prototype=new n,t.prototype.constructor=t}}},function(t,e){t.exports=function(t){if(null==t)throw TypeError("Can't call method on "+t);return t}},function(t,e){t.exports={}},function(t,e,n){var r,i=n(11),o=n(152),a=n(94),s=n(55),u=n(156),f=n(90),c=n(71),l=c("IE_PROTO"),h=function(){},d=function(t){return"<script>"+t+"<\/script>"},p=function(){try{r=document.domain&&new ActiveXObject("htmlfile")}catch(t){}var t,e;p=r?function(t){t.write(d("")),t.close();var e=t.parentWindow.Object;return t=null,e}(r):((e=f("iframe")).style.display="none",u.appendChild(e),e.src=String("javascript:"),(t=e.contentWindow.document).open(),t.write(d("document.F=Object")),t.close(),t.F);for(var n=a.length;n--;)delete p.prototype[a[n]];return p()};s[l]=!0,t.exports=Object.create||function(t,e){var n;return null!==t?(h.prototype=i(t),n=new h,h.prototype=null,n[l]=t):n=p(),void 0===e?n:o(n,e)}},function(t,e,n){var r=n(16);t.exports=function(t,e,n,i){i&&i.enumerable?t[e]=n:r(t,e,n)}},function(t,e,n){"use strict";var r=n(253).charAt,i=n(27),o=n(148),a=i.set,s=i.getterFor("String Iterator");o(String,"String",(function(t){a(this,{type:"String Iterator",string:String(t),index:0})}),(function(){var t,e=s(this),n=e.string,i=e.index;return i>=n.length?{value:void 0,done:!0}:(t=r(n,i),e.index+=t.length,{value:t,done:!1})}))},function(t,e,n){var r=n(34);t.exports=Array.isArray||function(t){return"Array"==r(t)}},function(t,e,n){t.exports=n(257)},function(t,e,n){t.exports=n(291)},function(t,e,n){t.exports=n(317)},function(t,e,n){"use strict";var r=n(14),i=function(t){var e,n;this.promise=new t((function(t,r){if(void 0!==e||void 0!==n)throw TypeError("Bad Promise constructor");e=t,n=r})),this.resolve=r(e),this.reject=r(n)};t.exports.f=function(t){return new i(t)}},function(t,e,n){t.exports=n(331)},function(t,e,n){(function(t){function n(t){return Object.prototype.toString.call(t)}e.isArray=function(t){return Array.isArray?Array.isArray(t):"[object Array]"===n(t)},e.isBoolean=function(t){return"boolean"==typeof t},e.isNull=function(t){return null===t},e.isNullOrUndefined=function(t){return null==t},e.isNumber=function(t){return"number"==typeof t},e.isString=function(t){return"string"==typeof t},e.isSymbol=function(t){return"symbol"==typeof t},e.isUndefined=function(t){return void 0===t},e.isRegExp=function(t){return"[object RegExp]"===n(t)},e.isObject=function(t){return"object"==typeof t&&null!==t},e.isDate=function(t){return"[object Date]"===n(t)},e.isError=function(t){return"[object Error]"===n(t)||t instanceof Error},e.isFunction=function(t){return"function"==typeof t},e.isPrimitive=function(t){return null===t||"boolean"==typeof t||"number"==typeof t||"string"==typeof t||"symbol"==typeof t||void 0===t},e.isBuffer=t.isBuffer}).call(this,n(9).Buffer)},function(t,e,n){"use strict";e.a=function(t,e){return t=+t,e=+e,function(n){return t*(1-n)+e*n}}},function(t,e,n){t.exports=n(237)},,function(t,e,n){var r=n(3),i=n(34),o="".split;t.exports=r((function(){return!Object("z").propertyIsEnumerable(0)}))?function(t){return"String"==i(t)?o.call(t,""):Object(t)}:Object},function(t,e,n){var r=n(7);t.exports=function(t,e){if(!r(t))return t;var n,i;if(e&&"function"==typeof(n=t.toString)&&!r(i=n.call(t)))return i;if("function"==typeof(n=t.valueOf)&&!r(i=n.call(t)))return i;if(!e&&"function"==typeof(n=t.toString)&&!r(i=n.call(t)))return i;throw TypeError("Can't convert object to primitive value")}},function(t,e,n){var r=n(91),i=n(72),o=r("keys");t.exports=function(t){return o[t]||(o[t]=i(t))}},function(t,e){var n=0,r=Math.random();t.exports=function(t){return"Symbol("+String(void 0===t?"":t)+")_"+(++n+r).toString(36)}},function(t,e,n){var r=n(13),i=n(18),o=n(71),a=n(150),s=o("IE_PROTO"),u=Object.prototype;t.exports=a?Object.getPrototypeOf:function(t){return t=i(t),r(t,s)?t[s]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?u:null}},function(t,e,n){var r=n(153),i=n(94);t.exports=Object.keys||function(t){return r(t,i)}},function(t,e,n){var r=n(95),i=n(34),o=n(4)("toStringTag"),a="Arguments"==i(function(){return arguments}());t.exports=r?i:function(t){var e,n,r;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(n=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),o))?n:a?i(e):"Object"==(r=i(e))&&"function"==typeof e.callee?"Arguments":r}},function(t,e,n){var r=n(75),i=n(44),o=n(4)("iterator");t.exports=function(t){if(null!=t)return t[o]||t["@@iterator"]||i[r(t)]}},function(t,e,n){"use strict";var r=n(70),i=n(17),o=n(41);t.exports=function(t,e,n){var a=r(e);a in t?i.f(t,a,o(0,n)):t[a]=n}},function(t,e,n){var r=n(3),i=n(4),o=n(97),a=i("species");t.exports=function(t){return o>=51||!r((function(){var e=[];return(e.constructor={})[a]=function(){return{foo:1}},1!==e[t](Boolean).foo}))}},function(t,e,n){var r=n(4);e.f=r},function(t,e,n){"use strict";var r=n(3);t.exports=function(t,e){var n=[][t];return!!n&&r((function(){n.call(null,e||function(){throw 1},1)}))}},function(t,e,n){t.exports=n(296)},function(t,e,n){var r=n(175),i=n(303),o=n(176),a=n(179);t.exports=function(t,e){return r(t)||i(t,e)||o(t,e)||a()},t.exports.default=t.exports,t.exports.__esModule=!0},function(t,e){t.exports=function(t){try{return{error:!1,value:t()}}catch(t){return{error:!0,value:t}}}},function(t,e,n){t.exports=n(108)},function(t,e){function n(t,e,n,r,i,o,a){try{var s=t[o](a),u=s.value}catch(t){return void n(t)}s.done?e(u):Promise.resolve(u).then(r,i)}t.exports=function(t){return function(){var e=this,r=arguments;return new Promise((function(i,o){var a=t.apply(e,r);function s(t){n(a,i,o,s,u,"next",t)}function u(t){n(a,i,o,s,u,"throw",t)}s(void 0)}))}}},function(t,e,n){"use strict";(function(e){void 0===e||!e.version||0===e.version.indexOf("v0.")||0===e.version.indexOf("v1.")&&0!==e.version.indexOf("v1.8.")?t.exports={nextTick:function(t,n,r,i){if("function"!=typeof t)throw new TypeError('"callback" argument must be a function');var o,a,s=arguments.length;switch(s){case 0:case 1:return e.nextTick(t);case 2:return e.nextTick((function(){t.call(null,n)}));case 3:return e.nextTick((function(){t.call(null,n,r)}));case 4:return e.nextTick((function(){t.call(null,n,r,i)}));default:for(o=new Array(s-1),a=0;a<o.length;)o[a++]=arguments[a];return e.nextTick((function(){t.apply(null,o)}))}}}:t.exports=e}).call(this,n(22))},function(t,e){t.exports=function(t){return t&&t.__esModule?t:{default:t}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));var r=n(8);const i=Symbol("implicit");function o(){var t=new Map,e=[],n=[],a=i;function s(r){var o=r+"",s=t.get(o);if(!s){if(a!==i)return a;t.set(o,s=e.push(r))}return n[(s-1)%n.length]}return s.domain=function(n){if(!arguments.length)return e.slice();e=[],t=new Map;for(const r of n){const n=r+"";t.has(n)||t.set(n,e.push(r))}return s},s.range=function(t){return arguments.length?(n=Array.from(t),s):n.slice()},s.unknown=function(t){return arguments.length?(a=t,s):a},s.copy=function(){return o(e,n).unknown(a)},r.b.apply(s,arguments),s}},function(t,e,n){"use strict";var r={}.propertyIsEnumerable,i=Object.getOwnPropertyDescriptor,o=i&&!r.call({1:2},1);e.f=o?function(t){var e=i(this,t);return!!e&&e.enumerable}:r},function(t,e,n){var r=n(2),i=n(7),o=r.document,a=i(o)&&i(o.createElement);t.exports=function(t){return a?o.createElement(t):{}}},function(t,e,n){var r=n(24),i=n(147);(t.exports=function(t,e){return i[t]||(i[t]=void 0!==e?e:{})})("versions",[]).push({version:"3.6.4",mode:r?"pure":"global",copyright:"© 2020 Denis Pushkarev (zloirock.ru)"})},function(t,e,n){var r=n(3);t.exports=!!Object.getOwnPropertySymbols&&!r((function(){return!String(Symbol())}))},function(t,e){var n=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:n)(t)}},function(t,e){t.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(t,e,n){var r={};r[n(4)("toStringTag")]="z",t.exports="[object z]"===String(r)},function(t,e,n){var r=n(11),i=n(251);t.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var t,e=!1,n={};try{(t=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set).call(n,[]),e=n instanceof Array}catch(t){}return function(n,o){return r(n),i(o),e?t.call(n,o):n.__proto__=o,n}}():void 0)},function(t,e,n){var r,i,o=n(2),a=n(98),s=o.process,u=s&&s.versions,f=u&&u.v8;f?i=(r=f.split("."))[0]+r[1]:a&&(!(r=a.match(/Edge\/(\d+)/))||r[1]>=74)&&(r=a.match(/Chrome\/(\d+)/))&&(i=r[1]),t.exports=i&&+i},function(t,e,n){var r=n(25);t.exports=r("navigator","userAgent")||""},function(t,e){},function(t,e,n){var r=n(153),i=n(94).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return r(t,i)}},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e,n){t.exports=n(277)},function(t,e,n){t.exports=n(280)},function(t,e,n){t.exports=n(289)},function(t,e,n){t.exports=n(295)},function(t,e,n){t.exports=n(298)},function(t,e,n){t.exports=n(316)},function(t,e,n){var r=function(t){"use strict";var e=Object.prototype,n=e.hasOwnProperty,r="function"==typeof Symbol?Symbol:{},i=r.iterator||"@@iterator",o=r.asyncIterator||"@@asyncIterator",a=r.toStringTag||"@@toStringTag";function s(t,e,n){return Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{s({},"")}catch(t){s=function(t,e,n){return t[e]=n}}function u(t,e,n,r){var i=e&&e.prototype instanceof l?e:l,o=Object.create(i.prototype),a=new k(r||[]);return o._invoke=function(t,e,n){var r="suspendedStart";return function(i,o){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===i)throw o;return S()}for(n.method=i,n.arg=o;;){var a=n.delegate;if(a){var s=w(a,n);if(s){if(s===c)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var u=f(t,e,n);if("normal"===u.type){if(r=n.done?"completed":"suspendedYield",u.arg===c)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r="completed",n.method="throw",n.arg=u.arg)}}}(t,n,a),o}function f(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}t.wrap=u;var c={};function l(){}function h(){}function d(){}var p={};p[i]=function(){return this};var g=Object.getPrototypeOf,v=g&&g(g(E([])));v&&v!==e&&n.call(v,i)&&(p=v);var b=d.prototype=l.prototype=Object.create(p);function y(t){["next","throw","return"].forEach((function(e){s(t,e,(function(t){return this._invoke(e,t)}))}))}function m(t,e){var r;this._invoke=function(i,o){function a(){return new e((function(r,a){!function r(i,o,a,s){var u=f(t[i],t,o);if("throw"!==u.type){var c=u.arg,l=c.value;return l&&"object"==typeof l&&n.call(l,"__await")?e.resolve(l.__await).then((function(t){r("next",t,a,s)}),(function(t){r("throw",t,a,s)})):e.resolve(l).then((function(t){c.value=t,a(c)}),(function(t){return r("throw",t,a,s)}))}s(u.arg)}(i,o,r,a)}))}return r=r?r.then(a,a):a()}}function w(t,e){var n=t.iterator[e.method];if(void 0===n){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=void 0,w(t,e),"throw"===e.method))return c;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return c}var r=f(n,t.iterator,e.arg);if("throw"===r.type)return e.method="throw",e.arg=r.arg,e.delegate=null,c;var i=r.arg;return i?i.done?(e[t.resultName]=i.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=void 0),e.delegate=null,c):i:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,c)}function _(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function x(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function k(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(_,this),this.reset(!0)}function E(t){if(t){var e=t[i];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var r=-1,o=function e(){for(;++r<t.length;)if(n.call(t,r))return e.value=t[r],e.done=!1,e;return e.value=void 0,e.done=!0,e};return o.next=o}}return{next:S}}function S(){return{value:void 0,done:!0}}return h.prototype=b.constructor=d,d.constructor=h,h.displayName=s(d,a,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===h||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,d):(t.__proto__=d,s(t,a,"GeneratorFunction")),t.prototype=Object.create(b),t},t.awrap=function(t){return{__await:t}},y(m.prototype),m.prototype[o]=function(){return this},t.AsyncIterator=m,t.async=function(e,n,r,i,o){void 0===o&&(o=Promise);var a=new m(u(e,n,r,i),o);return t.isGeneratorFunction(n)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},y(b),s(b,a,"Generator"),b[i]=function(){return this},b.toString=function(){return"[object Generator]"},t.keys=function(t){var e=[];for(var n in t)e.push(n);return e.reverse(),function n(){for(;e.length;){var r=e.pop();if(r in t)return n.value=r,n.done=!1,n}return n.done=!0,n}},t.values=E,k.prototype={constructor:k,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(x),!t)for(var e in this)"t"===e.charAt(0)&&n.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function r(n,r){return a.type="throw",a.arg=t,e.next=n,r&&(e.method="next",e.arg=void 0),!!r}for(var i=this.tryEntries.length-1;i>=0;--i){var o=this.tryEntries[i],a=o.completion;if("root"===o.tryLoc)return r("end");if(o.tryLoc<=this.prev){var s=n.call(o,"catchLoc"),u=n.call(o,"finallyLoc");if(s&&u){if(this.prev<o.catchLoc)return r(o.catchLoc,!0);if(this.prev<o.finallyLoc)return r(o.finallyLoc)}else if(s){if(this.prev<o.catchLoc)return r(o.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return r(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var o=i;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=e&&e<=o.finallyLoc&&(o=null);var a=o?o.completion:{};return a.type=t,a.arg=e,o?(this.method="next",this.next=o.finallyLoc,c):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),c},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),x(n),c}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var i=r.arg;x(n)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,n){return this.delegate={iterator:E(t),resultName:e,nextLoc:n},"next"===this.method&&(this.arg=void 0),c}},t}(t.exports);try{regeneratorRuntime=r}catch(t){Function("r","regeneratorRuntime = r")(r)}},function(t,e,n){t.exports=n(321)},function(t,e,n){var r=n(57);t.exports=function(t,e,n){for(var i in e)n&&n.unsafe&&t[i]?t[i]=e[i]:r(t,i,e[i],n);return t}},function(t,e){t.exports=function(t,e,n){if(!(t instanceof e))throw TypeError("Incorrect "+(n?n+" ":"")+"invocation");return t}},function(t,e,n){var r=n(332),i=n(336);t.exports=function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=r(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&i(t,e)},t.exports.default=t.exports,t.exports.__esModule=!0},function(t,e,n){var r=n(188).default,i=n(115);t.exports=function(t,e){return!e||"object"!==r(e)&&"function"!=typeof e?i(t):e},t.exports.default=t.exports,t.exports.__esModule=!0},function(t,e,n){t.exports=n(340)},function(t,e){t.exports=function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t},t.exports.default=t.exports,t.exports.__esModule=!0},function(t,e,n){var r=n(187),i=n(342);function o(e){return t.exports=o=r?i:function(t){return t.__proto__||i(t)},t.exports.default=t.exports,t.exports.__esModule=!0,o(e)}t.exports=o,t.exports.default=t.exports,t.exports.__esModule=!0},function(t,e){t.exports=r;var n=null;try{n=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(t){}function r(t,e,n){this.low=0|t,this.high=0|e,this.unsigned=!!n}function i(t){return!0===(t&&t.__isLong__)}r.prototype.__isLong__,Object.defineProperty(r.prototype,"__isLong__",{value:!0}),r.isLong=i;var o={},a={};function s(t,e){var n,r,i;return e?(i=0<=(t>>>=0)&&t<256)&&(r=a[t])?r:(n=f(t,(0|t)<0?-1:0,!0),i&&(a[t]=n),n):(i=-128<=(t|=0)&&t<128)&&(r=o[t])?r:(n=f(t,t<0?-1:0,!1),i&&(o[t]=n),n)}function u(t,e){if(isNaN(t))return e?y:b;if(e){if(t<0)return y;if(t>=p)return k}else{if(t<=-g)return E;if(t+1>=g)return x}return t<0?u(-t,e).neg():f(t%d|0,t/d|0,e)}function f(t,e,n){return new r(t,e,n)}r.fromInt=s,r.fromNumber=u,r.fromBits=f;var c=Math.pow;function l(t,e,n){if(0===t.length)throw Error("empty string");if("NaN"===t||"Infinity"===t||"+Infinity"===t||"-Infinity"===t)return b;if("number"==typeof e?(n=e,e=!1):e=!!e,(n=n||10)<2||36<n)throw RangeError("radix");var r;if((r=t.indexOf("-"))>0)throw Error("interior hyphen");if(0===r)return l(t.substring(1),e,n).neg();for(var i=u(c(n,8)),o=b,a=0;a<t.length;a+=8){var s=Math.min(8,t.length-a),f=parseInt(t.substring(a,a+s),n);if(s<8){var h=u(c(n,s));o=o.mul(h).add(u(f))}else o=(o=o.mul(i)).add(u(f))}return o.unsigned=e,o}function h(t,e){return"number"==typeof t?u(t,e):"string"==typeof t?l(t,e):f(t.low,t.high,"boolean"==typeof e?e:t.unsigned)}r.fromString=l,r.fromValue=h;var d=4294967296,p=d*d,g=p/2,v=s(1<<24),b=s(0);r.ZERO=b;var y=s(0,!0);r.UZERO=y;var m=s(1);r.ONE=m;var w=s(1,!0);r.UONE=w;var _=s(-1);r.NEG_ONE=_;var x=f(-1,2147483647,!1);r.MAX_VALUE=x;var k=f(-1,-1,!0);r.MAX_UNSIGNED_VALUE=k;var E=f(0,-2147483648,!1);r.MIN_VALUE=E;var S=r.prototype;S.toInt=function(){return this.unsigned?this.low>>>0:this.low},S.toNumber=function(){return this.unsigned?(this.high>>>0)*d+(this.low>>>0):this.high*d+(this.low>>>0)},S.toString=function(t){if((t=t||10)<2||36<t)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(E)){var e=u(t),n=this.div(e),r=n.mul(e).sub(this);return n.toString(t)+r.toInt().toString(t)}return"-"+this.neg().toString(t)}for(var i=u(c(t,6),this.unsigned),o=this,a="";;){var s=o.div(i),f=(o.sub(s.mul(i)).toInt()>>>0).toString(t);if((o=s).isZero())return f+a;for(;f.length<6;)f="0"+f;a=""+f+a}},S.getHighBits=function(){return this.high},S.getHighBitsUnsigned=function(){return this.high>>>0},S.getLowBits=function(){return this.low},S.getLowBitsUnsigned=function(){return this.low>>>0},S.getNumBitsAbs=function(){if(this.isNegative())return this.eq(E)?64:this.neg().getNumBitsAbs();for(var t=0!=this.high?this.high:this.low,e=31;e>0&&0==(t&1<<e);e--);return 0!=this.high?e+33:e+1},S.isZero=function(){return 0===this.high&&0===this.low},S.eqz=S.isZero,S.isNegative=function(){return!this.unsigned&&this.high<0},S.isPositive=function(){return this.unsigned||this.high>=0},S.isOdd=function(){return 1==(1&this.low)},S.isEven=function(){return 0==(1&this.low)},S.equals=function(t){return i(t)||(t=h(t)),(this.unsigned===t.unsigned||this.high>>>31!=1||t.high>>>31!=1)&&(this.high===t.high&&this.low===t.low)},S.eq=S.equals,S.notEquals=function(t){return!this.eq(t)},S.neq=S.notEquals,S.ne=S.notEquals,S.lessThan=function(t){return this.comp(t)<0},S.lt=S.lessThan,S.lessThanOrEqual=function(t){return this.comp(t)<=0},S.lte=S.lessThanOrEqual,S.le=S.lessThanOrEqual,S.greaterThan=function(t){return this.comp(t)>0},S.gt=S.greaterThan,S.greaterThanOrEqual=function(t){return this.comp(t)>=0},S.gte=S.greaterThanOrEqual,S.ge=S.greaterThanOrEqual,S.compare=function(t){if(i(t)||(t=h(t)),this.eq(t))return 0;var e=this.isNegative(),n=t.isNegative();return e&&!n?-1:!e&&n?1:this.unsigned?t.high>>>0>this.high>>>0||t.high===this.high&&t.low>>>0>this.low>>>0?-1:1:this.sub(t).isNegative()?-1:1},S.comp=S.compare,S.negate=function(){return!this.unsigned&&this.eq(E)?E:this.not().add(m)},S.neg=S.negate,S.add=function(t){i(t)||(t=h(t));var e=this.high>>>16,n=65535&this.high,r=this.low>>>16,o=65535&this.low,a=t.high>>>16,s=65535&t.high,u=t.low>>>16,c=0,l=0,d=0,p=0;return d+=(p+=o+(65535&t.low))>>>16,l+=(d+=r+u)>>>16,c+=(l+=n+s)>>>16,c+=e+a,f((d&=65535)<<16|(p&=65535),(c&=65535)<<16|(l&=65535),this.unsigned)},S.subtract=function(t){return i(t)||(t=h(t)),this.add(t.neg())},S.sub=S.subtract,S.multiply=function(t){if(this.isZero())return b;if(i(t)||(t=h(t)),n)return f(n.mul(this.low,this.high,t.low,t.high),n.get_high(),this.unsigned);if(t.isZero())return b;if(this.eq(E))return t.isOdd()?E:b;if(t.eq(E))return this.isOdd()?E:b;if(this.isNegative())return t.isNegative()?this.neg().mul(t.neg()):this.neg().mul(t).neg();if(t.isNegative())return this.mul(t.neg()).neg();if(this.lt(v)&&t.lt(v))return u(this.toNumber()*t.toNumber(),this.unsigned);var e=this.high>>>16,r=65535&this.high,o=this.low>>>16,a=65535&this.low,s=t.high>>>16,c=65535&t.high,l=t.low>>>16,d=65535&t.low,p=0,g=0,y=0,m=0;return y+=(m+=a*d)>>>16,g+=(y+=o*d)>>>16,y&=65535,g+=(y+=a*l)>>>16,p+=(g+=r*d)>>>16,g&=65535,p+=(g+=o*l)>>>16,g&=65535,p+=(g+=a*c)>>>16,p+=e*d+r*l+o*c+a*s,f((y&=65535)<<16|(m&=65535),(p&=65535)<<16|(g&=65535),this.unsigned)},S.mul=S.multiply,S.divide=function(t){if(i(t)||(t=h(t)),t.isZero())throw Error("division by zero");var e,r,o;if(n)return this.unsigned||-2147483648!==this.high||-1!==t.low||-1!==t.high?f((this.unsigned?n.div_u:n.div_s)(this.low,this.high,t.low,t.high),n.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?y:b;if(this.unsigned){if(t.unsigned||(t=t.toUnsigned()),t.gt(this))return y;if(t.gt(this.shru(1)))return w;o=y}else{if(this.eq(E))return t.eq(m)||t.eq(_)?E:t.eq(E)?m:(e=this.shr(1).div(t).shl(1)).eq(b)?t.isNegative()?m:_:(r=this.sub(t.mul(e)),o=e.add(r.div(t)));if(t.eq(E))return this.unsigned?y:b;if(this.isNegative())return t.isNegative()?this.neg().div(t.neg()):this.neg().div(t).neg();if(t.isNegative())return this.div(t.neg()).neg();o=b}for(r=this;r.gte(t);){e=Math.max(1,Math.floor(r.toNumber()/t.toNumber()));for(var a=Math.ceil(Math.log(e)/Math.LN2),s=a<=48?1:c(2,a-48),l=u(e),d=l.mul(t);d.isNegative()||d.gt(r);)d=(l=u(e-=s,this.unsigned)).mul(t);l.isZero()&&(l=m),o=o.add(l),r=r.sub(d)}return o},S.div=S.divide,S.modulo=function(t){return i(t)||(t=h(t)),n?f((this.unsigned?n.rem_u:n.rem_s)(this.low,this.high,t.low,t.high),n.get_high(),this.unsigned):this.sub(this.div(t).mul(t))},S.mod=S.modulo,S.rem=S.modulo,S.not=function(){return f(~this.low,~this.high,this.unsigned)},S.and=function(t){return i(t)||(t=h(t)),f(this.low&t.low,this.high&t.high,this.unsigned)},S.or=function(t){return i(t)||(t=h(t)),f(this.low|t.low,this.high|t.high,this.unsigned)},S.xor=function(t){return i(t)||(t=h(t)),f(this.low^t.low,this.high^t.high,this.unsigned)},S.shiftLeft=function(t){return i(t)&&(t=t.toInt()),0==(t&=63)?this:t<32?f(this.low<<t,this.high<<t|this.low>>>32-t,this.unsigned):f(0,this.low<<t-32,this.unsigned)},S.shl=S.shiftLeft,S.shiftRight=function(t){return i(t)&&(t=t.toInt()),0==(t&=63)?this:t<32?f(this.low>>>t|this.high<<32-t,this.high>>t,this.unsigned):f(this.high>>t-32,this.high>=0?0:-1,this.unsigned)},S.shr=S.shiftRight,S.shiftRightUnsigned=function(t){if(i(t)&&(t=t.toInt()),0===(t&=63))return this;var e=this.high;return t<32?f(this.low>>>t|e<<32-t,e>>>t,this.unsigned):f(32===t?e:e>>>t-32,0,this.unsigned)},S.shru=S.shiftRightUnsigned,S.shr_u=S.shiftRightUnsigned,S.toSigned=function(){return this.unsigned?f(this.low,this.high,!1):this},S.toUnsigned=function(){return this.unsigned?this:f(this.low,this.high,!0)},S.toBytes=function(t){return t?this.toBytesLE():this.toBytesBE()},S.toBytesLE=function(){var t=this.high,e=this.low;return[255&e,e>>>8&255,e>>>16&255,e>>>24,255&t,t>>>8&255,t>>>16&255,t>>>24]},S.toBytesBE=function(){var t=this.high,e=this.low;return[t>>>24,t>>>16&255,t>>>8&255,255&t,e>>>24,e>>>16&255,e>>>8&255,255&e]},r.fromBytes=function(t,e,n){return n?r.fromBytesLE(t,e):r.fromBytesBE(t,e)},r.fromBytesLE=function(t,e){return new r(t[0]|t[1]<<8|t[2]<<16|t[3]<<24,t[4]|t[5]<<8|t[6]<<16|t[7]<<24,e)},r.fromBytesBE=function(t,e){return new r(t[4]<<24|t[5]<<16|t[6]<<8|t[7],t[0]<<24|t[1]<<16|t[2]<<8|t[3],e)}},function(t,e){t.exports=function(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}},function(t,e,n){"use strict";var r=n(15);n(12)(e,"__esModule",{value:!0}),e.timeout=function(t){return new l.default((function(e){return(0,c.default)(e,t)}))},e.longToNumber=function(t){if(t.greaterThan(f.default)||t.lessThan(u.default))throw new Error("integer overflow");return t.toNumber()},e.checkAbortSignal=h,e.abortBreakPoint=function(t){return d.apply(this,arguments)},e.canMergeBlocks=p,e.makeOpts=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return"aborted"in t?{signal:t}:t},e.optimizeChunks=function(t,e){var n=[],r=null;if(0===t.length)return t;return(0,a.default)(t).call(t,(function(t,e){var n=t.minv.blockPosition-e.minv.blockPosition;return 0!==n?n:t.minv.dataPosition-e.minv.dataPosition})),(0,o.default)(t).call(t,(function(t){(!e||t.maxv.compareTo(e)>0)&&(null===r?(n.push(t),r=t):p(r,t)?t.maxv.compareTo(r.maxv)>0&&(r.maxv=t.maxv):(n.push(t),r=t))})),n};var i=r(n(48)),o=r(n(36)),a=r(n(195)),s=r(n(49)),u=r(n(358)),f=r(n(362)),c=r(n(366)),l=r(n(120));function h(t){if(t&&t.aborted){if("undefined"!=typeof DOMException)throw new DOMException("aborted","AbortError");var e=new Error("aborted");throw e.code="ERR_ABORTED",e}}function d(){return(d=(0,s.default)(i.default.mark((function t(e){return i.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,l.default.resolve();case 2:h(e);case 3:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function p(t,e){return e.minv.blockPosition-t.maxv.blockPosition<65e3&&e.maxv.blockPosition-t.minv.blockPosition<5e6}},function(t,e,n){t.exports=n(369)},function(t,e,n){var r=n(55),i=n(7),o=n(13),a=n(17).f,s=n(72),u=n(374),f=s("meta"),c=0,l=Object.isExtensible||function(){return!0},h=function(t){a(t,f,{value:{objectID:"O"+ ++c,weakData:{}}})},d=t.exports={REQUIRED:!1,fastKey:function(t,e){if(!i(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!o(t,f)){if(!l(t))return"F";if(!e)return"E";h(t)}return t[f].objectID},getWeakData:function(t,e){if(!o(t,f)){if(!l(t))return!0;if(!e)return!1;h(t)}return t[f].weakData},onFreeze:function(t){return u&&d.REQUIRED&&l(t)&&!o(t,f)&&h(t),t}};r[f]=!0},function(t,e,n){"use strict";var r=n(392),i=n(198),o=i.unzip,a=i.unzipChunk,s=i.unzipChunkSlice;t.exports={BgzfFilehandle:r,unzip:o,unzipChunk:a,unzipChunkSlice:s}},function(t,e,n){"use strict";var r,i="object"==typeof Reflect?Reflect:null,o=i&&"function"==typeof i.apply?i.apply:function(t,e,n){return Function.prototype.apply.call(t,e,n)};r=i&&"function"==typeof i.ownKeys?i.ownKeys:Object.getOwnPropertySymbols?function(t){return Object.getOwnPropertyNames(t).concat(Object.getOwnPropertySymbols(t))}:function(t){return Object.getOwnPropertyNames(t)};var a=Number.isNaN||function(t){return t!=t};function s(){s.init.call(this)}t.exports=s,t.exports.once=function(t,e){return new Promise((function(n,r){function i(){void 0!==o&&t.removeListener("error",o),n([].slice.call(arguments))}var o;"error"!==e&&(o=function(n){t.removeListener(e,i),r(n)},t.once("error",o)),t.once(e,i)}))},s.EventEmitter=s,s.prototype._events=void 0,s.prototype._eventsCount=0,s.prototype._maxListeners=void 0;var u=10;function f(t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t)}function c(t){return void 0===t._maxListeners?s.defaultMaxListeners:t._maxListeners}function l(t,e,n,r){var i,o,a,s;if(f(n),void 0===(o=t._events)?(o=t._events=Object.create(null),t._eventsCount=0):(void 0!==o.newListener&&(t.emit("newListener",e,n.listener?n.listener:n),o=t._events),a=o[e]),void 0===a)a=o[e]=n,++t._eventsCount;else if("function"==typeof a?a=o[e]=r?[n,a]:[a,n]:r?a.unshift(n):a.push(n),(i=c(t))>0&&a.length>i&&!a.warned){a.warned=!0;var u=new Error("Possible EventEmitter memory leak detected. "+a.length+" "+String(e)+" listeners added. Use emitter.setMaxListeners() to increase limit");u.name="MaxListenersExceededWarning",u.emitter=t,u.type=e,u.count=a.length,s=u,console&&console.warn&&console.warn(s)}return t}function h(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function d(t,e,n){var r={fired:!1,wrapFn:void 0,target:t,type:e,listener:n},i=h.bind(r);return i.listener=n,r.wrapFn=i,i}function p(t,e,n){var r=t._events;if(void 0===r)return[];var i=r[e];return void 0===i?[]:"function"==typeof i?n?[i.listener||i]:[i]:n?function(t){for(var e=new Array(t.length),n=0;n<e.length;++n)e[n]=t[n].listener||t[n];return e}(i):v(i,i.length)}function g(t){var e=this._events;if(void 0!==e){var n=e[t];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function v(t,e){for(var n=new Array(e),r=0;r<e;++r)n[r]=t[r];return n}Object.defineProperty(s,"defaultMaxListeners",{enumerable:!0,get:function(){return u},set:function(t){if("number"!=typeof t||t<0||a(t))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+t+".");u=t}}),s.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},s.prototype.setMaxListeners=function(t){if("number"!=typeof t||t<0||a(t))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+t+".");return this._maxListeners=t,this},s.prototype.getMaxListeners=function(){return c(this)},s.prototype.emit=function(t){for(var e=[],n=1;n<arguments.length;n++)e.push(arguments[n]);var r="error"===t,i=this._events;if(void 0!==i)r=r&&void 0===i.error;else if(!r)return!1;if(r){var a;if(e.length>0&&(a=e[0]),a instanceof Error)throw a;var s=new Error("Unhandled error."+(a?" ("+a.message+")":""));throw s.context=a,s}var u=i[t];if(void 0===u)return!1;if("function"==typeof u)o(u,this,e);else{var f=u.length,c=v(u,f);for(n=0;n<f;++n)o(c[n],this,e)}return!0},s.prototype.addListener=function(t,e){return l(this,t,e,!1)},s.prototype.on=s.prototype.addListener,s.prototype.prependListener=function(t,e){return l(this,t,e,!0)},s.prototype.once=function(t,e){return f(e),this.on(t,d(this,t,e)),this},s.prototype.prependOnceListener=function(t,e){return f(e),this.prependListener(t,d(this,t,e)),this},s.prototype.removeListener=function(t,e){var n,r,i,o,a;if(f(e),void 0===(r=this._events))return this;if(void 0===(n=r[t]))return this;if(n===e||n.listener===e)0==--this._eventsCount?this._events=Object.create(null):(delete r[t],r.removeListener&&this.emit("removeListener",t,n.listener||e));else if("function"!=typeof n){for(i=-1,o=n.length-1;o>=0;o--)if(n[o]===e||n[o].listener===e){a=n[o].listener,i=o;break}if(i<0)return this;0===i?n.shift():function(t,e){for(;e+1<t.length;e++)t[e]=t[e+1];t.pop()}(n,i),1===n.length&&(r[t]=n[0]),void 0!==r.removeListener&&this.emit("removeListener",t,a||e)}return this},s.prototype.off=s.prototype.removeListener,s.prototype.removeAllListeners=function(t){var e,n,r;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[t]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[t]),this;if(0===arguments.length){var i,o=Object.keys(n);for(r=0;r<o.length;++r)"removeListener"!==(i=o[r])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(e=n[t]))this.removeListener(t,e);else if(void 0!==e)for(r=e.length-1;r>=0;r--)this.removeListener(t,e[r]);return this},s.prototype.listeners=function(t){return p(this,t,!0)},s.prototype.rawListeners=function(t){return p(this,t,!1)},s.listenerCount=function(t,e){return"function"==typeof t.listenerCount?t.listenerCount(e):g.call(t,e)},s.prototype.listenerCount=g,s.prototype.eventNames=function(){return this._eventsCount>0?r(this._events):[]}},function(t,e,n){(e=t.exports=n(199)).Stream=e,e.Readable=e,e.Writable=n(126),e.Duplex=n(38),e.Transform=n(203),e.PassThrough=n(408)},function(t,e,n){var r=n(9),i=r.Buffer;function o(t,e){for(var n in t)e[n]=t[n]}function a(t,e,n){return i(t,e,n)}i.from&&i.alloc&&i.allocUnsafe&&i.allocUnsafeSlow?t.exports=r:(o(r,e),e.Buffer=a),o(i,a),a.from=function(t,e,n){if("number"==typeof t)throw new TypeError("Argument must not be a number");return i(t,e,n)},a.alloc=function(t,e,n){if("number"!=typeof t)throw new TypeError("Argument must be a number");var r=i(t);return void 0!==e?"string"==typeof n?r.fill(e,n):r.fill(e):r.fill(0),r},a.allocUnsafe=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return i(t)},a.allocUnsafeSlow=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return r.SlowBuffer(t)}},function(t,e,n){"use strict";(function(e,r,i){var o=n(86);function a(t){var e=this;this.next=null,this.entry=null,this.finish=function(){!function(t,e,n){var r=t.entry;t.entry=null;for(;r;){var i=r.callback;e.pendingcb--,i(n),r=r.next}e.corkedRequestsFree?e.corkedRequestsFree.next=t:e.corkedRequestsFree=t}(e,t)}}t.exports=y;var s,u=!e.browser&&["v0.10","v0.9."].indexOf(e.version.slice(0,5))>-1?r:o.nextTick;y.WritableState=b;var f=Object.create(n(65));f.inherits=n(53);var c={deprecate:n(406)},l=n(200),h=n(125).Buffer,d=i.Uint8Array||function(){};var p,g=n(201);function v(){}function b(t,e){s=s||n(38),t=t||{};var r=e instanceof s;this.objectMode=!!t.objectMode,r&&(this.objectMode=this.objectMode||!!t.writableObjectMode);var i=t.highWaterMark,f=t.writableHighWaterMark,c=this.objectMode?16:16384;this.highWaterMark=i||0===i?i:r&&(f||0===f)?f:c,this.highWaterMark=Math.floor(this.highWaterMark),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var l=!1===t.decodeStrings;this.decodeStrings=!l,this.defaultEncoding=t.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(t){!function(t,e){var n=t._writableState,r=n.sync,i=n.writecb;if(function(t){t.writing=!1,t.writecb=null,t.length-=t.writelen,t.writelen=0}(n),e)!function(t,e,n,r,i){--e.pendingcb,n?(o.nextTick(i,r),o.nextTick(E,t,e),t._writableState.errorEmitted=!0,t.emit("error",r)):(i(r),t._writableState.errorEmitted=!0,t.emit("error",r),E(t,e))}(t,n,r,e,i);else{var a=x(n);a||n.corked||n.bufferProcessing||!n.bufferedRequest||_(t,n),r?u(w,t,n,a,i):w(t,n,a,i)}}(e,t)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.bufferedRequestCount=0,this.corkedRequestsFree=new a(this)}function y(t){if(s=s||n(38),!(p.call(y,this)||this instanceof s))return new y(t);this._writableState=new b(t,this),this.writable=!0,t&&("function"==typeof t.write&&(this._write=t.write),"function"==typeof t.writev&&(this._writev=t.writev),"function"==typeof t.destroy&&(this._destroy=t.destroy),"function"==typeof t.final&&(this._final=t.final)),l.call(this)}function m(t,e,n,r,i,o,a){e.writelen=r,e.writecb=a,e.writing=!0,e.sync=!0,n?t._writev(i,e.onwrite):t._write(i,o,e.onwrite),e.sync=!1}function w(t,e,n,r){n||function(t,e){0===e.length&&e.needDrain&&(e.needDrain=!1,t.emit("drain"))}(t,e),e.pendingcb--,r(),E(t,e)}function _(t,e){e.bufferProcessing=!0;var n=e.bufferedRequest;if(t._writev&&n&&n.next){var r=e.bufferedRequestCount,i=new Array(r),o=e.corkedRequestsFree;o.entry=n;for(var s=0,u=!0;n;)i[s]=n,n.isBuf||(u=!1),n=n.next,s+=1;i.allBuffers=u,m(t,e,!0,e.length,i,"",o.finish),e.pendingcb++,e.lastBufferedRequest=null,o.next?(e.corkedRequestsFree=o.next,o.next=null):e.corkedRequestsFree=new a(e),e.bufferedRequestCount=0}else{for(;n;){var f=n.chunk,c=n.encoding,l=n.callback;if(m(t,e,!1,e.objectMode?1:f.length,f,c,l),n=n.next,e.bufferedRequestCount--,e.writing)break}null===n&&(e.lastBufferedRequest=null)}e.bufferedRequest=n,e.bufferProcessing=!1}function x(t){return t.ending&&0===t.length&&null===t.bufferedRequest&&!t.finished&&!t.writing}function k(t,e){t._final((function(n){e.pendingcb--,n&&t.emit("error",n),e.prefinished=!0,t.emit("prefinish"),E(t,e)}))}function E(t,e){var n=x(e);return n&&(!function(t,e){e.prefinished||e.finalCalled||("function"==typeof t._final?(e.pendingcb++,e.finalCalled=!0,o.nextTick(k,t,e)):(e.prefinished=!0,t.emit("prefinish")))}(t,e),0===e.pendingcb&&(e.finished=!0,t.emit("finish"))),n}f.inherits(y,l),b.prototype.getBuffer=function(){for(var t=this.bufferedRequest,e=[];t;)e.push(t),t=t.next;return e},function(){try{Object.defineProperty(b.prototype,"buffer",{get:c.deprecate((function(){return this.getBuffer()}),"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(t){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(p=Function.prototype[Symbol.hasInstance],Object.defineProperty(y,Symbol.hasInstance,{value:function(t){return!!p.call(this,t)||this===y&&(t&&t._writableState instanceof b)}})):p=function(t){return t instanceof this},y.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe, not readable"))},y.prototype.write=function(t,e,n){var r,i=this._writableState,a=!1,s=!i.objectMode&&(r=t,h.isBuffer(r)||r instanceof d);return s&&!h.isBuffer(t)&&(t=function(t){return h.from(t)}(t)),"function"==typeof e&&(n=e,e=null),s?e="buffer":e||(e=i.defaultEncoding),"function"!=typeof n&&(n=v),i.ended?function(t,e){var n=new Error("write after end");t.emit("error",n),o.nextTick(e,n)}(this,n):(s||function(t,e,n,r){var i=!0,a=!1;return null===n?a=new TypeError("May not write null values to stream"):"string"==typeof n||void 0===n||e.objectMode||(a=new TypeError("Invalid non-string/buffer chunk")),a&&(t.emit("error",a),o.nextTick(r,a),i=!1),i}(this,i,t,n))&&(i.pendingcb++,a=function(t,e,n,r,i,o){if(!n){var a=function(t,e,n){t.objectMode||!1===t.decodeStrings||"string"!=typeof e||(e=h.from(e,n));return e}(e,r,i);r!==a&&(n=!0,i="buffer",r=a)}var s=e.objectMode?1:r.length;e.length+=s;var u=e.length<e.highWaterMark;u||(e.needDrain=!0);if(e.writing||e.corked){var f=e.lastBufferedRequest;e.lastBufferedRequest={chunk:r,encoding:i,isBuf:n,callback:o,next:null},f?f.next=e.lastBufferedRequest:e.bufferedRequest=e.lastBufferedRequest,e.bufferedRequestCount+=1}else m(t,e,!1,s,r,i,o);return u}(this,i,s,t,e,n)),a},y.prototype.cork=function(){this._writableState.corked++},y.prototype.uncork=function(){var t=this._writableState;t.corked&&(t.corked--,t.writing||t.corked||t.finished||t.bufferProcessing||!t.bufferedRequest||_(this,t))},y.prototype.setDefaultEncoding=function(t){if("string"==typeof t&&(t=t.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((t+"").toLowerCase())>-1))throw new TypeError("Unknown encoding: "+t);return this._writableState.defaultEncoding=t,this},Object.defineProperty(y.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),y.prototype._write=function(t,e,n){n(new Error("_write() is not implemented"))},y.prototype._writev=null,y.prototype.end=function(t,e,n){var r=this._writableState;"function"==typeof t?(n=t,t=null,e=null):"function"==typeof e&&(n=e,e=null),null!=t&&this.write(t,e),r.corked&&(r.corked=1,this.uncork()),r.ending||r.finished||function(t,e,n){e.ending=!0,E(t,e),n&&(e.finished?o.nextTick(n):t.once("finish",n));e.ended=!0,t.writable=!1}(this,r,n)},Object.defineProperty(y.prototype,"destroyed",{get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(t){this._writableState&&(this._writableState.destroyed=t)}}),y.prototype.destroy=g.destroy,y.prototype._undestroy=g.undestroy,y.prototype._destroy=function(t,e){this.end(),e(t)}}).call(this,n(22),n(404).setImmediate,n(21))},function(t,e,n){"use strict";t.exports=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}},function(t,e,n){"use strict";t.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"}},function(t,e,n){"use strict";t.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},function(t,e,n){t.exports=n(108)},function(t,e){function n(t,e,n,r,i,o,a){try{var s=t[o](a),u=s.value}catch(t){return void n(t)}s.done?e(u):Promise.resolve(u).then(r,i)}t.exports=function(t){return function(){var e=this,r=arguments;return new Promise((function(i,o){var a=t.apply(e,r);function s(t){n(a,i,o,s,u,"next",t)}function u(t){n(a,i,o,s,u,"throw",t)}s(void 0)}))}}},function(t,e){t.exports=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}},function(t,e){function n(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}t.exports=function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}},function(t,e){t.exports=function(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}},function(t,e,n){"use strict";const r={};const i={recordTime:function(t){r[t]=new Date},printTime:function(t){r[t]?console.warn(`[LOG] key: ${t}, duration: ${(new Date).getTime()-r[t].getTime()} ms`):console.warn(`[LOG] key: ${t}, no time recorded`)}};e.a=i},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var r=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function i(t){if(!(e=r.exec(t)))throw new Error("invalid format: "+t);var e;return new o({fill:e[1],align:e[2],sign:e[3],symbol:e[4],zero:e[5],width:e[6],comma:e[7],precision:e[8]&&e[8].slice(1),trim:e[9],type:e[10]})}function o(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}i.prototype=o.prototype,o.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type}},function(t,e){var n={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==n.call(t)}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.serialize=e.deserialize=e.registerSerializer=void 0;const r=n(239);let i=r.DefaultSerializer;e.registerSerializer=function(t){i=r.extendSerializer(i,t)},e.deserialize=function(t){return i.deserialize(t)},e.serialize=function(t){return i.serialize(t)}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Transfer=e.isTransferDescriptor=void 0;const r=n(240);e.isTransferDescriptor=function(t){return t&&"object"==typeof t&&t[r.$transferable]},e.Transfer=function(t,e){if(!e){if(!(n=t)||"object"!=typeof n)throw Error();e=[t]}var n;return{[r.$transferable]:!0,send:t,transferables:e}}},function(t,e,n){n(244);var r=n(1).Object,i=t.exports=function(t,e,n){return r.defineProperty(t,e,n)};r.defineProperty.sham&&(i.sham=!0)},function(t,e,n){var r=n(10),i=n(3),o=n(90);t.exports=!r&&!i((function(){return 7!=Object.defineProperty(o("div"),"a",{get:function(){return 7}}).a}))},function(t,e,n){var r=n(3),i=/#|\.prototype\./,o=function(t,e){var n=s[a(t)];return n==f||n!=u&&("function"==typeof e?r(e):!!e)},a=o.normalize=function(t){return String(t).replace(i,".").toLowerCase()},s=o.data={},u=o.NATIVE="N",f=o.POLYFILL="P";t.exports=o},function(t,e,n){"use strict";var r=n(15);n(12)(e,"__esModule",{value:!0}),e.default=void 0;var i=r(n(144)),o=r(n(157)),a=r(n(60)),s=r(n(159)),u=r(n(166)),f=r(n(12)),c=r(n(102)),l=r(n(103)),h=r(n(36)),d=r(n(104)),p=r(n(61)),g=r(n(105)),v=r(n(81)),b=r(n(106)),y=r(n(82)),m=r(n(29)),w=r(n(62)),_=r(n(48)),x=r(n(49)),k=r(n(64)),E=r(n(30)),S=r(n(31)),A=r(n(112)),O=r(n(113)),T=r(n(116)),M=r(n(117)),R=n(189),j=r(n(190)),L=r(n(191)),P=n(119);function I(t,e){var n;if(void 0===s.default||null==(0,a.default)(t)){if((0,o.default)(t)||(n=function(t,e){var n;if(!t)return;if("string"==typeof t)return N(t,e);var r=(0,k.default)(n=Object.prototype.toString.call(t)).call(n,8,-1);"Object"===r&&t.constructor&&(r=t.constructor.name);if("Map"===r||"Set"===r)return(0,u.default)(t);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return N(t,e)}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0,f=function(){};return{s:f,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:f}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var c,l=!0,h=!1;return{s:function(){n=(0,i.default)(t)},n:function(){var t=n.next();return l=t.done,t},e:function(t){h=!0,c=t},f:function(){try{l||null==n.return||n.return()}finally{if(h)throw c}}}}function N(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function C(t,e){var n=(0,v.default)(t);if(g.default){var r=(0,g.default)(t);e&&(r=(0,p.default)(r).call(r,(function(e){return(0,d.default)(t,e).enumerable}))),n.push.apply(n,r)}return n}function B(t){for(var e=1;e<arguments.length;e++){var n,r=null!=arguments[e]?arguments[e]:{};if(e%2)(0,h.default)(n=C(Object(r),!0)).call(n,(function(e){(0,m.default)(t,e,r[e])}));else if(l.default)(0,c.default)(t,(0,l.default)(r));else{var i;(0,h.default)(i=C(Object(r))).call(i,(function(e){(0,f.default)(t,e,(0,d.default)(r,e))}))}}return t}function z(t){var e=function(){if("undefined"==typeof Reflect||!b.default)return!1;if(b.default.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call((0,b.default)(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=(0,T.default)(t);if(e){var i=(0,T.default)(this).constructor;n=(0,b.default)(r,arguments,i)}else n=r.apply(this,arguments);return(0,O.default)(this,n)}}function F(t,e){return t-t%e}function U(t,e){return t-t%e+e}var D=function(t){(0,A.default)(a,t);var e,n,r,i,o=z(a);function a(){return(0,E.default)(this,a),o.apply(this,arguments)}return(0,S.default)(a,[{key:"parsePseudoBin",value:function(t,e){return{lineCount:(0,P.longToNumber)(M.default.fromBytesLE((0,k.default)(Array.prototype).call(t,e+16,e+24),!0))}}},{key:"lineCount",value:(i=(0,x.default)(_.default.mark((function t(e){var n,r,i,o,a=arguments;return _.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n=a.length>1&&void 0!==a[1]?a[1]:{},t.next=3,this.parse(n);case 3:if(r=t.sent,i=r.indices[e]){t.next=7;break}return t.abrupt("return",-1);case 7:return o=i.stats||{},t.abrupt("return",void 0===o.lineCount?-1:o.lineCount);case 9:case"end":return t.stop()}}),t,this)}))),function(t){return i.apply(this,arguments)})},{key:"_parse",value:(r=(0,x.default)(_.default.mark((function t(){var e,n,r,i,o,a,s,u,f,c,l,h,d,p,g,v,b,y,m,w=arguments;return _.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return e=w.length>0&&void 0!==w[0]?w[0]:{},n={bai:!0,maxBlockSize:65536},t.next=4,this.filehandle.readFile(e);case 4:if(21578050===(r=t.sent).readUInt32LE(0)){t.next=7;break}throw new Error("Not a BAI file");case 7:n.refCount=r.readInt32LE(4),i=37449,n.indices=new Array(n.refCount),o=8,a=0;case 13:if(!(a<n.refCount)){t.next=50;break}return t.next=16,(0,P.abortBreakPoint)(e.signal);case 16:s=r.readInt32LE(o),u=void 0,o+=4,f={},c=0;case 21:if(!(c<s)){t.next=42;break}if(l=r.readUInt32LE(o),o+=4,l!==i+1){t.next=30;break}o+=4,u=this.parsePseudoBin(r,o),o+=32,t.next=39;break;case 30:if(!(l>i+1)){t.next=34;break}throw new Error("bai index contains too many bins, please use CSI");case 34:for(h=r.readInt32LE(o),o+=4,d=new Array(h),p=0;p<h;p+=1)g=(0,R.fromBytes)(r,o),v=(0,R.fromBytes)(r,o+8),o+=16,this._findFirstData(n,g),d[p]=new j.default(g,v,l);f[l]=d;case 39:c+=1,t.next=21;break;case 42:for(b=r.readInt32LE(o),o+=4,y=new Array(b),m=0;m<b;m+=1)y[m]=(0,R.fromBytes)(r,o),o+=8,this._findFirstData(n,y[m]);n.indices[a]={binIndex:f,linearIndex:y,stats:u};case 47:a+=1,t.next=13;break;case 50:return t.abrupt("return",n);case 51:case"end":return t.stop()}}),t,this)}))),function(){return r.apply(this,arguments)})},{key:"indexCov",value:(n=(0,x.default)(_.default.mark((function t(e,n,r){var i,o,a,s,u,f,c,l,h,d,p,g,v,b,y,m=arguments;return _.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return i=m.length>3&&void 0!==m[3]?m[3]:{},o=16384,a=void 0!==n,t.next=5,this.parse(i);case 5:if(s=t.sent,u=s.indices[e]){t.next=9;break}return t.abrupt("return",[]);case 9:if(f=u.linearIndex,c=void 0===f?[]:f,l=u.stats,c.length){t.next=12;break}return t.abrupt("return",[]);case 12:if(h=void 0!==r?U(r,o):(c.length-1)*o,d=void 0!==n?F(n,o):0,p=new Array(a?(h-d)/o:c.length-1),g=c[c.length-1].blockPosition,!(h>(c.length-1)*o)){t.next=18;break}throw new Error("query outside of range of linear index");case 18:for(v=c[d/o].blockPosition,b=d/o,y=0;b<h/o;b++,y++)p[y]={score:c[b+1].blockPosition-v,start:b*o,end:b*o+o},v=c[b+1].blockPosition;return t.abrupt("return",(0,w.default)(p).call(p,(function(t){return B(B({},t),{},{score:t.score*l.lineCount/g})})));case 21:case"end":return t.stop()}}),t,this)}))),function(t,e,r){return n.apply(this,arguments)})},{key:"reg2bins",value:function(t,e){return[[0,0],[1+(t>>26),1+((e-=1)>>26)],[9+(t>>23),9+(e>>23)],[73+(t>>20),73+(e>>20)],[585+(t>>17),585+(e>>17)],[4681+(t>>14),4681+(e>>14)]]}},{key:"blocksForRange",value:(e=(0,x.default)(_.default.mark((function t(e,n,r){var i,o,a,s,u,f,c,l,h,d,p,g,v,b,m,w,x,k,E,S=arguments;return _.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return i=S.length>3&&void 0!==S[3]?S[3]:{},n<0&&(n=0),t.next=4,this.parse(i);case 4:if(o=t.sent){t.next=7;break}return t.abrupt("return",[]);case 7:if(a=o.indices[e]){t.next=10;break}return t.abrupt("return",[]);case 10:s=this.reg2bins(n,r),u=[],f=I(s);try{for(f.s();!(c=f.n()).done;)for(l=(0,y.default)(c.value,2),h=l[0],d=l[1],p=h;p<=d;p++)if(a.binIndex[p])for(g=a.binIndex[p],v=0;v<g.length;++v)u.push(new j.default(g[v].minv,g[v].maxv,p))}catch(t){f.e(t)}finally{f.f()}for(b=a.linearIndex.length,m=null,w=Math.min(n>>14,b-1),x=Math.min(r>>14,b-1),k=w;k<=x;++k)(E=a.linearIndex[k])&&(!m||E.compareTo(m)<0)&&(m=E);return t.abrupt("return",(0,P.optimizeChunks)(u,m));case 20:case"end":return t.stop()}}),t,this)}))),function(t,n,r){return e.apply(this,arguments)})}]),a}(L.default);e.default=D},function(t,e,n){t.exports=n(245)},function(t,e,n){var r=n(2),i=n(146),o=r.WeakMap;t.exports="function"==typeof o&&/native code/.test(i(o))},function(t,e,n){var r=n(147),i=Function.toString;"function"!=typeof r.inspectSource&&(r.inspectSource=function(t){return i.call(t)}),t.exports=r.inspectSource},function(t,e,n){var r=n(2),i=n(248),o=r["__core-js_shared__"]||i("__core-js_shared__",{});t.exports=o},function(t,e,n){"use strict";var r=n(0),i=n(249),o=n(73),a=n(96),s=n(35),u=n(16),f=n(57),c=n(4),l=n(24),h=n(44),d=n(149),p=d.IteratorPrototype,g=d.BUGGY_SAFARI_ITERATORS,v=c("iterator"),b=function(){return this};t.exports=function(t,e,n,c,d,y,m){i(n,e,c);var w,_,x,k=function(t){if(t===d&&T)return T;if(!g&&t in A)return A[t];switch(t){case"keys":case"values":case"entries":return function(){return new n(this,t)}}return function(){return new n(this)}},E=e+" Iterator",S=!1,A=t.prototype,O=A[v]||A["@@iterator"]||d&&A[d],T=!g&&O||k(d),M="Array"==e&&A.entries||O;if(M&&(w=o(M.call(new t)),p!==Object.prototype&&w.next&&(l||o(w)===p||(a?a(w,p):"function"!=typeof w[v]&&u(w,v,b)),s(w,E,!0,!0),l&&(h[E]=b))),"values"==d&&O&&"values"!==O.name&&(S=!0,T=function(){return O.call(this)}),l&&!m||A[v]===T||u(A,v,T),h[e]=T,d)if(_={values:k("values"),keys:y?T:k("keys"),entries:k("entries")},m)for(x in _)(g||S||!(x in A))&&f(A,x,_[x]);else r({target:e,proto:!0,forced:g||S},_);return _}},function(t,e,n){"use strict";var r,i,o,a=n(73),s=n(16),u=n(13),f=n(4),c=n(24),l=f("iterator"),h=!1;[].keys&&("next"in(o=[].keys())?(i=a(a(o)))!==Object.prototype&&(r=i):h=!0),null==r&&(r={}),c||u(r,l)||s(r,l,(function(){return this})),t.exports={IteratorPrototype:r,BUGGY_SAFARI_ITERATORS:h}},function(t,e,n){var r=n(3);t.exports=!r((function(){function t(){}return t.prototype.constructor=null,Object.getPrototypeOf(new t)!==t.prototype}))},function(t,e,n){var r=n(92);t.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(t,e,n){var r=n(10),i=n(17),o=n(11),a=n(74);t.exports=r?Object.defineProperties:function(t,e){o(t);for(var n,r=a(e),s=r.length,u=0;s>u;)i.f(t,n=r[u++],e[n]);return t}},function(t,e,n){var r=n(13),i=n(23),o=n(154).indexOf,a=n(55);t.exports=function(t,e){var n,s=i(t),u=0,f=[];for(n in s)!r(a,n)&&r(s,n)&&f.push(n);for(;e.length>u;)r(s,n=e[u++])&&(~o(f,n)||f.push(n));return f}},function(t,e,n){var r=n(23),i=n(28),o=n(155),a=function(t){return function(e,n,a){var s,u=r(e),f=i(u.length),c=o(a,f);if(t&&n!=n){for(;f>c;)if((s=u[c++])!=s)return!0}else for(;f>c;c++)if((t||c in u)&&u[c]===n)return t||c||0;return!t&&-1}};t.exports={includes:a(!0),indexOf:a(!1)}},function(t,e,n){var r=n(93),i=Math.max,o=Math.min;t.exports=function(t,e){var n=r(t);return n<0?i(n+e,0):o(n,e)}},function(t,e,n){var r=n(25);t.exports=r("document","documentElement")},function(t,e,n){t.exports=n(255)},function(t,e,n){n(256);var r=n(1);t.exports=r.Array.isArray},function(t,e,n){t.exports=n(258)},function(t,e,n){n(161),n(99),n(163),n(164),n(260),n(261),n(262),n(165),n(263),n(264),n(265),n(266),n(267),n(268),n(269),n(270),n(271),n(272),n(273);var r=n(1);t.exports=r.Symbol},function(t,e,n){"use strict";var r=n(0),i=n(3),o=n(59),a=n(7),s=n(18),u=n(28),f=n(77),c=n(162),l=n(78),h=n(4),d=n(97),p=h("isConcatSpreadable"),g=d>=51||!i((function(){var t=[];return t[p]=!1,t.concat()[0]!==t})),v=l("concat"),b=function(t){if(!a(t))return!1;var e=t[p];return void 0!==e?!!e:o(t)};r({target:"Array",proto:!0,forced:!g||!v},{concat:function(t){var e,n,r,i,o,a=s(this),l=c(a,0),h=0;for(e=-1,r=arguments.length;e<r;e++)if(b(o=-1===e?a:arguments[e])){if(h+(i=u(o.length))>9007199254740991)throw TypeError("Maximum allowed index exceeded");for(n=0;n<i;n++,h++)n in o&&f(l,h,o[n])}else{if(h>=9007199254740991)throw TypeError("Maximum allowed index exceeded");f(l,h++,o)}return l.length=h,l}})},function(t,e,n){var r=n(7),i=n(59),o=n(4)("species");t.exports=function(t,e){var n;return i(t)&&("function"!=typeof(n=t.constructor)||n!==Array&&!i(n.prototype)?r(n)&&null===(n=n[o])&&(n=void 0):n=void 0),new(void 0===n?Array:n)(0===e?0:e)}},function(t,e,n){"use strict";var r=n(0),i=n(2),o=n(25),a=n(24),s=n(10),u=n(92),f=n(151),c=n(3),l=n(13),h=n(59),d=n(7),p=n(11),g=n(18),v=n(23),b=n(70),y=n(41),m=n(56),w=n(74),_=n(100),x=n(259),k=n(101),E=n(40),S=n(17),A=n(89),O=n(16),T=n(57),M=n(91),R=n(71),j=n(55),L=n(72),P=n(4),I=n(79),N=n(5),C=n(35),B=n(27),z=n(45).forEach,F=R("hidden"),U=P("toPrimitive"),D=B.set,Z=B.getterFor("Symbol"),q=Object.prototype,W=i.Symbol,H=o("JSON","stringify"),G=E.f,Y=S.f,$=x.f,V=A.f,K=M("symbols"),X=M("op-symbols"),J=M("string-to-symbol-registry"),Q=M("symbol-to-string-registry"),tt=M("wks"),et=i.QObject,nt=!et||!et.prototype||!et.prototype.findChild,rt=s&&c((function(){return 7!=m(Y({},"a",{get:function(){return Y(this,"a",{value:7}).a}})).a}))?function(t,e,n){var r=G(q,e);r&&delete q[e],Y(t,e,n),r&&t!==q&&Y(q,e,r)}:Y,it=function(t,e){var n=K[t]=m(W.prototype);return D(n,{type:"Symbol",tag:t,description:e}),s||(n.description=e),n},ot=f?function(t){return"symbol"==typeof t}:function(t){return Object(t)instanceof W},at=function(t,e,n){t===q&&at(X,e,n),p(t);var r=b(e,!0);return p(n),l(K,r)?(n.enumerable?(l(t,F)&&t[F][r]&&(t[F][r]=!1),n=m(n,{enumerable:y(0,!1)})):(l(t,F)||Y(t,F,y(1,{})),t[F][r]=!0),rt(t,r,n)):Y(t,r,n)},st=function(t,e){p(t);var n=v(e),r=w(n).concat(lt(n));return z(r,(function(e){s&&!ut.call(n,e)||at(t,e,n[e])})),t},ut=function(t){var e=b(t,!0),n=V.call(this,e);return!(this===q&&l(K,e)&&!l(X,e))&&(!(n||!l(this,e)||!l(K,e)||l(this,F)&&this[F][e])||n)},ft=function(t,e){var n=v(t),r=b(e,!0);if(n!==q||!l(K,r)||l(X,r)){var i=G(n,r);return!i||!l(K,r)||l(n,F)&&n[F][r]||(i.enumerable=!0),i}},ct=function(t){var e=$(v(t)),n=[];return z(e,(function(t){l(K,t)||l(j,t)||n.push(t)})),n},lt=function(t){var e=t===q,n=$(e?X:v(t)),r=[];return z(n,(function(t){!l(K,t)||e&&!l(q,t)||r.push(K[t])})),r};(u||(T((W=function(){if(this instanceof W)throw TypeError("Symbol is not a constructor");var t=arguments.length&&void 0!==arguments[0]?String(arguments[0]):void 0,e=L(t),n=function(t){this===q&&n.call(X,t),l(this,F)&&l(this[F],e)&&(this[F][e]=!1),rt(this,e,y(1,t))};return s&&nt&&rt(q,e,{configurable:!0,set:n}),it(e,t)}).prototype,"toString",(function(){return Z(this).tag})),T(W,"withoutSetter",(function(t){return it(L(t),t)})),A.f=ut,S.f=at,E.f=ft,_.f=x.f=ct,k.f=lt,I.f=function(t){return it(P(t),t)},s&&(Y(W.prototype,"description",{configurable:!0,get:function(){return Z(this).description}}),a||T(q,"propertyIsEnumerable",ut,{unsafe:!0}))),r({global:!0,wrap:!0,forced:!u,sham:!u},{Symbol:W}),z(w(tt),(function(t){N(t)})),r({target:"Symbol",stat:!0,forced:!u},{for:function(t){var e=String(t);if(l(J,e))return J[e];var n=W(e);return J[e]=n,Q[n]=e,n},keyFor:function(t){if(!ot(t))throw TypeError(t+" is not a symbol");if(l(Q,t))return Q[t]},useSetter:function(){nt=!0},useSimple:function(){nt=!1}}),r({target:"Object",stat:!0,forced:!u,sham:!s},{create:function(t,e){return void 0===e?m(t):st(m(t),e)},defineProperty:at,defineProperties:st,getOwnPropertyDescriptor:ft}),r({target:"Object",stat:!0,forced:!u},{getOwnPropertyNames:ct,getOwnPropertySymbols:lt}),r({target:"Object",stat:!0,forced:c((function(){k.f(1)}))},{getOwnPropertySymbols:function(t){return k.f(g(t))}}),H)&&r({target:"JSON",stat:!0,forced:!u||c((function(){var t=W();return"[null]"!=H([t])||"{}"!=H({a:t})||"{}"!=H(Object(t))}))},{stringify:function(t,e,n){for(var r,i=[t],o=1;arguments.length>o;)i.push(arguments[o++]);if(r=e,(d(e)||void 0!==t)&&!ot(t))return h(e)||(e=function(t,e){if("function"==typeof r&&(e=r.call(this,t,e)),!ot(e))return e}),i[1]=e,H.apply(null,i)}});W.prototype[U]||O(W.prototype,U,W.prototype.valueOf),C(W,"Symbol"),j[F]=!0},function(t,e,n){n(5)("asyncIterator")},function(t,e,n){n(5)("iterator")},function(t,e,n){t.exports=n(274)},function(t,e,n){n(58),n(275);var r=n(1);t.exports=r.Array.from},function(t,e,n){var r=n(11);t.exports=function(t,e,n,i){try{return i?e(r(n)[0],n[1]):e(n)}catch(e){var o=t.return;throw void 0!==o&&r(o.call(t)),e}}},function(t,e,n){var r=n(4),i=n(44),o=r("iterator"),a=Array.prototype;t.exports=function(t){return void 0!==t&&(i.Array===t||a[o]===t)}},function(t,e,n){var r=n(4)("iterator"),i=!1;try{var o=0,a={next:function(){return{done:!!o++}},return:function(){i=!0}};a[r]=function(){return this},Array.from(a,(function(){throw 2}))}catch(t){}t.exports=function(t,e){if(!e&&!i)return!1;var n=!1;try{var o={};o[r]=function(){return{next:function(){return{done:n=!0}}}},t(o)}catch(t){}return n}},function(t,e,n){n(290);var r=n(1).Object,i=t.exports=function(t,e){return r.getOwnPropertyDescriptor(t,e)};r.getOwnPropertyDescriptor.sham&&(i.sham=!0)},function(t,e,n){n(163);var r=n(1);t.exports=r.Object.getOwnPropertySymbols},function(t,e,n){n(297);var r=n(1);t.exports=r.Object.keys},function(t,e,n){"use strict";var r=n(14),i=n(7),o=[].slice,a={},s=function(t,e,n){if(!(e in a)){for(var r=[],i=0;i<e;i++)r[i]="a["+i+"]";a[e]=Function("C,a","return new C("+r.join(",")+")")}return a[e](t,n)};t.exports=Function.bind||function(t){var e=r(this),n=o.call(arguments,1),a=function(){var r=n.concat(o.call(arguments));return this instanceof a?s(e,r.length,r):e.apply(t,r)};return i(e.prototype)&&(a.prototype=e.prototype),a}},function(t,e,n){var r=n(301);t.exports=function(t){if(r(t))return t},t.exports.default=t.exports,t.exports.__esModule=!0},function(t,e,n){var r=n(310),i=n(178),o=n(315);t.exports=function(t,e){var n;if(t){if("string"==typeof t)return o(t,e);var a=r(n=Object.prototype.toString.call(t)).call(n,8,-1);return"Object"===a&&t.constructor&&(a=t.constructor.name),"Map"===a||"Set"===a?i(t):"Arguments"===a||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a)?o(t,e):void 0}},t.exports.default=t.exports,t.exports.__esModule=!0},function(t,e,n){var r=n(312),i=Array.prototype;t.exports=function(t){var e=t.slice;return t===i||t instanceof Array&&e===i.slice?r:e}},function(t,e,n){t.exports=n(314)},function(t,e){t.exports=function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")},t.exports.default=t.exports,t.exports.__esModule=!0},function(t,e,n){n(99),n(58),n(43),n(322),n(186),n(326);var r=n(1);t.exports=r.Promise},function(t,e,n){var r=n(2);t.exports=r.Promise},function(t,e,n){var r=n(11),i=n(14),o=n(4)("species");t.exports=function(t,e){var n,a=r(t).constructor;return void 0===a||null==(n=r(a)[o])?e:i(n)}},function(t,e,n){var r,i,o,a=n(2),s=n(3),u=n(34),f=n(42),c=n(156),l=n(90),h=n(184),d=a.location,p=a.setImmediate,g=a.clearImmediate,v=a.process,b=a.MessageChannel,y=a.Dispatch,m=0,w={},_=function(t){if(w.hasOwnProperty(t)){var e=w[t];delete w[t],e()}},x=function(t){return function(){_(t)}},k=function(t){_(t.data)},E=function(t){a.postMessage(t+"",d.protocol+"//"+d.host)};p&&g||(p=function(t){for(var e=[],n=1;arguments.length>n;)e.push(arguments[n++]);return w[++m]=function(){("function"==typeof t?t:Function(t)).apply(void 0,e)},r(m),m},g=function(t){delete w[t]},"process"==u(v)?r=function(t){v.nextTick(x(t))}:y&&y.now?r=function(t){y.now(x(t))}:b&&!h?(o=(i=new b).port2,i.port1.onmessage=k,r=f(o.postMessage,o,1)):!a.addEventListener||"function"!=typeof postMessage||a.importScripts||s(E)||"file:"===d.protocol?r="onreadystatechange"in l("script")?function(t){c.appendChild(l("script")).onreadystatechange=function(){c.removeChild(this),_(t)}}:function(t){setTimeout(x(t),0)}:(r=E,a.addEventListener("message",k,!1))),t.exports={set:p,clear:g}},function(t,e,n){var r=n(98);t.exports=/(iphone|ipod|ipad).*applewebkit/i.test(r)},function(t,e,n){var r=n(11),i=n(7),o=n(63);t.exports=function(t,e){if(r(t),i(e)&&e.constructor===t)return e;var n=o.f(t);return(0,n.resolve)(e),n.promise}},function(t,e,n){"use strict";var r=n(0),i=n(14),o=n(63),a=n(83),s=n(37);r({target:"Promise",stat:!0},{allSettled:function(t){var e=this,n=o.f(e),r=n.resolve,u=n.reject,f=a((function(){var n=i(e.resolve),o=[],a=0,u=1;s(t,(function(t){var i=a++,s=!1;o.push(void 0),u++,n.call(e,t).then((function(t){s||(s=!0,o[i]={status:"fulfilled",value:t},--u||r(o))}),(function(t){s||(s=!0,o[i]={status:"rejected",reason:t},--u||r(o))}))})),--u||r(o)}));return f.error&&u(f.value),n.promise}})},function(t,e,n){t.exports=n(337)},function(t,e,n){var r=n(47),i=n(114);function o(e){return"function"==typeof r&&"symbol"==typeof i?(t.exports=o=function(t){return typeof t},t.exports.default=t.exports,t.exports.__esModule=!0):(t.exports=o=function(t){return t&&"function"==typeof r&&t.constructor===r&&t!==r.prototype?"symbol":typeof t},t.exports.default=t.exports,t.exports.__esModule=!0),o(e)}t.exports=o,t.exports.default=t.exports,t.exports.__esModule=!0},function(t,e,n){"use strict";var r=n(15);n(12)(e,"__esModule",{value:!0}),e.fromBytes=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(n)throw new Error("big-endian virtual file offsets not implemented");return new u(1099511627776*t[e+7]+4294967296*t[e+6]+16777216*t[e+5]+65536*t[e+4]+256*t[e+3]+t[e+2],t[e+1]<<8|t[e])},e.default=void 0;var i=r(n(50)),o=r(n(30)),a=r(n(31)),s=r(n(29)),u=function(){function t(e,n){(0,o.default)(this,t),(0,s.default)(this,"blockPosition",void 0),(0,s.default)(this,"dataPosition",void 0),this.blockPosition=e,this.dataPosition=n}return(0,a.default)(t,[{key:"toString",value:function(){var t;return(0,i.default)(t="".concat(this.blockPosition,":")).call(t,this.dataPosition)}},{key:"compareTo",value:function(t){return this.blockPosition-t.blockPosition||this.dataPosition-t.dataPosition}}],[{key:"min",value:function(){for(var t,e=0,n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];for(;!t;e+=1)t=r[e];for(;e<r.length;e+=1)t.compareTo(r[e])>0&&(t=r[e]);return t}}]),t}();e.default=u},function(t,e,n){"use strict";var r=n(15);n(12)(e,"__esModule",{value:!0}),e.default=void 0;var i=r(n(50)),o=r(n(30)),a=r(n(31)),s=r(n(29)),u=function(){function t(e,n,r){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:void 0;(0,o.default)(this,t),(0,s.default)(this,"minv",void 0),(0,s.default)(this,"maxv",void 0),(0,s.default)(this,"bin",void 0),(0,s.default)(this,"_fetchedSize",void 0),this.minv=e,this.maxv=n,this.bin=r,this._fetchedSize=i}return(0,a.default)(t,[{key:"toUniqueString",value:function(){var t,e,n;return(0,i.default)(t=(0,i.default)(e=(0,i.default)(n="".concat(this.minv,"..")).call(n,this.maxv," (bin ")).call(e,this.bin,", fetchedSize ")).call(t,this.fetchedSize(),")")}},{key:"toString",value:function(){return this.toUniqueString()}},{key:"compareTo",value:function(t){return this.minv.compareTo(t.minv)||this.maxv.compareTo(t.maxv)||this.bin-t.bin}},{key:"fetchedSize",value:function(){return void 0!==this._fetchedSize?this._fetchedSize:this.maxv.blockPosition+65536-this.minv.blockPosition}}]),t}();e.default=u},function(t,e,n){"use strict";var r=n(15);n(12)(e,"__esModule",{value:!0}),e.default=void 0;var i=r(n(12)),o=r(n(102)),a=r(n(103)),s=r(n(36)),u=r(n(104)),f=r(n(61)),c=r(n(105)),l=r(n(81)),h=r(n(48)),d=r(n(49)),p=r(n(30)),g=r(n(31)),v=r(n(29)),b=r(n(192)),y=r(n(194));function m(t,e){var n=(0,l.default)(t);if(c.default){var r=(0,c.default)(t);e&&(r=(0,f.default)(r).call(r,(function(e){return(0,u.default)(t,e).enumerable}))),n.push.apply(n,r)}return n}function w(t){for(var e=1;e<arguments.length;e++){var n,r=null!=arguments[e]?arguments[e]:{};if(e%2)(0,s.default)(n=m(Object(r),!0)).call(n,(function(e){(0,v.default)(t,e,r[e])}));else if(a.default)(0,o.default)(t,(0,a.default)(r));else{var f;(0,s.default)(f=m(Object(r))).call(f,(function(e){(0,i.default)(t,e,(0,u.default)(r,e))}))}}return t}var _=function(){function t(e){var n=e.filehandle,r=e.renameRefSeq,i=void 0===r?function(t){return t}:r;(0,p.default)(this,t),(0,v.default)(this,"filehandle",void 0),(0,v.default)(this,"renameRefSeq",void 0),(0,v.default)(this,"_parseCache",void 0),this.filehandle=n,this.renameRefSeq=i}var e,n;return(0,g.default)(t,[{key:"_findFirstData",value:function(t,e){var n=t.firstDataLine;t.firstDataLine=n?n.compareTo(e)>0?e:n:e}},{key:"parse",value:(n=(0,d.default)(h.default.mark((function t(){var e,n=this,r=arguments;return h.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return e=r.length>0&&void 0!==r[0]?r[0]:{},this._parseCache||(this._parseCache=new b.default({cache:new y.default({maxSize:1}),fill:function(t,e){return n._parse(w(w({},t),{},{signal:e}))}})),t.abrupt("return",this._parseCache.get("index",e,e.signal));case 3:case"end":return t.stop()}}),t,this)}))),function(){return n.apply(this,arguments)})},{key:"hasRefSeq",value:(e=(0,d.default)(h.default.mark((function t(e){var n,r=arguments;return h.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n=r.length>1&&void 0!==r[1]?r[1]:{},t.next=3,this.parse(n);case 3:if(t.t1=e,t.t0=t.sent.indices[t.t1],t.t0){t.next=7;break}t.t0={};case 7:return t.abrupt("return",!!t.t0.binIndex);case 8:case"end":return t.stop()}}),t,this)}))),function(t){return e.apply(this,arguments)})}]),t}();e.default=_},function(t,e,n){"use strict";var r=n(32);Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var i=r(n(349)).default;e.default=i},function(t,e,n){"use strict";(function(t){Object.defineProperty(e,"__esModule",{value:!0}),e.AbortSignal=e.AbortController=void 0;var r=n(351),i=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==t)return t;throw new Error("unable to locate global object")},o=void 0===i().AbortController?r.AbortController:i().AbortController;e.AbortController=o;var a=void 0===i().AbortController?r.AbortSignal:i().AbortSignal;e.AbortSignal=a}).call(this,n(21))},function(t,e,n){"use strict";class r{constructor(t={}){if(!(t.maxSize&&t.maxSize>0))throw new TypeError("`maxSize` must be a number greater than 0");this.maxSize=t.maxSize,this.cache=new Map,this.oldCache=new Map,this._size=0}_set(t,e){this.cache.set(t,e),this._size++,this._size>=this.maxSize&&(this._size=0,this.oldCache=this.cache,this.cache=new Map)}get(t){if(this.cache.has(t))return this.cache.get(t);if(this.oldCache.has(t)){const e=this.oldCache.get(t);return this._set(t,e),e}}set(t,e){return this.cache.has(t)?this.cache.set(t,e):this._set(t,e),this}has(t){return this.cache.has(t)||this.oldCache.has(t)}peek(t){return this.cache.has(t)?this.cache.get(t):this.oldCache.has(t)?this.oldCache.get(t):void 0}delete(t){const e=this.cache.delete(t);return e&&this._size--,this.oldCache.delete(t)||e}clear(){this.cache.clear(),this.oldCache.clear(),this._size=0}*keys(){for(const[t]of this)yield t}*values(){for(const[,t]of this)yield t}*[Symbol.iterator](){for(const t of this.cache)yield t;for(const t of this.oldCache){const[e]=t;this.cache.has(e)||(yield t)}}get size(){let t=0;for(const e of this.oldCache.keys())this.cache.has(e)||t++;return this._size+t}}t.exports=r},function(t,e,n){t.exports=n(354)},function(t,e,n){"use strict";var r=n(197),i=n(15);n(12)(e,"__esModule",{value:!0}),e.default=void 0;var o=i(n(144)),a=i(n(157)),s=i(n(60)),u=i(n(159)),f=i(n(166)),c=i(n(106)),l=i(n(50)),h=i(n(82)),d=i(n(64)),p=i(n(387)),g=i(n(48)),v=i(n(49)),b=i(n(30)),y=i(n(31)),m=i(n(115)),w=i(n(112)),_=i(n(113)),x=i(n(116)),k=i(n(29)),E=i(n(117)),S=n(122),A=r(n(189)),O=i(n(190)),T=n(119),M=i(n(191));function R(t,e){var n;if(void 0===u.default||null==(0,s.default)(t)){if((0,a.default)(t)||(n=function(t,e){var n;if(!t)return;if("string"==typeof t)return j(t,e);var r=(0,d.default)(n=Object.prototype.toString.call(t)).call(n,8,-1);"Object"===r&&t.constructor&&(r=t.constructor.name);if("Map"===r||"Set"===r)return(0,f.default)(t);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return j(t,e)}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0,i=function(){};return{s:i,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var c,l=!0,h=!1;return{s:function(){n=(0,o.default)(t)},n:function(){var t=n.next();return l=t.done,t},e:function(t){h=!0,c=t},f:function(){try{l||null==n.return||n.return()}finally{if(h)throw c}}}}function j(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function L(t){var e=function(){if("undefined"==typeof Reflect||!c.default)return!1;if(c.default.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call((0,c.default)(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=(0,x.default)(t);if(e){var i=(0,x.default)(this).constructor;n=(0,c.default)(r,arguments,i)}else n=r.apply(this,arguments);return(0,_.default)(this,n)}}function P(t,e){return Math.floor(t/Math.pow(2,e))}var I=function(t){(0,w.default)(a,t);var e,n,r,i,o=L(a);function a(t){var e;return(0,b.default)(this,a),e=o.call(this,t),(0,k.default)((0,m.default)(e),"maxBinNumber",void 0),(0,k.default)((0,m.default)(e),"depth",void 0),(0,k.default)((0,m.default)(e),"minShift",void 0),e.maxBinNumber=0,e.depth=0,e.minShift=0,e}return(0,y.default)(a,[{key:"lineCount",value:(i=(0,v.default)(g.default.mark((function t(e){var n,r;return g.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this.parse();case 2:if(n=t.sent){t.next=5;break}return t.abrupt("return",-1);case 5:if(n.indices[e]){t.next=8;break}return t.abrupt("return",-1);case 8:if(!(r=n.indices[e].stats)){t.next=11;break}return t.abrupt("return",r.lineCount);case 11:return t.abrupt("return",-1);case 12:case"end":return t.stop()}}),t,this)}))),function(t){return i.apply(this,arguments)})},{key:"indexCov",value:(r=(0,v.default)(g.default.mark((function t(){return g.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",[]);case 1:case"end":return t.stop()}}),t)}))),function(){return r.apply(this,arguments)})},{key:"parseAuxData",value:function(t,e,n){if(n<30)return{};var r={};if(r.formatFlags=t.readInt32LE(e),r.coordinateType=65536&r.formatFlags?"zero-based-half-open":"1-based-closed",r.format={0:"generic",1:"SAM",2:"VCF"}[15&r.formatFlags],!r.format)throw new Error("invalid Tabix preset format flags ".concat(r.formatFlags));r.columnNumbers={ref:t.readInt32LE(e+4),start:t.readInt32LE(e+8),end:t.readInt32LE(e+12)},r.metaValue=t.readInt32LE(e+16),r.metaChar=r.metaValue?String.fromCharCode(r.metaValue):"",r.skipLines=t.readInt32LE(e+20);var i=t.readInt32LE(e+24);return(0,p.default)(r,this._parseNameBytes((0,d.default)(t).call(t,e+28,e+28+i))),r}},{key:"_parseNameBytes",value:function(t){for(var e=0,n=0,r=[],i={},o=0;o<t.length;o+=1)if(!t[o]){if(n<o){var a=t.toString("utf8",n,o);a=this.renameRefSeq(a),r[e]=a,i[a]=e}n=o+1,e+=1}return{refNameToId:i,refIdToName:r}}},{key:"_parse",value:(n=(0,v.default)(g.default.mark((function t(e){var n,r,i,o,a,s,u,f,c,l,h,d,v,b,y,m,w;return g.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n={csi:!0,maxBlockSize:65536},t.next=3,this.filehandle.readFile(e);case 3:return r=t.sent,t.next=6,(0,S.unzip)(r);case 6:if(21582659!==(i=t.sent).readUInt32LE(0)){t.next=11;break}n.csiVersion=1,t.next=16;break;case 11:if(38359875!==i.readUInt32LE(0)){t.next=15;break}n.csiVersion=2,t.next=16;break;case 15:throw new Error("Not a CSI file");case 16:this.minShift=i.readInt32LE(4),this.depth=i.readInt32LE(8),this.maxBinNumber=((1<<3*(this.depth+1))-1)/7,(o=i.readInt32LE(12))&&(0,p.default)(n,this.parseAuxData(i,16,o)),n.refCount=i.readInt32LE(16+o),n.indices=new Array(n.refCount),a=16+o+4,s=0;case 25:if(!(s<n.refCount)){t.next=37;break}return t.next=28,(0,T.abortBreakPoint)(e.signal);case 28:for(u=i.readInt32LE(a),a+=4,f={},c=void 0,l=0;l<u;l+=1)if((h=i.readUInt32LE(a))>this.maxBinNumber)c=this.parsePseudoBin(i,a+4),a+=48;else{for(d=(0,A.fromBytes)(i,a+4),this._findFirstData(n,d),v=i.readInt32LE(a+12),a+=16,b=new Array(v),y=0;y<v;y+=1)m=(0,A.fromBytes)(i,a),w=(0,A.fromBytes)(i,a+8),a+=16,b[y]=new O.default(m,w,h);f[h]=b}n.indices[s]={binIndex:f,stats:c};case 34:s+=1,t.next=25;break;case 37:return t.abrupt("return",n);case 38:case"end":return t.stop()}}),t,this)}))),function(t){return n.apply(this,arguments)})},{key:"parsePseudoBin",value:function(t,e){return{lineCount:(0,T.longToNumber)(E.default.fromBytesLE((0,d.default)(Array.prototype).call(t,e+28,e+36),!0))}}},{key:"blocksForRange",value:(e=(0,v.default)(g.default.mark((function t(e,n,r){var i,o,a,s,u,f,c,l,d,p,v,b,y,m=arguments;return g.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return i=m.length>3&&void 0!==m[3]?m[3]:{},n<0&&(n=0),t.next=4,this.parse(i);case 4:if(o=t.sent){t.next=7;break}return t.abrupt("return",[]);case 7:if(a=o.indices[e]){t.next=10;break}return t.abrupt("return",[]);case 10:s=this.reg2bins(n,r),u=[],f=R(s);try{for(f.s();!(c=f.n()).done;)for(l=(0,h.default)(c.value,2),d=l[0],p=l[1],v=d;v<=p;v++)if(a.binIndex[v])for(b=a.binIndex[v],y=0;y<b.length;++y)u.push(new O.default(b[y].minv,b[y].maxv,v))}catch(t){f.e(t)}finally{f.f()}return t.abrupt("return",(0,T.optimizeChunks)(u,new A.default(0,0)));case 15:case"end":return t.stop()}}),t,this)}))),function(t,n,r){return e.apply(this,arguments)})},{key:"reg2bins",value:function(t,e){(t-=1)<1&&(t=1),e>Math.pow(2,50)&&(e=Math.pow(2,34)),e-=1;for(var n,r=0,i=0,o=this.minShift+3*this.depth,a=[];r<=this.depth;o-=3,i+=(n=3*r,1*Math.pow(2,n)),r+=1){var s,u,f,c=i+P(t,o),h=i+P(e,o);if(h-c+a.length>this.maxBinNumber)throw new Error((0,l.default)(s=(0,l.default)(u=(0,l.default)(f="query ".concat(t,"-")).call(f,e," is too large for current binning scheme (shift ")).call(u,this.minShift,", depth ")).call(s,this.depth,"), try a smaller query or a coarser index binning scheme"));a.push([c,h])}return a}}]),a}(M.default);e.default=I},function(t,e,n){var r=n(188).default,i=n(370),o=n(107),a=n(385);function s(t){if("function"!=typeof i)return null;var e=new i,n=new i;return(s=function(t){return t?n:e})(t)}t.exports=function(t,e){if(!e&&t&&t.__esModule)return t;if(null===t||"object"!==r(t)&&"function"!=typeof t)return{default:t};var n=s(e);if(n&&n.has(t))return n.get(t);var i={},u=o&&a;for(var f in t)if("default"!==f&&Object.prototype.hasOwnProperty.call(t,f)){var c=u?a(t,f):null;c&&(c.get||c.set)?o(i,f,c):i[f]=t[f]}return i.default=t,n&&n.set(t,i),i},t.exports.default=t.exports,t.exports.__esModule=!0},function(t,e,n){"use strict";(function(e){var r=n(32),i=r(n(84)),o=r(n(85)),a=n(399),s=(0,n(210).promisify)(a.gunzip),u=n(420),f=u.Z_SYNC_FLUSH,c=u.Inflate;function l(t){return h.apply(this,arguments)}function h(){return(h=(0,o.default)(i.default.mark((function t(n){var r,o,a,s,u,l,h;return i.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:t.prev=0,o=0,a=0,s=[];case 4:if(l=n.slice(o),u=new c,r=u.strm,u.push(l,f),!u.err){t.next=11;break}throw new Error(u.msg);case 11:o+=r.next_in,s[a]=e.from(u.result),a+=1;case 14:if(r.avail_in){t.next=4;break}case 15:return h=e.concat(s),t.abrupt("return",h);case 19:if(t.prev=19,t.t0=t.catch(0),!t.t0.message.match(/incorrect header check/)){t.next=23;break}throw new Error("problem decompressing block: incorrect gzip header check");case 23:case"end":return t.stop()}}),t,null,[[0,19]])})))).apply(this,arguments)}function d(){return(d=(0,o.default)(i.default.mark((function t(n){var r,o,a,s,u,l,h,d,p,g;return i.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:t.prev=0,o=0,a=0,s=[],u=[],l=[];case 6:if(h=n.slice(o),d=new c,r=d.strm,d.push(h,f),!d.err){t.next=12;break}throw new Error(d.msg);case 12:p=e.from(d.result),s.push(p),u.push(o),l.push(a),o+=r.next_in,a+=p.length;case 18:if(r.avail_in){t.next=6;break}case 19:return g=e.concat(s),t.abrupt("return",{buffer:g,cpositions:u,dpositions:l});case 23:if(t.prev=23,t.t0=t.catch(0),!t.t0.message.match(/incorrect header check/)){t.next=27;break}throw new Error("problem decompressing block: incorrect gzip header check");case 27:case"end":return t.stop()}}),t,null,[[0,23]])})))).apply(this,arguments)}function p(){return(p=(0,o.default)(i.default.mark((function t(n,r){var o,a,s,u,l,h,d,p,g,v,b,y;return i.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:t.prev=0,a=r.minv.blockPosition,s=r.minv.dataPosition,u=[],l=[],h=[];case 6:if(d=n.slice(a-r.minv.blockPosition),p=new c,o=p.strm,p.push(d,f),!p.err){t.next=12;break}throw new Error(p.msg);case 12:if(g=e.from(p.result),u.push(g),v=g.length,l.push(a),h.push(s),1===u.length&&r.minv.dataPosition&&(u[0]=u[0].slice(r.minv.dataPosition),v=u[0].length),b=a,a+=o.next_in,s+=v,!(b>=r.maxv.blockPosition)){t.next=26;break}return u[u.length-1]=u[u.length-1].slice(0,r.maxv.blockPosition===r.minv.blockPosition?r.maxv.dataPosition-r.minv.dataPosition+1:r.maxv.dataPosition+1),l.push(a),h.push(s),t.abrupt("break",27);case 26:if(o.avail_in){t.next=6;break}case 27:return y=e.concat(u),t.abrupt("return",{buffer:y,cpositions:l,dpositions:h});case 31:if(t.prev=31,t.t0=t.catch(0),!t.t0.message.match(/incorrect header check/)){t.next=35;break}throw new Error("problem decompressing block: incorrect gzip header check");case 35:case"end":return t.stop()}}),t,null,[[0,31]])})))).apply(this,arguments)}t.exports={unzip:l,unzipChunk:function(t){return d.apply(this,arguments)},unzipChunkSlice:function(t,e){return p.apply(this,arguments)},nodeUnzip:function(t){return s(t,{finishFlush:(a.constants||a).Z_SYNC_FLUSH})},pakoUnzip:l}}).call(this,n(9).Buffer)},function(t,e,n){"use strict";(function(e,r){var i=n(86);t.exports=m;var o,a=n(137);m.ReadableState=y;n(123).EventEmitter;var s=function(t,e){return t.listeners(e).length},u=n(200),f=n(125).Buffer,c=e.Uint8Array||function(){};var l=Object.create(n(65));l.inherits=n(53);var h=n(401),d=void 0;d=h&&h.debuglog?h.debuglog("stream"):function(){};var p,g=n(402),v=n(201);l.inherits(m,u);var b=["error","close","destroy","pause","resume"];function y(t,e){t=t||{};var r=e instanceof(o=o||n(38));this.objectMode=!!t.objectMode,r&&(this.objectMode=this.objectMode||!!t.readableObjectMode);var i=t.highWaterMark,a=t.readableHighWaterMark,s=this.objectMode?16:16384;this.highWaterMark=i||0===i?i:r&&(a||0===a)?a:s,this.highWaterMark=Math.floor(this.highWaterMark),this.buffer=new g,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.destroyed=!1,this.defaultEncoding=t.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,t.encoding&&(p||(p=n(202).StringDecoder),this.decoder=new p(t.encoding),this.encoding=t.encoding)}function m(t){if(o=o||n(38),!(this instanceof m))return new m(t);this._readableState=new y(t,this),this.readable=!0,t&&("function"==typeof t.read&&(this._read=t.read),"function"==typeof t.destroy&&(this._destroy=t.destroy)),u.call(this)}function w(t,e,n,r,i){var o,a=t._readableState;null===e?(a.reading=!1,function(t,e){if(e.ended)return;if(e.decoder){var n=e.decoder.end();n&&n.length&&(e.buffer.push(n),e.length+=e.objectMode?1:n.length)}e.ended=!0,k(t)}(t,a)):(i||(o=function(t,e){var n;r=e,f.isBuffer(r)||r instanceof c||"string"==typeof e||void 0===e||t.objectMode||(n=new TypeError("Invalid non-string/buffer chunk"));var r;return n}(a,e)),o?t.emit("error",o):a.objectMode||e&&e.length>0?("string"==typeof e||a.objectMode||Object.getPrototypeOf(e)===f.prototype||(e=function(t){return f.from(t)}(e)),r?a.endEmitted?t.emit("error",new Error("stream.unshift() after end event")):_(t,a,e,!0):a.ended?t.emit("error",new Error("stream.push() after EOF")):(a.reading=!1,a.decoder&&!n?(e=a.decoder.write(e),a.objectMode||0!==e.length?_(t,a,e,!1):S(t,a)):_(t,a,e,!1))):r||(a.reading=!1));return function(t){return!t.ended&&(t.needReadable||t.length<t.highWaterMark||0===t.length)}(a)}function _(t,e,n,r){e.flowing&&0===e.length&&!e.sync?(t.emit("data",n),t.read(0)):(e.length+=e.objectMode?1:n.length,r?e.buffer.unshift(n):e.buffer.push(n),e.needReadable&&k(t)),S(t,e)}Object.defineProperty(m.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(t){this._readableState&&(this._readableState.destroyed=t)}}),m.prototype.destroy=v.destroy,m.prototype._undestroy=v.undestroy,m.prototype._destroy=function(t,e){this.push(null),e(t)},m.prototype.push=function(t,e){var n,r=this._readableState;return r.objectMode?n=!0:"string"==typeof t&&((e=e||r.defaultEncoding)!==r.encoding&&(t=f.from(t,e),e=""),n=!0),w(this,t,e,!1,n)},m.prototype.unshift=function(t){return w(this,t,null,!0,!1)},m.prototype.isPaused=function(){return!1===this._readableState.flowing},m.prototype.setEncoding=function(t){return p||(p=n(202).StringDecoder),this._readableState.decoder=new p(t),this._readableState.encoding=t,this};function x(t,e){return t<=0||0===e.length&&e.ended?0:e.objectMode?1:t!=t?e.flowing&&e.length?e.buffer.head.data.length:e.length:(t>e.highWaterMark&&(e.highWaterMark=function(t){return t>=8388608?t=8388608:(t--,t|=t>>>1,t|=t>>>2,t|=t>>>4,t|=t>>>8,t|=t>>>16,t++),t}(t)),t<=e.length?t:e.ended?e.length:(e.needReadable=!0,0))}function k(t){var e=t._readableState;e.needReadable=!1,e.emittedReadable||(d("emitReadable",e.flowing),e.emittedReadable=!0,e.sync?i.nextTick(E,t):E(t))}function E(t){d("emit readable"),t.emit("readable"),M(t)}function S(t,e){e.readingMore||(e.readingMore=!0,i.nextTick(A,t,e))}function A(t,e){for(var n=e.length;!e.reading&&!e.flowing&&!e.ended&&e.length<e.highWaterMark&&(d("maybeReadMore read 0"),t.read(0),n!==e.length);)n=e.length;e.readingMore=!1}function O(t){d("readable nexttick read 0"),t.read(0)}function T(t,e){e.reading||(d("resume read 0"),t.read(0)),e.resumeScheduled=!1,e.awaitDrain=0,t.emit("resume"),M(t),e.flowing&&!e.reading&&t.read(0)}function M(t){var e=t._readableState;for(d("flow",e.flowing);e.flowing&&null!==t.read(););}function R(t,e){return 0===e.length?null:(e.objectMode?n=e.buffer.shift():!t||t>=e.length?(n=e.decoder?e.buffer.join(""):1===e.buffer.length?e.buffer.head.data:e.buffer.concat(e.length),e.buffer.clear()):n=function(t,e,n){var r;t<e.head.data.length?(r=e.head.data.slice(0,t),e.head.data=e.head.data.slice(t)):r=t===e.head.data.length?e.shift():n?function(t,e){var n=e.head,r=1,i=n.data;t-=i.length;for(;n=n.next;){var o=n.data,a=t>o.length?o.length:t;if(a===o.length?i+=o:i+=o.slice(0,t),0===(t-=a)){a===o.length?(++r,n.next?e.head=n.next:e.head=e.tail=null):(e.head=n,n.data=o.slice(a));break}++r}return e.length-=r,i}(t,e):function(t,e){var n=f.allocUnsafe(t),r=e.head,i=1;r.data.copy(n),t-=r.data.length;for(;r=r.next;){var o=r.data,a=t>o.length?o.length:t;if(o.copy(n,n.length-t,0,a),0===(t-=a)){a===o.length?(++i,r.next?e.head=r.next:e.head=e.tail=null):(e.head=r,r.data=o.slice(a));break}++i}return e.length-=i,n}(t,e);return r}(t,e.buffer,e.decoder),n);var n}function j(t){var e=t._readableState;if(e.length>0)throw new Error('"endReadable()" called on non-empty stream');e.endEmitted||(e.ended=!0,i.nextTick(L,e,t))}function L(t,e){t.endEmitted||0!==t.length||(t.endEmitted=!0,e.readable=!1,e.emit("end"))}function P(t,e){for(var n=0,r=t.length;n<r;n++)if(t[n]===e)return n;return-1}m.prototype.read=function(t){d("read",t),t=parseInt(t,10);var e=this._readableState,n=t;if(0!==t&&(e.emittedReadable=!1),0===t&&e.needReadable&&(e.length>=e.highWaterMark||e.ended))return d("read: emitReadable",e.length,e.ended),0===e.length&&e.ended?j(this):k(this),null;if(0===(t=x(t,e))&&e.ended)return 0===e.length&&j(this),null;var r,i=e.needReadable;return d("need readable",i),(0===e.length||e.length-t<e.highWaterMark)&&d("length less than watermark",i=!0),e.ended||e.reading?d("reading or ended",i=!1):i&&(d("do read"),e.reading=!0,e.sync=!0,0===e.length&&(e.needReadable=!0),this._read(e.highWaterMark),e.sync=!1,e.reading||(t=x(n,e))),null===(r=t>0?R(t,e):null)?(e.needReadable=!0,t=0):e.length-=t,0===e.length&&(e.ended||(e.needReadable=!0),n!==t&&e.ended&&j(this)),null!==r&&this.emit("data",r),r},m.prototype._read=function(t){this.emit("error",new Error("_read() is not implemented"))},m.prototype.pipe=function(t,e){var n=this,o=this._readableState;switch(o.pipesCount){case 0:o.pipes=t;break;case 1:o.pipes=[o.pipes,t];break;default:o.pipes.push(t)}o.pipesCount+=1,d("pipe count=%d opts=%j",o.pipesCount,e);var u=(!e||!1!==e.end)&&t!==r.stdout&&t!==r.stderr?c:m;function f(e,r){d("onunpipe"),e===n&&r&&!1===r.hasUnpiped&&(r.hasUnpiped=!0,d("cleanup"),t.removeListener("close",b),t.removeListener("finish",y),t.removeListener("drain",l),t.removeListener("error",v),t.removeListener("unpipe",f),n.removeListener("end",c),n.removeListener("end",m),n.removeListener("data",g),h=!0,!o.awaitDrain||t._writableState&&!t._writableState.needDrain||l())}function c(){d("onend"),t.end()}o.endEmitted?i.nextTick(u):n.once("end",u),t.on("unpipe",f);var l=function(t){return function(){var e=t._readableState;d("pipeOnDrain",e.awaitDrain),e.awaitDrain&&e.awaitDrain--,0===e.awaitDrain&&s(t,"data")&&(e.flowing=!0,M(t))}}(n);t.on("drain",l);var h=!1;var p=!1;function g(e){d("ondata"),p=!1,!1!==t.write(e)||p||((1===o.pipesCount&&o.pipes===t||o.pipesCount>1&&-1!==P(o.pipes,t))&&!h&&(d("false write response, pause",n._readableState.awaitDrain),n._readableState.awaitDrain++,p=!0),n.pause())}function v(e){d("onerror",e),m(),t.removeListener("error",v),0===s(t,"error")&&t.emit("error",e)}function b(){t.removeListener("finish",y),m()}function y(){d("onfinish"),t.removeListener("close",b),m()}function m(){d("unpipe"),n.unpipe(t)}return n.on("data",g),function(t,e,n){if("function"==typeof t.prependListener)return t.prependListener(e,n);t._events&&t._events[e]?a(t._events[e])?t._events[e].unshift(n):t._events[e]=[n,t._events[e]]:t.on(e,n)}(t,"error",v),t.once("close",b),t.once("finish",y),t.emit("pipe",n),o.flowing||(d("pipe resume"),n.resume()),t},m.prototype.unpipe=function(t){var e=this._readableState,n={hasUnpiped:!1};if(0===e.pipesCount)return this;if(1===e.pipesCount)return t&&t!==e.pipes||(t||(t=e.pipes),e.pipes=null,e.pipesCount=0,e.flowing=!1,t&&t.emit("unpipe",this,n)),this;if(!t){var r=e.pipes,i=e.pipesCount;e.pipes=null,e.pipesCount=0,e.flowing=!1;for(var o=0;o<i;o++)r[o].emit("unpipe",this,n);return this}var a=P(e.pipes,t);return-1===a||(e.pipes.splice(a,1),e.pipesCount-=1,1===e.pipesCount&&(e.pipes=e.pipes[0]),t.emit("unpipe",this,n)),this},m.prototype.on=function(t,e){var n=u.prototype.on.call(this,t,e);if("data"===t)!1!==this._readableState.flowing&&this.resume();else if("readable"===t){var r=this._readableState;r.endEmitted||r.readableListening||(r.readableListening=r.needReadable=!0,r.emittedReadable=!1,r.reading?r.length&&k(this):i.nextTick(O,this))}return n},m.prototype.addListener=m.prototype.on,m.prototype.resume=function(){var t=this._readableState;return t.flowing||(d("resume"),t.flowing=!0,function(t,e){e.resumeScheduled||(e.resumeScheduled=!0,i.nextTick(T,t,e))}(this,t)),this},m.prototype.pause=function(){return d("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(d("pause"),this._readableState.flowing=!1,this.emit("pause")),this},m.prototype.wrap=function(t){var e=this,n=this._readableState,r=!1;for(var i in t.on("end",(function(){if(d("wrapped end"),n.decoder&&!n.ended){var t=n.decoder.end();t&&t.length&&e.push(t)}e.push(null)})),t.on("data",(function(i){(d("wrapped data"),n.decoder&&(i=n.decoder.write(i)),n.objectMode&&null==i)||(n.objectMode||i&&i.length)&&(e.push(i)||(r=!0,t.pause()))})),t)void 0===this[i]&&"function"==typeof t[i]&&(this[i]=function(e){return function(){return t[e].apply(t,arguments)}}(i));for(var o=0;o<b.length;o++)t.on(b[o],this.emit.bind(this,b[o]));return this._read=function(e){d("wrapped _read",e),r&&(r=!1,t.resume())},this},Object.defineProperty(m.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),m._fromList=R}).call(this,n(21),n(22))},function(t,e,n){t.exports=n(123).EventEmitter},function(t,e,n){"use strict";var r=n(86);function i(t,e){t.emit("error",e)}t.exports={destroy:function(t,e){var n=this,o=this._readableState&&this._readableState.destroyed,a=this._writableState&&this._writableState.destroyed;return o||a?(e?e(t):!t||this._writableState&&this._writableState.errorEmitted||r.nextTick(i,this,t),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(t||null,(function(t){!e&&t?(r.nextTick(i,n,t),n._writableState&&(n._writableState.errorEmitted=!0)):e&&e(t)})),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)}}},function(t,e,n){"use strict";var r=n(407).Buffer,i=r.isEncoding||function(t){switch((t=""+t)&&t.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function o(t){var e;switch(this.encoding=function(t){var e=function(t){if(!t)return"utf8";for(var e;;)switch(t){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return t;default:if(e)return;t=(""+t).toLowerCase(),e=!0}}(t);if("string"!=typeof e&&(r.isEncoding===i||!i(t)))throw new Error("Unknown encoding: "+t);return e||t}(t),this.encoding){case"utf16le":this.text=u,this.end=f,e=4;break;case"utf8":this.fillLast=s,e=4;break;case"base64":this.text=c,this.end=l,e=3;break;default:return this.write=h,void(this.end=d)}this.lastNeed=0,this.lastTotal=0,this.lastChar=r.allocUnsafe(e)}function a(t){return t<=127?0:t>>5==6?2:t>>4==14?3:t>>3==30?4:t>>6==2?-1:-2}function s(t){var e=this.lastTotal-this.lastNeed,n=function(t,e,n){if(128!=(192&e[0]))return t.lastNeed=0,"�";if(t.lastNeed>1&&e.length>1){if(128!=(192&e[1]))return t.lastNeed=1,"�";if(t.lastNeed>2&&e.length>2&&128!=(192&e[2]))return t.lastNeed=2,"�"}}(this,t);return void 0!==n?n:this.lastNeed<=t.length?(t.copy(this.lastChar,e,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(t.copy(this.lastChar,e,0,t.length),void(this.lastNeed-=t.length))}function u(t,e){if((t.length-e)%2==0){var n=t.toString("utf16le",e);if(n){var r=n.charCodeAt(n.length-1);if(r>=55296&&r<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1],n.slice(0,-1)}return n}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=t[t.length-1],t.toString("utf16le",e,t.length-1)}function f(t){var e=t&&t.length?this.write(t):"";if(this.lastNeed){var n=this.lastTotal-this.lastNeed;return e+this.lastChar.toString("utf16le",0,n)}return e}function c(t,e){var n=(t.length-e)%3;return 0===n?t.toString("base64",e):(this.lastNeed=3-n,this.lastTotal=3,1===n?this.lastChar[0]=t[t.length-1]:(this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1]),t.toString("base64",e,t.length-n))}function l(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+this.lastChar.toString("base64",0,3-this.lastNeed):e}function h(t){return t.toString(this.encoding)}function d(t){return t&&t.length?this.write(t):""}e.StringDecoder=o,o.prototype.write=function(t){if(0===t.length)return"";var e,n;if(this.lastNeed){if(void 0===(e=this.fillLast(t)))return"";n=this.lastNeed,this.lastNeed=0}else n=0;return n<t.length?e?e+this.text(t,n):this.text(t,n):e||""},o.prototype.end=function(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+"�":e},o.prototype.text=function(t,e){var n=function(t,e,n){var r=e.length-1;if(r<n)return 0;var i=a(e[r]);if(i>=0)return i>0&&(t.lastNeed=i-1),i;if(--r<n||-2===i)return 0;if((i=a(e[r]))>=0)return i>0&&(t.lastNeed=i-2),i;if(--r<n||-2===i)return 0;if((i=a(e[r]))>=0)return i>0&&(2===i?i=0:t.lastNeed=i-3),i;return 0}(this,t,e);if(!this.lastNeed)return t.toString("utf8",e);this.lastTotal=n;var r=t.length-(n-this.lastNeed);return t.copy(this.lastChar,0,r),t.toString("utf8",e,r)},o.prototype.fillLast=function(t){if(this.lastNeed<=t.length)return t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,t.length),this.lastNeed-=t.length}},function(t,e,n){"use strict";t.exports=a;var r=n(38),i=Object.create(n(65));function o(t,e){var n=this._transformState;n.transforming=!1;var r=n.writecb;if(!r)return this.emit("error",new Error("write callback called multiple times"));n.writechunk=null,n.writecb=null,null!=e&&this.push(e),r(t);var i=this._readableState;i.reading=!1,(i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}function a(t){if(!(this instanceof a))return new a(t);r.call(this,t),this._transformState={afterTransform:o.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,t&&("function"==typeof t.transform&&(this._transform=t.transform),"function"==typeof t.flush&&(this._flush=t.flush)),this.on("prefinish",s)}function s(){var t=this;"function"==typeof this._flush?this._flush((function(e,n){u(t,e,n)})):u(this,null,null)}function u(t,e,n){if(e)return t.emit("error",e);if(null!=n&&t.push(n),t._writableState.length)throw new Error("Calling transform done when ws.length != 0");if(t._transformState.transforming)throw new Error("Calling transform done when still transforming");return t.push(null)}i.inherits=n(53),i.inherits(a,r),a.prototype.push=function(t,e){return this._transformState.needTransform=!1,r.prototype.push.call(this,t,e)},a.prototype._transform=function(t,e,n){throw new Error("_transform() is not implemented")},a.prototype._write=function(t,e,n){var r=this._transformState;if(r.writecb=n,r.writechunk=t,r.writeencoding=e,!r.transforming){var i=this._readableState;(r.needTransform||i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}},a.prototype._read=function(t){var e=this._transformState;null!==e.writechunk&&e.writecb&&!e.transforming?(e.transforming=!0,this._transform(e.writechunk,e.writeencoding,e.afterTransform)):e.needTransform=!0},a.prototype._destroy=function(t,e){var n=this;r.prototype._destroy.call(this,t,(function(t){e(t),n.emit("close")}))}},function(t,e,n){"use strict";(function(e){var r=n(414);
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */function i(t,e){if(t===e)return 0;for(var n=t.length,r=e.length,i=0,o=Math.min(n,r);i<o;++i)if(t[i]!==e[i]){n=t[i],r=e[i];break}return n<r?-1:r<n?1:0}function o(t){return e.Buffer&&"function"==typeof e.Buffer.isBuffer?e.Buffer.isBuffer(t):!(null==t||!t._isBuffer)}var a=n(205),s=Object.prototype.hasOwnProperty,u=Array.prototype.slice,f="foo"===function(){}.name;function c(t){return Object.prototype.toString.call(t)}function l(t){return!o(t)&&("function"==typeof e.ArrayBuffer&&("function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(t):!!t&&(t instanceof DataView||!!(t.buffer&&t.buffer instanceof ArrayBuffer))))}var h=t.exports=y,d=/\s*function\s+([^\(\s]*)\s*/;function p(t){if(a.isFunction(t)){if(f)return t.name;var e=t.toString().match(d);return e&&e[1]}}function g(t,e){return"string"==typeof t?t.length<e?t:t.slice(0,e):t}function v(t){if(f||!a.isFunction(t))return a.inspect(t);var e=p(t);return"[Function"+(e?": "+e:"")+"]"}function b(t,e,n,r,i){throw new h.AssertionError({message:n,actual:t,expected:e,operator:r,stackStartFunction:i})}function y(t,e){t||b(t,!0,e,"==",h.ok)}function m(t,e,n,r){if(t===e)return!0;if(o(t)&&o(e))return 0===i(t,e);if(a.isDate(t)&&a.isDate(e))return t.getTime()===e.getTime();if(a.isRegExp(t)&&a.isRegExp(e))return t.source===e.source&&t.global===e.global&&t.multiline===e.multiline&&t.lastIndex===e.lastIndex&&t.ignoreCase===e.ignoreCase;if(null!==t&&"object"==typeof t||null!==e&&"object"==typeof e){if(l(t)&&l(e)&&c(t)===c(e)&&!(t instanceof Float32Array||t instanceof Float64Array))return 0===i(new Uint8Array(t.buffer),new Uint8Array(e.buffer));if(o(t)!==o(e))return!1;var s=(r=r||{actual:[],expected:[]}).actual.indexOf(t);return-1!==s&&s===r.expected.indexOf(e)||(r.actual.push(t),r.expected.push(e),function(t,e,n,r){if(null==t||null==e)return!1;if(a.isPrimitive(t)||a.isPrimitive(e))return t===e;if(n&&Object.getPrototypeOf(t)!==Object.getPrototypeOf(e))return!1;var i=w(t),o=w(e);if(i&&!o||!i&&o)return!1;if(i)return t=u.call(t),e=u.call(e),m(t,e,n);var s,f,c=k(t),l=k(e);if(c.length!==l.length)return!1;for(c.sort(),l.sort(),f=c.length-1;f>=0;f--)if(c[f]!==l[f])return!1;for(f=c.length-1;f>=0;f--)if(s=c[f],!m(t[s],e[s],n,r))return!1;return!0}(t,e,n,r))}return n?t===e:t==e}function w(t){return"[object Arguments]"==Object.prototype.toString.call(t)}function _(t,e){if(!t||!e)return!1;if("[object RegExp]"==Object.prototype.toString.call(e))return e.test(t);try{if(t instanceof e)return!0}catch(t){}return!Error.isPrototypeOf(e)&&!0===e.call({},t)}function x(t,e,n,r){var i;if("function"!=typeof e)throw new TypeError('"block" argument must be a function');"string"==typeof n&&(r=n,n=null),i=function(t){var e;try{t()}catch(t){e=t}return e}(e),r=(n&&n.name?" ("+n.name+").":".")+(r?" "+r:"."),t&&!i&&b(i,n,"Missing expected exception"+r);var o="string"==typeof r,s=!t&&i&&!n;if((!t&&a.isError(i)&&o&&_(i,n)||s)&&b(i,n,"Got unwanted exception"+r),t&&i&&n&&!_(i,n)||!t&&i)throw i}h.AssertionError=function(t){this.name="AssertionError",this.actual=t.actual,this.expected=t.expected,this.operator=t.operator,t.message?(this.message=t.message,this.generatedMessage=!1):(this.message=function(t){return g(v(t.actual),128)+" "+t.operator+" "+g(v(t.expected),128)}(this),this.generatedMessage=!0);var e=t.stackStartFunction||b;if(Error.captureStackTrace)Error.captureStackTrace(this,e);else{var n=new Error;if(n.stack){var r=n.stack,i=p(e),o=r.indexOf("\n"+i);if(o>=0){var a=r.indexOf("\n",o+1);r=r.substring(a+1)}this.stack=r}}},a.inherits(h.AssertionError,Error),h.fail=b,h.ok=y,h.equal=function(t,e,n){t!=e&&b(t,e,n,"==",h.equal)},h.notEqual=function(t,e,n){t==e&&b(t,e,n,"!=",h.notEqual)},h.deepEqual=function(t,e,n){m(t,e,!1)||b(t,e,n,"deepEqual",h.deepEqual)},h.deepStrictEqual=function(t,e,n){m(t,e,!0)||b(t,e,n,"deepStrictEqual",h.deepStrictEqual)},h.notDeepEqual=function(t,e,n){m(t,e,!1)&&b(t,e,n,"notDeepEqual",h.notDeepEqual)},h.notDeepStrictEqual=function t(e,n,r){m(e,n,!0)&&b(e,n,r,"notDeepStrictEqual",t)},h.strictEqual=function(t,e,n){t!==e&&b(t,e,n,"===",h.strictEqual)},h.notStrictEqual=function(t,e,n){t===e&&b(t,e,n,"!==",h.notStrictEqual)},h.throws=function(t,e,n){x(!0,t,e,n)},h.doesNotThrow=function(t,e,n){x(!1,t,e,n)},h.ifError=function(t){if(t)throw t},h.strict=r((function t(e,n){e||b(e,!0,n,"==",t)}),h,{equal:h.strictEqual,deepEqual:h.deepStrictEqual,notEqual:h.notStrictEqual,notDeepEqual:h.notDeepStrictEqual}),h.strict.strict=h.strict;var k=Object.keys||function(t){var e=[];for(var n in t)s.call(t,n)&&e.push(n);return e}}).call(this,n(21))},function(t,e,n){(function(t){var r=Object.getOwnPropertyDescriptors||function(t){for(var e=Object.keys(t),n={},r=0;r<e.length;r++)n[e[r]]=Object.getOwnPropertyDescriptor(t,e[r]);return n},i=/%[sdj%]/g;e.format=function(t){if(!b(t)){for(var e=[],n=0;n<arguments.length;n++)e.push(s(arguments[n]));return e.join(" ")}n=1;for(var r=arguments,o=r.length,a=String(t).replace(i,(function(t){if("%%"===t)return"%";if(n>=o)return t;switch(t){case"%s":return String(r[n++]);case"%d":return Number(r[n++]);case"%j":try{return JSON.stringify(r[n++])}catch(t){return"[Circular]"}default:return t}})),u=r[n];n<o;u=r[++n])g(u)||!w(u)?a+=" "+u:a+=" "+s(u);return a},e.deprecate=function(n,r){if(void 0!==t&&!0===t.noDeprecation)return n;if(void 0===t)return function(){return e.deprecate(n,r).apply(this,arguments)};var i=!1;return function(){if(!i){if(t.throwDeprecation)throw new Error(r);t.traceDeprecation?console.trace(r):console.error(r),i=!0}return n.apply(this,arguments)}};var o,a={};function s(t,n){var r={seen:[],stylize:f};return arguments.length>=3&&(r.depth=arguments[2]),arguments.length>=4&&(r.colors=arguments[3]),p(n)?r.showHidden=n:n&&e._extend(r,n),y(r.showHidden)&&(r.showHidden=!1),y(r.depth)&&(r.depth=2),y(r.colors)&&(r.colors=!1),y(r.customInspect)&&(r.customInspect=!0),r.colors&&(r.stylize=u),c(r,t,r.depth)}function u(t,e){var n=s.styles[e];return n?"["+s.colors[n][0]+"m"+t+"["+s.colors[n][1]+"m":t}function f(t,e){return t}function c(t,n,r){if(t.customInspect&&n&&k(n.inspect)&&n.inspect!==e.inspect&&(!n.constructor||n.constructor.prototype!==n)){var i=n.inspect(r,t);return b(i)||(i=c(t,i,r)),i}var o=function(t,e){if(y(e))return t.stylize("undefined","undefined");if(b(e)){var n="'"+JSON.stringify(e).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return t.stylize(n,"string")}if(v(e))return t.stylize(""+e,"number");if(p(e))return t.stylize(""+e,"boolean");if(g(e))return t.stylize("null","null")}(t,n);if(o)return o;var a=Object.keys(n),s=function(t){var e={};return t.forEach((function(t,n){e[t]=!0})),e}(a);if(t.showHidden&&(a=Object.getOwnPropertyNames(n)),x(n)&&(a.indexOf("message")>=0||a.indexOf("description")>=0))return l(n);if(0===a.length){if(k(n)){var u=n.name?": "+n.name:"";return t.stylize("[Function"+u+"]","special")}if(m(n))return t.stylize(RegExp.prototype.toString.call(n),"regexp");if(_(n))return t.stylize(Date.prototype.toString.call(n),"date");if(x(n))return l(n)}var f,w="",E=!1,S=["{","}"];(d(n)&&(E=!0,S=["[","]"]),k(n))&&(w=" [Function"+(n.name?": "+n.name:"")+"]");return m(n)&&(w=" "+RegExp.prototype.toString.call(n)),_(n)&&(w=" "+Date.prototype.toUTCString.call(n)),x(n)&&(w=" "+l(n)),0!==a.length||E&&0!=n.length?r<0?m(n)?t.stylize(RegExp.prototype.toString.call(n),"regexp"):t.stylize("[Object]","special"):(t.seen.push(n),f=E?function(t,e,n,r,i){for(var o=[],a=0,s=e.length;a<s;++a)T(e,String(a))?o.push(h(t,e,n,r,String(a),!0)):o.push("");return i.forEach((function(i){i.match(/^\d+$/)||o.push(h(t,e,n,r,i,!0))})),o}(t,n,r,s,a):a.map((function(e){return h(t,n,r,s,e,E)})),t.seen.pop(),function(t,e,n){if(t.reduce((function(t,e){return e.indexOf("\n")>=0&&0,t+e.replace(/\u001b\[\d\d?m/g,"").length+1}),0)>60)return n[0]+(""===e?"":e+"\n ")+" "+t.join(",\n  ")+" "+n[1];return n[0]+e+" "+t.join(", ")+" "+n[1]}(f,w,S)):S[0]+w+S[1]}function l(t){return"["+Error.prototype.toString.call(t)+"]"}function h(t,e,n,r,i,o){var a,s,u;if((u=Object.getOwnPropertyDescriptor(e,i)||{value:e[i]}).get?s=u.set?t.stylize("[Getter/Setter]","special"):t.stylize("[Getter]","special"):u.set&&(s=t.stylize("[Setter]","special")),T(r,i)||(a="["+i+"]"),s||(t.seen.indexOf(u.value)<0?(s=g(n)?c(t,u.value,null):c(t,u.value,n-1)).indexOf("\n")>-1&&(s=o?s.split("\n").map((function(t){return"  "+t})).join("\n").substr(2):"\n"+s.split("\n").map((function(t){return"   "+t})).join("\n")):s=t.stylize("[Circular]","special")),y(a)){if(o&&i.match(/^\d+$/))return s;(a=JSON.stringify(""+i)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(a=a.substr(1,a.length-2),a=t.stylize(a,"name")):(a=a.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),a=t.stylize(a,"string"))}return a+": "+s}function d(t){return Array.isArray(t)}function p(t){return"boolean"==typeof t}function g(t){return null===t}function v(t){return"number"==typeof t}function b(t){return"string"==typeof t}function y(t){return void 0===t}function m(t){return w(t)&&"[object RegExp]"===E(t)}function w(t){return"object"==typeof t&&null!==t}function _(t){return w(t)&&"[object Date]"===E(t)}function x(t){return w(t)&&("[object Error]"===E(t)||t instanceof Error)}function k(t){return"function"==typeof t}function E(t){return Object.prototype.toString.call(t)}function S(t){return t<10?"0"+t.toString(10):t.toString(10)}e.debuglog=function(n){if(y(o)&&(o=t.env.NODE_DEBUG||""),n=n.toUpperCase(),!a[n])if(new RegExp("\\b"+n+"\\b","i").test(o)){var r=t.pid;a[n]=function(){var t=e.format.apply(e,arguments);console.error("%s %d: %s",n,r,t)}}else a[n]=function(){};return a[n]},e.inspect=s,s.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},s.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},e.isArray=d,e.isBoolean=p,e.isNull=g,e.isNullOrUndefined=function(t){return null==t},e.isNumber=v,e.isString=b,e.isSymbol=function(t){return"symbol"==typeof t},e.isUndefined=y,e.isRegExp=m,e.isObject=w,e.isDate=_,e.isError=x,e.isFunction=k,e.isPrimitive=function(t){return null===t||"boolean"==typeof t||"number"==typeof t||"string"==typeof t||"symbol"==typeof t||void 0===t},e.isBuffer=n(415);var A=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function O(){var t=new Date,e=[S(t.getHours()),S(t.getMinutes()),S(t.getSeconds())].join(":");return[t.getDate(),A[t.getMonth()],e].join(" ")}function T(t,e){return Object.prototype.hasOwnProperty.call(t,e)}e.log=function(){console.log("%s - %s",O(),e.format.apply(e,arguments))},e.inherits=n(416),e._extend=function(t,e){if(!e||!w(e))return t;for(var n=Object.keys(e),r=n.length;r--;)t[n[r]]=e[n[r]];return t};var M="undefined"!=typeof Symbol?Symbol("util.promisify.custom"):void 0;function R(t,e){if(!t){var n=new Error("Promise was rejected with a falsy value");n.reason=t,t=n}return e(t)}e.promisify=function(t){if("function"!=typeof t)throw new TypeError('The "original" argument must be of type Function');if(M&&t[M]){var e;if("function"!=typeof(e=t[M]))throw new TypeError('The "util.promisify.custom" argument must be of type Function');return Object.defineProperty(e,M,{value:e,enumerable:!1,writable:!1,configurable:!0}),e}function e(){for(var e,n,r=new Promise((function(t,r){e=t,n=r})),i=[],o=0;o<arguments.length;o++)i.push(arguments[o]);i.push((function(t,r){t?n(t):e(r)}));try{t.apply(this,i)}catch(t){n(t)}return r}return Object.setPrototypeOf(e,Object.getPrototypeOf(t)),M&&Object.defineProperty(e,M,{value:e,enumerable:!1,writable:!1,configurable:!0}),Object.defineProperties(e,r(t))},e.promisify.custom=M,e.callbackify=function(e){if("function"!=typeof e)throw new TypeError('The "original" argument must be of type Function');function n(){for(var n=[],r=0;r<arguments.length;r++)n.push(arguments[r]);var i=n.pop();if("function"!=typeof i)throw new TypeError("The last argument must be of type Function");var o=this,a=function(){return i.apply(o,arguments)};e.apply(this,n).then((function(e){t.nextTick(a,null,e)}),(function(e){t.nextTick(R,e,a)}))}return Object.setPrototypeOf(n,Object.getPrototypeOf(e)),Object.defineProperties(n,r(e)),n}}).call(this,n(22))},function(t,e,n){"use strict";var r,i=n(33),o=n(417),a=n(207),s=n(208),u=n(128);function f(t,e){return t.msg=u[e],e}function c(t){return(t<<1)-(t>4?9:0)}function l(t){for(var e=t.length;--e>=0;)t[e]=0}function h(t){var e=t.state,n=e.pending;n>t.avail_out&&(n=t.avail_out),0!==n&&(i.arraySet(t.output,e.pending_buf,e.pending_out,n,t.next_out),t.next_out+=n,e.pending_out+=n,t.total_out+=n,t.avail_out-=n,e.pending-=n,0===e.pending&&(e.pending_out=0))}function d(t,e){o._tr_flush_block(t,t.block_start>=0?t.block_start:-1,t.strstart-t.block_start,e),t.block_start=t.strstart,h(t.strm)}function p(t,e){t.pending_buf[t.pending++]=e}function g(t,e){t.pending_buf[t.pending++]=e>>>8&255,t.pending_buf[t.pending++]=255&e}function v(t,e){var n,r,i=t.max_chain_length,o=t.strstart,a=t.prev_length,s=t.nice_match,u=t.strstart>t.w_size-262?t.strstart-(t.w_size-262):0,f=t.window,c=t.w_mask,l=t.prev,h=t.strstart+258,d=f[o+a-1],p=f[o+a];t.prev_length>=t.good_match&&(i>>=2),s>t.lookahead&&(s=t.lookahead);do{if(f[(n=e)+a]===p&&f[n+a-1]===d&&f[n]===f[o]&&f[++n]===f[o+1]){o+=2,n++;do{}while(f[++o]===f[++n]&&f[++o]===f[++n]&&f[++o]===f[++n]&&f[++o]===f[++n]&&f[++o]===f[++n]&&f[++o]===f[++n]&&f[++o]===f[++n]&&f[++o]===f[++n]&&o<h);if(r=258-(h-o),o=h-258,r>a){if(t.match_start=e,a=r,r>=s)break;d=f[o+a-1],p=f[o+a]}}}while((e=l[e&c])>u&&0!=--i);return a<=t.lookahead?a:t.lookahead}function b(t){var e,n,r,o,u,f,c,l,h,d,p=t.w_size;do{if(o=t.window_size-t.lookahead-t.strstart,t.strstart>=p+(p-262)){i.arraySet(t.window,t.window,p,p,0),t.match_start-=p,t.strstart-=p,t.block_start-=p,e=n=t.hash_size;do{r=t.head[--e],t.head[e]=r>=p?r-p:0}while(--n);e=n=p;do{r=t.prev[--e],t.prev[e]=r>=p?r-p:0}while(--n);o+=p}if(0===t.strm.avail_in)break;if(f=t.strm,c=t.window,l=t.strstart+t.lookahead,h=o,d=void 0,(d=f.avail_in)>h&&(d=h),n=0===d?0:(f.avail_in-=d,i.arraySet(c,f.input,f.next_in,d,l),1===f.state.wrap?f.adler=a(f.adler,c,d,l):2===f.state.wrap&&(f.adler=s(f.adler,c,d,l)),f.next_in+=d,f.total_in+=d,d),t.lookahead+=n,t.lookahead+t.insert>=3)for(u=t.strstart-t.insert,t.ins_h=t.window[u],t.ins_h=(t.ins_h<<t.hash_shift^t.window[u+1])&t.hash_mask;t.insert&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[u+3-1])&t.hash_mask,t.prev[u&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=u,u++,t.insert--,!(t.lookahead+t.insert<3)););}while(t.lookahead<262&&0!==t.strm.avail_in)}function y(t,e){for(var n,r;;){if(t.lookahead<262){if(b(t),t.lookahead<262&&0===e)return 1;if(0===t.lookahead)break}if(n=0,t.lookahead>=3&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+3-1])&t.hash_mask,n=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),0!==n&&t.strstart-n<=t.w_size-262&&(t.match_length=v(t,n)),t.match_length>=3)if(r=o._tr_tally(t,t.strstart-t.match_start,t.match_length-3),t.lookahead-=t.match_length,t.match_length<=t.max_lazy_match&&t.lookahead>=3){t.match_length--;do{t.strstart++,t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+3-1])&t.hash_mask,n=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart}while(0!=--t.match_length);t.strstart++}else t.strstart+=t.match_length,t.match_length=0,t.ins_h=t.window[t.strstart],t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+1])&t.hash_mask;else r=o._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++;if(r&&(d(t,!1),0===t.strm.avail_out))return 1}return t.insert=t.strstart<2?t.strstart:2,4===e?(d(t,!0),0===t.strm.avail_out?3:4):t.last_lit&&(d(t,!1),0===t.strm.avail_out)?1:2}function m(t,e){for(var n,r,i;;){if(t.lookahead<262){if(b(t),t.lookahead<262&&0===e)return 1;if(0===t.lookahead)break}if(n=0,t.lookahead>=3&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+3-1])&t.hash_mask,n=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),t.prev_length=t.match_length,t.prev_match=t.match_start,t.match_length=2,0!==n&&t.prev_length<t.max_lazy_match&&t.strstart-n<=t.w_size-262&&(t.match_length=v(t,n),t.match_length<=5&&(1===t.strategy||3===t.match_length&&t.strstart-t.match_start>4096)&&(t.match_length=2)),t.prev_length>=3&&t.match_length<=t.prev_length){i=t.strstart+t.lookahead-3,r=o._tr_tally(t,t.strstart-1-t.prev_match,t.prev_length-3),t.lookahead-=t.prev_length-1,t.prev_length-=2;do{++t.strstart<=i&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+3-1])&t.hash_mask,n=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart)}while(0!=--t.prev_length);if(t.match_available=0,t.match_length=2,t.strstart++,r&&(d(t,!1),0===t.strm.avail_out))return 1}else if(t.match_available){if((r=o._tr_tally(t,0,t.window[t.strstart-1]))&&d(t,!1),t.strstart++,t.lookahead--,0===t.strm.avail_out)return 1}else t.match_available=1,t.strstart++,t.lookahead--}return t.match_available&&(r=o._tr_tally(t,0,t.window[t.strstart-1]),t.match_available=0),t.insert=t.strstart<2?t.strstart:2,4===e?(d(t,!0),0===t.strm.avail_out?3:4):t.last_lit&&(d(t,!1),0===t.strm.avail_out)?1:2}function w(t,e,n,r,i){this.good_length=t,this.max_lazy=e,this.nice_length=n,this.max_chain=r,this.func=i}function _(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=8,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new i.Buf16(1146),this.dyn_dtree=new i.Buf16(122),this.bl_tree=new i.Buf16(78),l(this.dyn_ltree),l(this.dyn_dtree),l(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new i.Buf16(16),this.heap=new i.Buf16(573),l(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new i.Buf16(573),l(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function x(t){var e;return t&&t.state?(t.total_in=t.total_out=0,t.data_type=2,(e=t.state).pending=0,e.pending_out=0,e.wrap<0&&(e.wrap=-e.wrap),e.status=e.wrap?42:113,t.adler=2===e.wrap?0:1,e.last_flush=0,o._tr_init(e),0):f(t,-2)}function k(t){var e,n=x(t);return 0===n&&((e=t.state).window_size=2*e.w_size,l(e.head),e.max_lazy_match=r[e.level].max_lazy,e.good_match=r[e.level].good_length,e.nice_match=r[e.level].nice_length,e.max_chain_length=r[e.level].max_chain,e.strstart=0,e.block_start=0,e.lookahead=0,e.insert=0,e.match_length=e.prev_length=2,e.match_available=0,e.ins_h=0),n}function E(t,e,n,r,o,a){if(!t)return-2;var s=1;if(-1===e&&(e=6),r<0?(s=0,r=-r):r>15&&(s=2,r-=16),o<1||o>9||8!==n||r<8||r>15||e<0||e>9||a<0||a>4)return f(t,-2);8===r&&(r=9);var u=new _;return t.state=u,u.strm=t,u.wrap=s,u.gzhead=null,u.w_bits=r,u.w_size=1<<u.w_bits,u.w_mask=u.w_size-1,u.hash_bits=o+7,u.hash_size=1<<u.hash_bits,u.hash_mask=u.hash_size-1,u.hash_shift=~~((u.hash_bits+3-1)/3),u.window=new i.Buf8(2*u.w_size),u.head=new i.Buf16(u.hash_size),u.prev=new i.Buf16(u.w_size),u.lit_bufsize=1<<o+6,u.pending_buf_size=4*u.lit_bufsize,u.pending_buf=new i.Buf8(u.pending_buf_size),u.d_buf=1*u.lit_bufsize,u.l_buf=3*u.lit_bufsize,u.level=e,u.strategy=a,u.method=n,k(t)}r=[new w(0,0,0,0,(function(t,e){var n=65535;for(n>t.pending_buf_size-5&&(n=t.pending_buf_size-5);;){if(t.lookahead<=1){if(b(t),0===t.lookahead&&0===e)return 1;if(0===t.lookahead)break}t.strstart+=t.lookahead,t.lookahead=0;var r=t.block_start+n;if((0===t.strstart||t.strstart>=r)&&(t.lookahead=t.strstart-r,t.strstart=r,d(t,!1),0===t.strm.avail_out))return 1;if(t.strstart-t.block_start>=t.w_size-262&&(d(t,!1),0===t.strm.avail_out))return 1}return t.insert=0,4===e?(d(t,!0),0===t.strm.avail_out?3:4):(t.strstart>t.block_start&&(d(t,!1),t.strm.avail_out),1)})),new w(4,4,8,4,y),new w(4,5,16,8,y),new w(4,6,32,32,y),new w(4,4,16,16,m),new w(8,16,32,32,m),new w(8,16,128,128,m),new w(8,32,128,256,m),new w(32,128,258,1024,m),new w(32,258,258,4096,m)],e.deflateInit=function(t,e){return E(t,e,8,15,8,0)},e.deflateInit2=E,e.deflateReset=k,e.deflateResetKeep=x,e.deflateSetHeader=function(t,e){return t&&t.state?2!==t.state.wrap?-2:(t.state.gzhead=e,0):-2},e.deflate=function(t,e){var n,i,a,u;if(!t||!t.state||e>5||e<0)return t?f(t,-2):-2;if(i=t.state,!t.output||!t.input&&0!==t.avail_in||666===i.status&&4!==e)return f(t,0===t.avail_out?-5:-2);if(i.strm=t,n=i.last_flush,i.last_flush=e,42===i.status)if(2===i.wrap)t.adler=0,p(i,31),p(i,139),p(i,8),i.gzhead?(p(i,(i.gzhead.text?1:0)+(i.gzhead.hcrc?2:0)+(i.gzhead.extra?4:0)+(i.gzhead.name?8:0)+(i.gzhead.comment?16:0)),p(i,255&i.gzhead.time),p(i,i.gzhead.time>>8&255),p(i,i.gzhead.time>>16&255),p(i,i.gzhead.time>>24&255),p(i,9===i.level?2:i.strategy>=2||i.level<2?4:0),p(i,255&i.gzhead.os),i.gzhead.extra&&i.gzhead.extra.length&&(p(i,255&i.gzhead.extra.length),p(i,i.gzhead.extra.length>>8&255)),i.gzhead.hcrc&&(t.adler=s(t.adler,i.pending_buf,i.pending,0)),i.gzindex=0,i.status=69):(p(i,0),p(i,0),p(i,0),p(i,0),p(i,0),p(i,9===i.level?2:i.strategy>=2||i.level<2?4:0),p(i,3),i.status=113);else{var v=8+(i.w_bits-8<<4)<<8;v|=(i.strategy>=2||i.level<2?0:i.level<6?1:6===i.level?2:3)<<6,0!==i.strstart&&(v|=32),v+=31-v%31,i.status=113,g(i,v),0!==i.strstart&&(g(i,t.adler>>>16),g(i,65535&t.adler)),t.adler=1}if(69===i.status)if(i.gzhead.extra){for(a=i.pending;i.gzindex<(65535&i.gzhead.extra.length)&&(i.pending!==i.pending_buf_size||(i.gzhead.hcrc&&i.pending>a&&(t.adler=s(t.adler,i.pending_buf,i.pending-a,a)),h(t),a=i.pending,i.pending!==i.pending_buf_size));)p(i,255&i.gzhead.extra[i.gzindex]),i.gzindex++;i.gzhead.hcrc&&i.pending>a&&(t.adler=s(t.adler,i.pending_buf,i.pending-a,a)),i.gzindex===i.gzhead.extra.length&&(i.gzindex=0,i.status=73)}else i.status=73;if(73===i.status)if(i.gzhead.name){a=i.pending;do{if(i.pending===i.pending_buf_size&&(i.gzhead.hcrc&&i.pending>a&&(t.adler=s(t.adler,i.pending_buf,i.pending-a,a)),h(t),a=i.pending,i.pending===i.pending_buf_size)){u=1;break}u=i.gzindex<i.gzhead.name.length?255&i.gzhead.name.charCodeAt(i.gzindex++):0,p(i,u)}while(0!==u);i.gzhead.hcrc&&i.pending>a&&(t.adler=s(t.adler,i.pending_buf,i.pending-a,a)),0===u&&(i.gzindex=0,i.status=91)}else i.status=91;if(91===i.status)if(i.gzhead.comment){a=i.pending;do{if(i.pending===i.pending_buf_size&&(i.gzhead.hcrc&&i.pending>a&&(t.adler=s(t.adler,i.pending_buf,i.pending-a,a)),h(t),a=i.pending,i.pending===i.pending_buf_size)){u=1;break}u=i.gzindex<i.gzhead.comment.length?255&i.gzhead.comment.charCodeAt(i.gzindex++):0,p(i,u)}while(0!==u);i.gzhead.hcrc&&i.pending>a&&(t.adler=s(t.adler,i.pending_buf,i.pending-a,a)),0===u&&(i.status=103)}else i.status=103;if(103===i.status&&(i.gzhead.hcrc?(i.pending+2>i.pending_buf_size&&h(t),i.pending+2<=i.pending_buf_size&&(p(i,255&t.adler),p(i,t.adler>>8&255),t.adler=0,i.status=113)):i.status=113),0!==i.pending){if(h(t),0===t.avail_out)return i.last_flush=-1,0}else if(0===t.avail_in&&c(e)<=c(n)&&4!==e)return f(t,-5);if(666===i.status&&0!==t.avail_in)return f(t,-5);if(0!==t.avail_in||0!==i.lookahead||0!==e&&666!==i.status){var y=2===i.strategy?function(t,e){for(var n;;){if(0===t.lookahead&&(b(t),0===t.lookahead)){if(0===e)return 1;break}if(t.match_length=0,n=o._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++,n&&(d(t,!1),0===t.strm.avail_out))return 1}return t.insert=0,4===e?(d(t,!0),0===t.strm.avail_out?3:4):t.last_lit&&(d(t,!1),0===t.strm.avail_out)?1:2}(i,e):3===i.strategy?function(t,e){for(var n,r,i,a,s=t.window;;){if(t.lookahead<=258){if(b(t),t.lookahead<=258&&0===e)return 1;if(0===t.lookahead)break}if(t.match_length=0,t.lookahead>=3&&t.strstart>0&&(r=s[i=t.strstart-1])===s[++i]&&r===s[++i]&&r===s[++i]){a=t.strstart+258;do{}while(r===s[++i]&&r===s[++i]&&r===s[++i]&&r===s[++i]&&r===s[++i]&&r===s[++i]&&r===s[++i]&&r===s[++i]&&i<a);t.match_length=258-(a-i),t.match_length>t.lookahead&&(t.match_length=t.lookahead)}if(t.match_length>=3?(n=o._tr_tally(t,1,t.match_length-3),t.lookahead-=t.match_length,t.strstart+=t.match_length,t.match_length=0):(n=o._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++),n&&(d(t,!1),0===t.strm.avail_out))return 1}return t.insert=0,4===e?(d(t,!0),0===t.strm.avail_out?3:4):t.last_lit&&(d(t,!1),0===t.strm.avail_out)?1:2}(i,e):r[i.level].func(i,e);if(3!==y&&4!==y||(i.status=666),1===y||3===y)return 0===t.avail_out&&(i.last_flush=-1),0;if(2===y&&(1===e?o._tr_align(i):5!==e&&(o._tr_stored_block(i,0,0,!1),3===e&&(l(i.head),0===i.lookahead&&(i.strstart=0,i.block_start=0,i.insert=0))),h(t),0===t.avail_out))return i.last_flush=-1,0}return 4!==e?0:i.wrap<=0?1:(2===i.wrap?(p(i,255&t.adler),p(i,t.adler>>8&255),p(i,t.adler>>16&255),p(i,t.adler>>24&255),p(i,255&t.total_in),p(i,t.total_in>>8&255),p(i,t.total_in>>16&255),p(i,t.total_in>>24&255)):(g(i,t.adler>>>16),g(i,65535&t.adler)),h(t),i.wrap>0&&(i.wrap=-i.wrap),0!==i.pending?0:1)},e.deflateEnd=function(t){var e;return t&&t.state?42!==(e=t.state.status)&&69!==e&&73!==e&&91!==e&&103!==e&&113!==e&&666!==e?f(t,-2):(t.state=null,113===e?f(t,-3):0):-2},e.deflateSetDictionary=function(t,e){var n,r,o,s,u,f,c,h,d=e.length;if(!t||!t.state)return-2;if(2===(s=(n=t.state).wrap)||1===s&&42!==n.status||n.lookahead)return-2;for(1===s&&(t.adler=a(t.adler,e,d,0)),n.wrap=0,d>=n.w_size&&(0===s&&(l(n.head),n.strstart=0,n.block_start=0,n.insert=0),h=new i.Buf8(n.w_size),i.arraySet(h,e,d-n.w_size,n.w_size,0),e=h,d=n.w_size),u=t.avail_in,f=t.next_in,c=t.input,t.avail_in=d,t.next_in=0,t.input=e,b(n);n.lookahead>=3;){r=n.strstart,o=n.lookahead-2;do{n.ins_h=(n.ins_h<<n.hash_shift^n.window[r+3-1])&n.hash_mask,n.prev[r&n.w_mask]=n.head[n.ins_h],n.head[n.ins_h]=r,r++}while(--o);n.strstart=r,n.lookahead=2,b(n)}return n.strstart+=n.lookahead,n.block_start=n.strstart,n.insert=n.lookahead,n.lookahead=0,n.match_length=n.prev_length=2,n.match_available=0,t.next_in=f,t.input=c,t.avail_in=u,n.wrap=s,0},e.deflateInfo="pako deflate (from Nodeca project)"},function(t,e,n){"use strict";t.exports=function(t,e,n,r){for(var i=65535&t|0,o=t>>>16&65535|0,a=0;0!==n;){n-=a=n>2e3?2e3:n;do{o=o+(i=i+e[r++]|0)|0}while(--a);i%=65521,o%=65521}return i|o<<16|0}},function(t,e,n){"use strict";var r=function(){for(var t,e=[],n=0;n<256;n++){t=n;for(var r=0;r<8;r++)t=1&t?3988292384^t>>>1:t>>>1;e[n]=t}return e}();t.exports=function(t,e,n,i){var o=r,a=i+n;t^=-1;for(var s=i;s<a;s++)t=t>>>8^o[255&(t^e[s])];return-1^t}},function(t,e,n){"use strict";var r=n(33),i=n(207),o=n(208),a=n(418),s=n(419);function u(t){return(t>>>24&255)+(t>>>8&65280)+((65280&t)<<8)+((255&t)<<24)}function f(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new r.Buf16(320),this.work=new r.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function c(t){var e;return t&&t.state?(e=t.state,t.total_in=t.total_out=e.total=0,t.msg="",e.wrap&&(t.adler=1&e.wrap),e.mode=1,e.last=0,e.havedict=0,e.dmax=32768,e.head=null,e.hold=0,e.bits=0,e.lencode=e.lendyn=new r.Buf32(852),e.distcode=e.distdyn=new r.Buf32(592),e.sane=1,e.back=-1,0):-2}function l(t){var e;return t&&t.state?((e=t.state).wsize=0,e.whave=0,e.wnext=0,c(t)):-2}function h(t,e){var n,r;return t&&t.state?(r=t.state,e<0?(n=0,e=-e):(n=1+(e>>4),e<48&&(e&=15)),e&&(e<8||e>15)?-2:(null!==r.window&&r.wbits!==e&&(r.window=null),r.wrap=n,r.wbits=e,l(t))):-2}function d(t,e){var n,r;return t?(r=new f,t.state=r,r.window=null,0!==(n=h(t,e))&&(t.state=null),n):-2}var p,g,v=!0;function b(t){if(v){var e;for(p=new r.Buf32(512),g=new r.Buf32(32),e=0;e<144;)t.lens[e++]=8;for(;e<256;)t.lens[e++]=9;for(;e<280;)t.lens[e++]=7;for(;e<288;)t.lens[e++]=8;for(s(1,t.lens,0,288,p,0,t.work,{bits:9}),e=0;e<32;)t.lens[e++]=5;s(2,t.lens,0,32,g,0,t.work,{bits:5}),v=!1}t.lencode=p,t.lenbits=9,t.distcode=g,t.distbits=5}function y(t,e,n,i){var o,a=t.state;return null===a.window&&(a.wsize=1<<a.wbits,a.wnext=0,a.whave=0,a.window=new r.Buf8(a.wsize)),i>=a.wsize?(r.arraySet(a.window,e,n-a.wsize,a.wsize,0),a.wnext=0,a.whave=a.wsize):((o=a.wsize-a.wnext)>i&&(o=i),r.arraySet(a.window,e,n-i,o,a.wnext),(i-=o)?(r.arraySet(a.window,e,n-i,i,0),a.wnext=i,a.whave=a.wsize):(a.wnext+=o,a.wnext===a.wsize&&(a.wnext=0),a.whave<a.wsize&&(a.whave+=o))),0}e.inflateReset=l,e.inflateReset2=h,e.inflateResetKeep=c,e.inflateInit=function(t){return d(t,15)},e.inflateInit2=d,e.inflate=function(t,e){var n,f,c,l,h,d,p,g,v,m,w,_,x,k,E,S,A,O,T,M,R,j,L,P,I=0,N=new r.Buf8(4),C=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!t||!t.state||!t.output||!t.input&&0!==t.avail_in)return-2;12===(n=t.state).mode&&(n.mode=13),h=t.next_out,c=t.output,p=t.avail_out,l=t.next_in,f=t.input,d=t.avail_in,g=n.hold,v=n.bits,m=d,w=p,j=0;t:for(;;)switch(n.mode){case 1:if(0===n.wrap){n.mode=13;break}for(;v<16;){if(0===d)break t;d--,g+=f[l++]<<v,v+=8}if(2&n.wrap&&35615===g){n.check=0,N[0]=255&g,N[1]=g>>>8&255,n.check=o(n.check,N,2,0),g=0,v=0,n.mode=2;break}if(n.flags=0,n.head&&(n.head.done=!1),!(1&n.wrap)||(((255&g)<<8)+(g>>8))%31){t.msg="incorrect header check",n.mode=30;break}if(8!=(15&g)){t.msg="unknown compression method",n.mode=30;break}if(v-=4,R=8+(15&(g>>>=4)),0===n.wbits)n.wbits=R;else if(R>n.wbits){t.msg="invalid window size",n.mode=30;break}n.dmax=1<<R,t.adler=n.check=1,n.mode=512&g?10:12,g=0,v=0;break;case 2:for(;v<16;){if(0===d)break t;d--,g+=f[l++]<<v,v+=8}if(n.flags=g,8!=(255&n.flags)){t.msg="unknown compression method",n.mode=30;break}if(57344&n.flags){t.msg="unknown header flags set",n.mode=30;break}n.head&&(n.head.text=g>>8&1),512&n.flags&&(N[0]=255&g,N[1]=g>>>8&255,n.check=o(n.check,N,2,0)),g=0,v=0,n.mode=3;case 3:for(;v<32;){if(0===d)break t;d--,g+=f[l++]<<v,v+=8}n.head&&(n.head.time=g),512&n.flags&&(N[0]=255&g,N[1]=g>>>8&255,N[2]=g>>>16&255,N[3]=g>>>24&255,n.check=o(n.check,N,4,0)),g=0,v=0,n.mode=4;case 4:for(;v<16;){if(0===d)break t;d--,g+=f[l++]<<v,v+=8}n.head&&(n.head.xflags=255&g,n.head.os=g>>8),512&n.flags&&(N[0]=255&g,N[1]=g>>>8&255,n.check=o(n.check,N,2,0)),g=0,v=0,n.mode=5;case 5:if(1024&n.flags){for(;v<16;){if(0===d)break t;d--,g+=f[l++]<<v,v+=8}n.length=g,n.head&&(n.head.extra_len=g),512&n.flags&&(N[0]=255&g,N[1]=g>>>8&255,n.check=o(n.check,N,2,0)),g=0,v=0}else n.head&&(n.head.extra=null);n.mode=6;case 6:if(1024&n.flags&&((_=n.length)>d&&(_=d),_&&(n.head&&(R=n.head.extra_len-n.length,n.head.extra||(n.head.extra=new Array(n.head.extra_len)),r.arraySet(n.head.extra,f,l,_,R)),512&n.flags&&(n.check=o(n.check,f,_,l)),d-=_,l+=_,n.length-=_),n.length))break t;n.length=0,n.mode=7;case 7:if(2048&n.flags){if(0===d)break t;_=0;do{R=f[l+_++],n.head&&R&&n.length<65536&&(n.head.name+=String.fromCharCode(R))}while(R&&_<d);if(512&n.flags&&(n.check=o(n.check,f,_,l)),d-=_,l+=_,R)break t}else n.head&&(n.head.name=null);n.length=0,n.mode=8;case 8:if(4096&n.flags){if(0===d)break t;_=0;do{R=f[l+_++],n.head&&R&&n.length<65536&&(n.head.comment+=String.fromCharCode(R))}while(R&&_<d);if(512&n.flags&&(n.check=o(n.check,f,_,l)),d-=_,l+=_,R)break t}else n.head&&(n.head.comment=null);n.mode=9;case 9:if(512&n.flags){for(;v<16;){if(0===d)break t;d--,g+=f[l++]<<v,v+=8}if(g!==(65535&n.check)){t.msg="header crc mismatch",n.mode=30;break}g=0,v=0}n.head&&(n.head.hcrc=n.flags>>9&1,n.head.done=!0),t.adler=n.check=0,n.mode=12;break;case 10:for(;v<32;){if(0===d)break t;d--,g+=f[l++]<<v,v+=8}t.adler=n.check=u(g),g=0,v=0,n.mode=11;case 11:if(0===n.havedict)return t.next_out=h,t.avail_out=p,t.next_in=l,t.avail_in=d,n.hold=g,n.bits=v,2;t.adler=n.check=1,n.mode=12;case 12:if(5===e||6===e)break t;case 13:if(n.last){g>>>=7&v,v-=7&v,n.mode=27;break}for(;v<3;){if(0===d)break t;d--,g+=f[l++]<<v,v+=8}switch(n.last=1&g,v-=1,3&(g>>>=1)){case 0:n.mode=14;break;case 1:if(b(n),n.mode=20,6===e){g>>>=2,v-=2;break t}break;case 2:n.mode=17;break;case 3:t.msg="invalid block type",n.mode=30}g>>>=2,v-=2;break;case 14:for(g>>>=7&v,v-=7&v;v<32;){if(0===d)break t;d--,g+=f[l++]<<v,v+=8}if((65535&g)!=(g>>>16^65535)){t.msg="invalid stored block lengths",n.mode=30;break}if(n.length=65535&g,g=0,v=0,n.mode=15,6===e)break t;case 15:n.mode=16;case 16:if(_=n.length){if(_>d&&(_=d),_>p&&(_=p),0===_)break t;r.arraySet(c,f,l,_,h),d-=_,l+=_,p-=_,h+=_,n.length-=_;break}n.mode=12;break;case 17:for(;v<14;){if(0===d)break t;d--,g+=f[l++]<<v,v+=8}if(n.nlen=257+(31&g),g>>>=5,v-=5,n.ndist=1+(31&g),g>>>=5,v-=5,n.ncode=4+(15&g),g>>>=4,v-=4,n.nlen>286||n.ndist>30){t.msg="too many length or distance symbols",n.mode=30;break}n.have=0,n.mode=18;case 18:for(;n.have<n.ncode;){for(;v<3;){if(0===d)break t;d--,g+=f[l++]<<v,v+=8}n.lens[C[n.have++]]=7&g,g>>>=3,v-=3}for(;n.have<19;)n.lens[C[n.have++]]=0;if(n.lencode=n.lendyn,n.lenbits=7,L={bits:n.lenbits},j=s(0,n.lens,0,19,n.lencode,0,n.work,L),n.lenbits=L.bits,j){t.msg="invalid code lengths set",n.mode=30;break}n.have=0,n.mode=19;case 19:for(;n.have<n.nlen+n.ndist;){for(;S=(I=n.lencode[g&(1<<n.lenbits)-1])>>>16&255,A=65535&I,!((E=I>>>24)<=v);){if(0===d)break t;d--,g+=f[l++]<<v,v+=8}if(A<16)g>>>=E,v-=E,n.lens[n.have++]=A;else{if(16===A){for(P=E+2;v<P;){if(0===d)break t;d--,g+=f[l++]<<v,v+=8}if(g>>>=E,v-=E,0===n.have){t.msg="invalid bit length repeat",n.mode=30;break}R=n.lens[n.have-1],_=3+(3&g),g>>>=2,v-=2}else if(17===A){for(P=E+3;v<P;){if(0===d)break t;d--,g+=f[l++]<<v,v+=8}v-=E,R=0,_=3+(7&(g>>>=E)),g>>>=3,v-=3}else{for(P=E+7;v<P;){if(0===d)break t;d--,g+=f[l++]<<v,v+=8}v-=E,R=0,_=11+(127&(g>>>=E)),g>>>=7,v-=7}if(n.have+_>n.nlen+n.ndist){t.msg="invalid bit length repeat",n.mode=30;break}for(;_--;)n.lens[n.have++]=R}}if(30===n.mode)break;if(0===n.lens[256]){t.msg="invalid code -- missing end-of-block",n.mode=30;break}if(n.lenbits=9,L={bits:n.lenbits},j=s(1,n.lens,0,n.nlen,n.lencode,0,n.work,L),n.lenbits=L.bits,j){t.msg="invalid literal/lengths set",n.mode=30;break}if(n.distbits=6,n.distcode=n.distdyn,L={bits:n.distbits},j=s(2,n.lens,n.nlen,n.ndist,n.distcode,0,n.work,L),n.distbits=L.bits,j){t.msg="invalid distances set",n.mode=30;break}if(n.mode=20,6===e)break t;case 20:n.mode=21;case 21:if(d>=6&&p>=258){t.next_out=h,t.avail_out=p,t.next_in=l,t.avail_in=d,n.hold=g,n.bits=v,a(t,w),h=t.next_out,c=t.output,p=t.avail_out,l=t.next_in,f=t.input,d=t.avail_in,g=n.hold,v=n.bits,12===n.mode&&(n.back=-1);break}for(n.back=0;S=(I=n.lencode[g&(1<<n.lenbits)-1])>>>16&255,A=65535&I,!((E=I>>>24)<=v);){if(0===d)break t;d--,g+=f[l++]<<v,v+=8}if(S&&0==(240&S)){for(O=E,T=S,M=A;S=(I=n.lencode[M+((g&(1<<O+T)-1)>>O)])>>>16&255,A=65535&I,!(O+(E=I>>>24)<=v);){if(0===d)break t;d--,g+=f[l++]<<v,v+=8}g>>>=O,v-=O,n.back+=O}if(g>>>=E,v-=E,n.back+=E,n.length=A,0===S){n.mode=26;break}if(32&S){n.back=-1,n.mode=12;break}if(64&S){t.msg="invalid literal/length code",n.mode=30;break}n.extra=15&S,n.mode=22;case 22:if(n.extra){for(P=n.extra;v<P;){if(0===d)break t;d--,g+=f[l++]<<v,v+=8}n.length+=g&(1<<n.extra)-1,g>>>=n.extra,v-=n.extra,n.back+=n.extra}n.was=n.length,n.mode=23;case 23:for(;S=(I=n.distcode[g&(1<<n.distbits)-1])>>>16&255,A=65535&I,!((E=I>>>24)<=v);){if(0===d)break t;d--,g+=f[l++]<<v,v+=8}if(0==(240&S)){for(O=E,T=S,M=A;S=(I=n.distcode[M+((g&(1<<O+T)-1)>>O)])>>>16&255,A=65535&I,!(O+(E=I>>>24)<=v);){if(0===d)break t;d--,g+=f[l++]<<v,v+=8}g>>>=O,v-=O,n.back+=O}if(g>>>=E,v-=E,n.back+=E,64&S){t.msg="invalid distance code",n.mode=30;break}n.offset=A,n.extra=15&S,n.mode=24;case 24:if(n.extra){for(P=n.extra;v<P;){if(0===d)break t;d--,g+=f[l++]<<v,v+=8}n.offset+=g&(1<<n.extra)-1,g>>>=n.extra,v-=n.extra,n.back+=n.extra}if(n.offset>n.dmax){t.msg="invalid distance too far back",n.mode=30;break}n.mode=25;case 25:if(0===p)break t;if(_=w-p,n.offset>_){if((_=n.offset-_)>n.whave&&n.sane){t.msg="invalid distance too far back",n.mode=30;break}_>n.wnext?(_-=n.wnext,x=n.wsize-_):x=n.wnext-_,_>n.length&&(_=n.length),k=n.window}else k=c,x=h-n.offset,_=n.length;_>p&&(_=p),p-=_,n.length-=_;do{c[h++]=k[x++]}while(--_);0===n.length&&(n.mode=21);break;case 26:if(0===p)break t;c[h++]=n.length,p--,n.mode=21;break;case 27:if(n.wrap){for(;v<32;){if(0===d)break t;d--,g|=f[l++]<<v,v+=8}if(w-=p,t.total_out+=w,n.total+=w,w&&(t.adler=n.check=n.flags?o(n.check,c,w,h-w):i(n.check,c,w,h-w)),w=p,(n.flags?g:u(g))!==n.check){t.msg="incorrect data check",n.mode=30;break}g=0,v=0}n.mode=28;case 28:if(n.wrap&&n.flags){for(;v<32;){if(0===d)break t;d--,g+=f[l++]<<v,v+=8}if(g!==(4294967295&n.total)){t.msg="incorrect length check",n.mode=30;break}g=0,v=0}n.mode=29;case 29:j=1;break t;case 30:j=-3;break t;case 31:return-4;case 32:default:return-2}return t.next_out=h,t.avail_out=p,t.next_in=l,t.avail_in=d,n.hold=g,n.bits=v,(n.wsize||w!==t.avail_out&&n.mode<30&&(n.mode<27||4!==e))&&y(t,t.output,t.next_out,w-t.avail_out)?(n.mode=31,-4):(m-=t.avail_in,w-=t.avail_out,t.total_in+=m,t.total_out+=w,n.total+=w,n.wrap&&w&&(t.adler=n.check=n.flags?o(n.check,c,w,t.next_out-w):i(n.check,c,w,t.next_out-w)),t.data_type=n.bits+(n.last?64:0)+(12===n.mode?128:0)+(20===n.mode||15===n.mode?256:0),(0===m&&0===w||4===e)&&0===j&&(j=-5),j)},e.inflateEnd=function(t){if(!t||!t.state)return-2;var e=t.state;return e.window&&(e.window=null),t.state=null,0},e.inflateGetHeader=function(t,e){var n;return t&&t.state?0==(2&(n=t.state).wrap)?-2:(n.head=e,e.done=!1,0):-2},e.inflateSetDictionary=function(t,e){var n,r=e.length;return t&&t.state?0!==(n=t.state).wrap&&11!==n.mode?-2:11===n.mode&&i(1,e,r,0)!==n.check?-3:y(t,e,r,r)?(n.mode=31,-4):(n.havedict=1,0):-2},e.inflateInfo="pako inflate (from Nodeca project)"},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.promisify=r;function r(t){if("function"!=typeof t)throw new TypeError("Argument to promisify must be a function");var e=t["__ES6-PROMISIFY--CUSTOM-ARGUMENTS__"],n=r.Promise||Promise;if("function"!=typeof n)throw new Error("No Promise implementation found; do you need a polyfill?");return function(){for(var r=this,i=arguments.length,o=new Array(i),a=0;a<i;a++)o[a]=arguments[a];return new n((function(n,i){o.push((function(t){if(t)return i(t);for(var r=arguments.length,o=new Array(r>1?r-1:0),a=1;a<r;a++)o[a-1]=arguments[a];if(1===o.length||!e)return n(o[0]);var s={};o.forEach((function(t,n){var r=e[n];r&&(s[r]=t)})),n(s)})),t.apply(r,o)}))}}r.argumentNames="__ES6-PROMISIFY--CUSTOM-ARGUMENTS__",r.Promise=void 0},function(t,e,n){"use strict";var r=n(33),i=!0,o=!0;try{String.fromCharCode.apply(null,[0])}catch(t){i=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(t){o=!1}for(var a=new r.Buf8(256),s=0;s<256;s++)a[s]=s>=252?6:s>=248?5:s>=240?4:s>=224?3:s>=192?2:1;function u(t,e){if(e<65534&&(t.subarray&&o||!t.subarray&&i))return String.fromCharCode.apply(null,r.shrinkBuf(t,e));for(var n="",a=0;a<e;a++)n+=String.fromCharCode(t[a]);return n}a[254]=a[254]=1,e.string2buf=function(t){var e,n,i,o,a,s=t.length,u=0;for(o=0;o<s;o++)55296==(64512&(n=t.charCodeAt(o)))&&o+1<s&&56320==(64512&(i=t.charCodeAt(o+1)))&&(n=65536+(n-55296<<10)+(i-56320),o++),u+=n<128?1:n<2048?2:n<65536?3:4;for(e=new r.Buf8(u),a=0,o=0;a<u;o++)55296==(64512&(n=t.charCodeAt(o)))&&o+1<s&&56320==(64512&(i=t.charCodeAt(o+1)))&&(n=65536+(n-55296<<10)+(i-56320),o++),n<128?e[a++]=n:n<2048?(e[a++]=192|n>>>6,e[a++]=128|63&n):n<65536?(e[a++]=224|n>>>12,e[a++]=128|n>>>6&63,e[a++]=128|63&n):(e[a++]=240|n>>>18,e[a++]=128|n>>>12&63,e[a++]=128|n>>>6&63,e[a++]=128|63&n);return e},e.buf2binstring=function(t){return u(t,t.length)},e.binstring2buf=function(t){for(var e=new r.Buf8(t.length),n=0,i=e.length;n<i;n++)e[n]=t.charCodeAt(n);return e},e.buf2string=function(t,e){var n,r,i,o,s=e||t.length,f=new Array(2*s);for(r=0,n=0;n<s;)if((i=t[n++])<128)f[r++]=i;else if((o=a[i])>4)f[r++]=65533,n+=o-1;else{for(i&=2===o?31:3===o?15:7;o>1&&n<s;)i=i<<6|63&t[n++],o--;o>1?f[r++]=65533:i<65536?f[r++]=i:(i-=65536,f[r++]=55296|i>>10&1023,f[r++]=56320|1023&i)}return u(f,r)},e.utf8border=function(t,e){var n;for((e=e||t.length)>t.length&&(e=t.length),n=e-1;n>=0&&128==(192&t[n]);)n--;return n<0||0===n?e:n+a[t[n]]>e?n:e}},function(t,e,n){"use strict";var r=n(32),i=r(n(84)),o=r(n(85)),a=r(n(51)),s=r(n(52)),u=void 0,f=function(){function t(e){(0,a.default)(this,t),this.fdPromise=u.open(e,"r"),this.path=e}var e,n;return(0,s.default)(t,[{key:"read",value:(n=(0,o.default)(i.default.mark((function t(e,n,r,o){var a,s;return i.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this.fdPromise;case 2:return a=t.sent,t.next=5,u.read(a,e,n,r,o);case 5:return s=t.sent,t.abrupt("return",s);case 7:case"end":return t.stop()}}),t,this)}))),function(t,e,r,i){return n.apply(this,arguments)})},{key:"stat",value:(e=(0,o.default)(i.default.mark((function t(){var e;return i.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this.fdPromise;case 2:return e=t.sent,t.abrupt("return",u.fstat(e));case 4:case"end":return t.stop()}}),t,this)}))),function(){return e.apply(this,arguments)})}]),t}();t.exports=f},function(t,e,n){"use strict";(function(t){var r=n(15);n(12)(e,"__esModule",{value:!0}),e.default=e.BAM_MAGIC=void 0;var i=r(n(195)),o=r(n(61)),a=r(n(82)),s=r(n(36)),u=r(n(120)),f=r(n(62)),c=r(n(425)),l=r(n(50)),h=r(n(48)),d=r(n(64)),p=r(n(49)),g=r(n(431)),v=r(n(30)),b=r(n(31)),y=r(n(29)),m=r(n(214)),w=r(n(217)),_=r(n(218)),x=r(n(219)),k=r(n(192)),E=r(n(143)),S=r(n(196)),A=r(n(439)),O=n(122),T=r(n(440)),M=r(n(194)),R=n(220),j=r(n(221)),L=n(223),P=n(119);e.BAM_MAGIC=21840194;var I=function(){function e(t){var n,r=t.bamFilehandle,i=t.bamPath,o=t.bamUrl,a=t.baiPath,s=t.baiFilehandle,u=t.baiUrl,f=t.csiPath,c=t.csiFilehandle,l=t.csiUrl,h=t.cacheSize,d=t.fetchSizeLimit,p=t.chunkSizeLimit,b=t.renameRefSeqs,m=void 0===b?function(t){return t}:b;if((0,v.default)(this,e),(0,y.default)(this,"renameRefSeq",void 0),(0,y.default)(this,"bam",void 0),(0,y.default)(this,"index",void 0),(0,y.default)(this,"chunkSizeLimit",void 0),(0,y.default)(this,"fetchSizeLimit",void 0),(0,y.default)(this,"header",void 0),(0,y.default)(this,"featureCache",void 0),(0,y.default)(this,"chrToIndex",void 0),(0,y.default)(this,"indexToChr",void 0),this.renameRefSeq=m,r)this.bam=r;else if(i)this.bam=new R.LocalFile(i);else{if(!o)throw new Error("unable to initialize bam");this.bam=new R.RemoteFile(o)}if(c)this.index=new S.default({filehandle:c});else if(f)this.index=new S.default({filehandle:new R.LocalFile(f)});else if(l)this.index=new S.default({filehandle:new R.RemoteFile(l)});else if(s)this.index=new E.default({filehandle:s});else if(a)this.index=new E.default({filehandle:new R.LocalFile(a)});else if(u)this.index=new E.default({filehandle:new R.RemoteFile(u)});else if(i)this.index=new E.default({filehandle:new R.LocalFile("".concat(i,".bai"))});else{if(!o)throw new Error("unable to infer index format");this.index=new E.default({filehandle:new R.RemoteFile("".concat(o,".bai"))})}this.featureCache=new k.default({cache:new M.default({maxSize:void 0!==h?h:50}),fill:(0,g.default)(n=this._readChunk).call(n,this)}),this.fetchSizeLimit=d||5e8,this.chunkSizeLimit=p||3e8}var n,r,I,N,C,B,z,F,U,D;return(0,b.default)(e,[{key:"getHeader",value:(D=(0,p.default)(h.default.mark((function e(){var n,r,i,o,a,s,u,f,c,l,p,g,v=arguments;return h.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=v.length>0&&void 0!==v[0]?v[0]:{},r=(0,P.makeOpts)(n),e.next=4,this.index.parse(r);case 4:if(i=e.sent,!(o=i.firstDataLine?i.firstDataLine.blockPosition+65535:void 0)){e.next=17;break}return e.next=9,this.bam.read(t.alloc(o+65536),0,o+65536,0,r);case 9:if(s=e.sent,u=s.bytesRead,a=s.buffer,u){e.next=14;break}throw new Error("Error reading header");case 14:a=u<o?(0,d.default)(a).call(a,0,u):(0,d.default)(a).call(a,0,o),e.next=20;break;case 17:return e.next=19,this.bam.readFile(r);case 19:a=e.sent;case 20:return e.next=22,(0,O.unzip)(a);case 22:if(21840194===(f=e.sent).readInt32LE(0)){e.next=25;break}throw new Error("Not a BAM file");case 25:return c=f.readInt32LE(4),this.header=f.toString("utf8",8,8+c),e.next=29,this._readRefSeqs(c+8,65535,r);case 29:return l=e.sent,p=l.chrToIndex,g=l.indexToChr,this.chrToIndex=p,this.indexToChr=g,e.abrupt("return",(0,L.parseHeaderText)(this.header));case 35:case"end":return e.stop()}}),e,this)}))),function(){return D.apply(this,arguments)})},{key:"getHeaderText",value:(U=(0,p.default)(h.default.mark((function t(){var e,n=arguments;return h.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return e=n.length>0&&void 0!==n[0]?n[0]:{},t.next=3,this.getHeader(e);case 3:return t.abrupt("return",this.header);case 4:case"end":return t.stop()}}),t,this)}))),function(){return U.apply(this,arguments)})},{key:"_readRefSeqs",value:(F=(0,p.default)(h.default.mark((function e(n,r){var i,o,a,s,u,f,c,l,p,g,v,b,y,m=arguments;return h.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(i=m.length>2&&void 0!==m[2]?m[2]:{},!(n>r)){e.next=3;break}return e.abrupt("return",this._readRefSeqs(n,2*r,i));case 3:return e.next=5,this.bam.read(t.alloc(r+65536),0,r,0,i);case 5:if(o=e.sent,a=o.bytesRead,s=o.buffer,a){e.next=10;break}throw new Error("Error reading refseqs from header");case 10:return s=a<r?(0,d.default)(s).call(s,0,a):(0,d.default)(s).call(s,0,r),e.next=13,(0,O.unzip)(s);case 13:u=e.sent,f=u.readInt32LE(n),c=n+4,l={},p=[],g=0;case 19:if(!(g<f)){e.next=35;break}return e.next=22,(0,P.abortBreakPoint)(i.signal);case 22:if(v=u.readInt32LE(c),b=u.toString("utf8",c+4,c+4+v-1),b=this.renameRefSeq(b),y=u.readInt32LE(c+v+4),l[b]=g,p.push({refName:b,length:y}),!((c=c+8+v)>u.length)){e.next=32;break}return console.warn("BAM header is very big.  Re-fetching ".concat(r," bytes.")),e.abrupt("return",this._readRefSeqs(n,2*r,i));case 32:g+=1,e.next=19;break;case 35:return e.abrupt("return",{chrToIndex:l,indexToChr:p});case 36:case"end":return e.stop()}}),e,this)}))),function(t,e){return F.apply(this,arguments)})},{key:"getRecordsForRange",value:(z=(0,p.default)(h.default.mark((function t(e,n,r){var i,o,a,s,u,f,c,d,p,g=arguments;return h.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:i=g.length>3&&void 0!==g[3]?g[3]:{viewAsPairs:!1,pairAcrossChr:!1,maxInsertSize:2e5},o=[],a=!0,s=!1,t.prev=4,f=(0,x.default)(this.streamRecordsForRange(e,n,r,i));case 6:return t.next=8,f.next();case 8:return c=t.sent,a=c.done,t.next=12,c.value;case 12:if(d=t.sent,a){t.next=19;break}p=d,o=(0,l.default)(o).call(o,p);case 16:a=!0,t.next=6;break;case 19:t.next=25;break;case 21:t.prev=21,t.t0=t.catch(4),s=!0,u=t.t0;case 25:if(t.prev=25,t.prev=26,a||null==f.return){t.next=30;break}return t.next=30,f.return();case 30:if(t.prev=30,!s){t.next=33;break}throw u;case 33:return t.finish(30);case 34:return t.finish(25);case 35:return t.abrupt("return",o);case 36:case"end":return t.stop()}}),t,this,[[4,21,25,35],[26,,30,34]])}))),function(t,e,n){return z.apply(this,arguments)})},{key:"streamRecordsForRange",value:function(t,e,n){var r=this,i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{viewAsPairs:!1,pairAcrossChr:!1,maxInsertSize:2e5};return(0,m.default)(h.default.mark((function o(){var a,s,u,d,p,g,v,b;return h.default.wrap((function(o){for(;;)switch(o.prev=o.next){case 0:if(i.viewAsPairs=i.viewAsPairs||!1,i.pairAcrossChr=i.pairAcrossChr||!1,i.maxInsertSize=void 0!==i.maxInsertSize?i.maxInsertSize:2e5,(s=r.chrToIndex&&r.chrToIndex[t])>=0){o.next=8;break}u=[],o.next=13;break;case 8:return o.next=10,(0,w.default)(r.index.blocksForRange(s,e-1,n,i));case 10:if(u=o.sent){o.next=13;break}throw new Error("Error in index fetch");case 13:d=0;case 14:if(!(d<u.length)){o.next=23;break}return o.next=17,(0,w.default)((0,P.abortBreakPoint)(i.signal));case 17:if(!((p=u[d].fetchedSize())>r.chunkSizeLimit)){o.next=20;break}throw new Error((0,l.default)(g="Too many BAM features. BAM chunk size ".concat(p," bytes exceeds chunkSizeLimit of ")).call(g,r.chunkSizeLimit));case 20:d+=1,o.next=14;break;case 23:if(!((v=(0,c.default)(a=(0,f.default)(u).call(u,(function(t){return t.fetchedSize()}))).call(a,(function(t,e){return t+e}),0))>r.fetchSizeLimit)){o.next=26;break}throw new Error((0,l.default)(b="data size of ".concat(v.toLocaleString()," bytes exceeded fetch size limit of ")).call(b,r.fetchSizeLimit.toLocaleString()," bytes"));case 26:return o.delegateYield((0,_.default)((0,x.default)(r._fetchChunkFeatures(u,s,e,n,i)),w.default),"t0",27);case 27:case"end":return o.stop()}}),o)})))()}},{key:"_fetchChunkFeatures",value:function(t,e,n,r,i){var o=this;return(0,m.default)(h.default.mark((function a(){var s,u,f,c,l,d,p,g,v,b,y;return h.default.wrap((function(a){for(;;)switch(a.prev=a.next){case 0:s=[],u=!1,f=0;case 3:if(!(f<t.length)){a.next=21;break}return c=t[f],a.next=7,(0,w.default)(o.featureCache.get(c.toString(),{chunk:c,opts:i},i.signal));case 7:return l=a.sent,d=l.data,p=l.cpositions,g=l.dpositions,v=l.chunk,b=o.readBamFeatures(d,p,g,v).then((function(t){for(var i=[],o=0;o<t.length;o+=1){var a=t[o];if(a.seq_id()===e){if(a.get("start")>=r){u=!0;break}a.get("end")>=n&&i.push(a)}}return i})),s.push(b),a.next=16,(0,w.default)(b);case 16:if(!u){a.next=18;break}return a.abrupt("break",21);case 18:f++,a.next=3;break;case 21:(0,P.checkAbortSignal)(i.signal),y=0;case 23:if(!(y<s.length)){a.next=29;break}return a.next=26,s[y];case 26:y++,a.next=23;break;case 29:if((0,P.checkAbortSignal)(i.signal),!i.viewAsPairs){a.next=33;break}return a.next=33,o.fetchPairs(e,s,i);case 33:case"end":return a.stop()}}),a)})))()}},{key:"fetchPairs",value:(B=(0,p.default)(h.default.mark((function t(e,n,r){var d,g,v,b,y,m,w,_,x,k,E,S,A,O,M=this;return h.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return v={},b={},t.next=4,u.default.all((0,f.default)(n).call(n,function(){var t=(0,p.default)(h.default.mark((function t(e){var n,r,i,o,u,f;return h.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,e;case 2:for(r=t.sent,i={},o=0;o<r.length;o++)u=r[o].name(),f=r[o].id(),i[u]||(i[u]=0),i[u]++,b[f]=1;(0,s.default)(n=(0,T.default)(i)).call(n,(function(t){var e=(0,a.default)(t,2),n=e[0];1===e[1]&&(v[n]=!0)}));case 6:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}()));case 4:return y=[],t.next=7,u.default.all((0,f.default)(n).call(n,function(){var t=(0,p.default)(h.default.mark((function t(n){var i,o,a;return h.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,n;case 2:for(i=t.sent,o=0;o<i.length;o++)a=i[o].name(),v[a]&&(r.pairAcrossChr||i[o]._next_refid()===e&&Math.abs(i[o].get("start")-i[o]._next_pos())<(r.maxInsertSize||2e5))&&y.push(M.index.blocksForRange(i[o]._next_refid(),i[o]._next_pos(),i[o]._next_pos()+1,r));case 4:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}()));case 7:return t.next=9,u.default.all(y);case 9:for(m=t.sent,w=[],_=0;_<m.length;_++)w=(0,l.default)(w).call(w,m[_]);if(w=(0,o.default)(d=(0,i.default)(w).call(w)).call(d,(function(t,e,n){return!e||t.toString()!==n[e-1].toString()})),!((x=(0,c.default)(g=(0,f.default)(w).call(w,(function(t){return t.fetchedSize()}))).call(g,(function(t,e){return t+e}),0))>this.fetchSizeLimit)){t.next=16;break}throw new Error((0,l.default)(k="data size of ".concat(x.toLocaleString()," bytes exceeded fetch size limit of ")).call(k,this.fetchSizeLimit.toLocaleString()," bytes"));case 16:return E=(0,f.default)(w).call(w,function(){var t=(0,p.default)(h.default.mark((function t(e){var n,i,o,a,s,u,f,c,l;return h.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,M.featureCache.get(e.toString(),{chunk:e,opts:r},r.signal);case 2:return n=t.sent,i=n.data,o=n.cpositions,a=n.dpositions,s=n.chunk,t.next=9,M.readBamFeatures(i,o,a,s);case 9:for(u=t.sent,f=[],c=0;c<u.length;c+=1)l=u[c],v[l.get("name")]&&!b[l.id()]&&f.push(l);return t.abrupt("return",f);case 13:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}()),t.next=19,u.default.all(E);case 19:return S=t.sent,A=[],S.length&&(O=(0,c.default)(S).call(S,(function(t,e){return(0,l.default)(t).call(t,e)})),A=(0,l.default)(A).call(A,O)),t.abrupt("return",A);case 23:case"end":return t.stop()}}),t,this)}))),function(t,e,n){return B.apply(this,arguments)})},{key:"_readChunk",value:(C=(0,p.default)(h.default.mark((function e(n,r){var i,o,a,s,u,f,c,l,p,g,v;return h.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return i=n.chunk,o=n.opts,s=(a=i).fetchedSize(),e.next=5,this.bam.read(t.alloc(s),0,s,a.minv.blockPosition,o);case 5:if(u=e.sent,f=u.bytesRead,c=u.buffer,(0,P.checkAbortSignal)(r),f){e.next=11;break}return e.abrupt("return",[]);case 11:return c=f<s?(0,d.default)(c).call(c,0,f):(0,d.default)(c).call(c,0,s),e.next=14,(0,O.unzipChunkSlice)(c,i);case 14:return l=e.sent,p=l.buffer,g=l.cpositions,v=l.dpositions,(0,P.checkAbortSignal)(r),e.abrupt("return",{data:p,cpositions:g,dpositions:v,chunk:i});case 20:case"end":return e.stop()}}),e,this)}))),function(t,e){return C.apply(this,arguments)})},{key:"readBamFeatures",value:(N=(0,p.default)(h.default.mark((function t(e,n,r,i){var o,a,s,u,f,c,l;return h.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:o=0,a=[],s=0,u=0;case 4:if(!(o+4<e.length)){t.next=19;break}if(f=e.readInt32LE(o),c=o+4+f-1,r){for(;o+i.minv.dataPosition>=r[s++];);s--}if(!(c<e.length)){t.next=16;break}if(l=new j.default({bytes:{byteArray:e,start:o,end:c},fileOffset:n?256*n[s]+(o-r[s])+i.minv.dataPosition+1:A.default.signed((0,d.default)(e).call(e,o,c))}),a.push(l),!(++u>500)){t.next=16;break}return t.next=15,(0,P.timeout)(1);case 15:u=0;case 16:o=c+1,t.next=4;break;case 19:return t.abrupt("return",a);case 20:case"end":return t.stop()}}),t)}))),function(t,e,n,r){return N.apply(this,arguments)})},{key:"hasRefSeq",value:(I=(0,p.default)(h.default.mark((function t(e){var n;return h.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n=this.chrToIndex&&this.chrToIndex[e],t.abrupt("return",this.index.hasRefSeq(n));case 2:case"end":return t.stop()}}),t,this)}))),function(t){return I.apply(this,arguments)})},{key:"lineCount",value:(r=(0,p.default)(h.default.mark((function t(e){var n;return h.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n=this.chrToIndex&&this.chrToIndex[e],t.abrupt("return",this.index.lineCount(n));case 2:case"end":return t.stop()}}),t,this)}))),function(t){return r.apply(this,arguments)})},{key:"indexCov",value:(n=(0,p.default)(h.default.mark((function t(e,n,r){var i;return h.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this.index.parse();case 2:return i=this.chrToIndex&&this.chrToIndex[e],t.abrupt("return",this.index.indexCov(i,n,r));case 4:case"end":return t.stop()}}),t,this)}))),function(t,e,r){return n.apply(this,arguments)})}]),e}();e.default=I}).call(this,n(9).Buffer)},function(t,e,n){var r=n(436);t.exports=function(t){return function(){return new r(t.apply(this,arguments))}},t.exports.default=t.exports,t.exports.__esModule=!0},function(t,e,n){t.exports=n(437)},function(t,e){t.exports=function(t){this.wrapped=t},t.exports.default=t.exports,t.exports.__esModule=!0},function(t,e,n){var r=n(216);t.exports=function(t){return new r(t)},t.exports.default=t.exports,t.exports.__esModule=!0},function(t,e,n){var r=n(109),i=n(47),o=n(114);t.exports=function(t,e){var n={},a=!1;function s(n,i){return a=!0,i=new r((function(e){e(t[n](i))})),{done:!1,value:e(i)}}return n[void 0!==i&&o||"@@iterator"]=function(){return this},n.next=function(t){return a?(a=!1,t):s("next",t)},"function"==typeof t.throw&&(n.throw=function(t){if(a)throw a=!1,t;return s("throw",t)}),"function"==typeof t.return&&(n.return=function(t){return a?(a=!1,t):s("return",t)}),n},t.exports.default=t.exports,t.exports.__esModule=!0},function(t,e,n){var r=n(47),i=n(215),o=n(114),a=n(60);t.exports=function(t){var e;if(void 0!==r&&(i&&(e=t[i]),null==e&&o&&(e=a(t))),null==e&&(e=t["@@asyncIterator"]),null==e&&(e=t["@@iterator"]),null==e)throw new TypeError("Object is not async iterable");return e.call(t)},t.exports.default=t.exports,t.exports.__esModule=!0},function(t,e,n){"use strict";var r=n(87);Object.defineProperty(e,"__esModule",{value:!0});var i={open:!0,fromUrl:!0,LocalFile:!0,RemoteFile:!0,BlobFile:!0};e.open=function(t,e,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};if(void 0!==n)return n;if(void 0!==t)return f(t,r);if(void 0!==e)return new o.default(e,r);throw new Error("no url, path, or filehandle provided, cannot open")},e.fromUrl=f,Object.defineProperty(e,"LocalFile",{enumerable:!0,get:function(){return o.default}}),Object.defineProperty(e,"RemoteFile",{enumerable:!0,get:function(){return a.default}}),Object.defineProperty(e,"BlobFile",{enumerable:!0,get:function(){return s.default}});var o=r(n(442)),a=r(n(443)),s=r(n(446)),u=n(447);function f(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return new a.default(t,e)}Object.keys(u).forEach((function(t){"default"!==t&&"__esModule"!==t&&(Object.prototype.hasOwnProperty.call(i,t)||Object.defineProperty(e,t,{enumerable:!0,get:function(){return u[t]}}))}))},function(t,e,n){"use strict";(function(t){var r=n(15);n(12)(e,"__esModule",{value:!0}),e.default=void 0;var i,o=r(n(448)),a=r(n(454)),s=r(n(61)),u=r(n(81)),f=r(n(36)),c=r(n(50)),l=r(n(30)),h=r(n(31)),d=r(n(29)),p=r(n(62)),g=r(n(460)),v=(0,p.default)(i="=ACMGRSVTWYHKDBN".split("")).call(i,(function(t){return t.charCodeAt(0)})),b="MIDNSHP=X???????".split(""),y=function(){function e(t){(0,l.default)(this,e),(0,d.default)(this,"data",void 0),(0,d.default)(this,"bytes",void 0),(0,d.default)(this,"flags",void 0),(0,d.default)(this,"_id",void 0),(0,d.default)(this,"_refID",void 0),(0,d.default)(this,"_tagOffset",void 0),(0,d.default)(this,"_tagList",[]),(0,d.default)(this,"_allTagsParsed",!1),this.data={},this.bytes={start:t.bytes.start,end:t.bytes.end,byteArray:t.bytes.byteArray},this._id=t.fileOffset;var n=this.bytes,r=n.start,i=n.byteArray;this._refID=i.readInt32LE(r+4),this.data.start=i.readInt32LE(r+8),this.flags=(4294901760&i.readInt32LE(r+16))>>16}return(0,h.default)(e,[{key:"get",value:function(t){return this[t]?(this.data[t]||(this.data[t]=this[t]()),this.data[t]):this._get(t.toLowerCase())}},{key:"end",value:function(){return this.get("start")+(this.get("length_on_ref")||this.get("seq_length")||void 0)}},{key:"seq_id",value:function(){return this._refID}},{key:"_get",value:function(t){return t in this.data||(this.data[t]=this._parseTag(t)),this.data[t]}},{key:"_tags",value:function(){var t,e=this;this._parseAllTags();var n=["seq"];this.isSegmentUnmapped()||n.push("start","end","strand","score","qual","MQ","CIGAR","length_on_ref","template_length"),this.isPaired()&&n.push("next_segment_position","pair_orientation"),n=(0,c.default)(n).call(n,this._tagList||[]),(0,f.default)(t=(0,u.default)(this.data)).call(t,(function(t){"_"!==t[0]&&"next_seq_id"!==t&&n.push(t)}));var r={};return n=(0,s.default)(n).call(n,(function(t){if(t in e.data&&void 0===e.data[t]||"CG"===t||"cg"===t)return!1;var n=t.toLowerCase(),i=r[n];return r[n]=!0,!i}))}},{key:"parent",value:function(){}},{key:"children",value:function(){return this.get("subfeatures")}},{key:"id",value:function(){return this._id}},{key:"mq",value:function(){var t=(65280&this.get("_bin_mq_nl"))>>8;return 255===t?void 0:t}},{key:"score",value:function(){return this.get("mq")}},{key:"qual",value:function(){var t;return null===(t=this.qualRaw())||void 0===t?void 0:t.join(" ")}},{key:"qualRaw",value:function(){if(!this.isSegmentUnmapped()){for(var e=this.bytes.byteArray,n=this.bytes.start+36+this.get("_l_read_name")+4*this.get("_n_cigar_op")+this.get("_seq_bytes"),r=this.get("seq_length"),i=t.allocUnsafe(r),o=0;o<r;++o)i[o]=e[n+o];return i}}},{key:"strand",value:function(){return this.isReverseComplemented()?-1:1}},{key:"multi_segment_next_segment_strand",value:function(){if(!this.isMateUnmapped())return this.isMateReverseComplemented()?-1:1}},{key:"name",value:function(){return this.get("_read_name")}},{key:"_read_name",value:function(){var t=this.get("_l_read_name");return this.bytes.byteArray.toString("ascii",this.bytes.start+36,this.bytes.start+36+t-1)}},{key:"_parseTag",value:function(t){if(!this._allTagsParsed){for(var e,n=this.bytes.byteArray,r=this._tagOffset||this.bytes.start+36+this.get("_l_read_name")+4*this.get("_n_cigar_op")+this.get("_seq_bytes")+this.get("seq_length"),i=this.bytes.end;r<i&&e!==t;){var o=String.fromCharCode(n[r],n[r+1]);e=o.toLowerCase();var a=String.fromCharCode(n[r+2]);r+=3;var s=void 0;switch(a){case"A":s=String.fromCharCode(n[r]),r+=1;break;case"i":s=n.readInt32LE(r),r+=4;break;case"I":s=n.readUInt32LE(r),r+=4;break;case"c":s=n.readInt8(r),r+=1;break;case"C":s=n.readUInt8(r),r+=1;break;case"s":s=n.readInt16LE(r),r+=2;break;case"S":s=n.readUInt16LE(r),r+=2;break;case"f":s=n.readFloatLE(r),r+=4;break;case"Z":case"H":for(s="";r<=i;){var u=n[r++];if(0===u)break;s+=String.fromCharCode(u)}break;case"B":s="";var f=n[r++],c=String.fromCharCode(f),l=n.readInt32LE(r);if(r+=4,"i"===c)if("CG"===o)for(var h=0;h<l;h++){var d=n.readInt32LE(r);s+=(d>>4)+b[15&d],r+=4}else for(var p=0;p<l;p++)s+=n.readInt32LE(r),p+1<l&&(s+=","),r+=4;if("I"===c)if("CG"===o)for(var g=0;g<l;g++){var v=n.readUInt32LE(r);s+=(v>>4)+b[15&v],r+=4}else for(var y=0;y<l;y++)s+=n.readUInt32LE(r),y+1<l&&(s+=","),r+=4;if("s"===c)for(var m=0;m<l;m++)s+=n.readInt16LE(r),m+1<l&&(s+=","),r+=2;if("S"===c)for(var w=0;w<l;w++)s+=n.readUInt16LE(r),w+1<l&&(s+=","),r+=2;if("c"===c)for(var _=0;_<l;_++)s+=n.readInt8(r),_+1<l&&(s+=","),r+=1;if("C"===c)for(var x=0;x<l;x++)s+=n.readUInt8(r),x+1<l&&(s+=","),r+=1;if("f"===c)for(var k=0;k<l;k++)s+=n.readFloatLE(r),k+1<l&&(s+=","),r+=4;break;default:console.warn("Unknown BAM tag type '".concat(a,"', tags may be incomplete")),s=void 0,r=i}if(this._tagOffset=r,this._tagList.push(o),e===t)return s;this.data[e]=s}this._allTagsParsed=!0}}},{key:"_parseAllTags",value:function(){this._parseTag("")}},{key:"_parseCigar",value:function(t){var e;return(0,p.default)(e=t.match(/\d+\D/g)).call(e,(function(t){return[t.match(/\D/)[0].toUpperCase(),(0,a.default)(t,10)]}))}},{key:"isPaired",value:function(){return!!((0,o.default)(this)&g.default.BAM_FPAIRED)}},{key:"isProperlyPaired",value:function(){return!!((0,o.default)(this)&g.default.BAM_FPROPER_PAIR)}},{key:"isSegmentUnmapped",value:function(){return!!((0,o.default)(this)&g.default.BAM_FUNMAP)}},{key:"isMateUnmapped",value:function(){return!!((0,o.default)(this)&g.default.BAM_FMUNMAP)}},{key:"isReverseComplemented",value:function(){return!!((0,o.default)(this)&g.default.BAM_FREVERSE)}},{key:"isMateReverseComplemented",value:function(){return!!((0,o.default)(this)&g.default.BAM_FMREVERSE)}},{key:"isRead1",value:function(){return!!((0,o.default)(this)&g.default.BAM_FREAD1)}},{key:"isRead2",value:function(){return!!((0,o.default)(this)&g.default.BAM_FREAD2)}},{key:"isSecondary",value:function(){return!!((0,o.default)(this)&g.default.BAM_FSECONDARY)}},{key:"isFailedQc",value:function(){return!!((0,o.default)(this)&g.default.BAM_FQCFAIL)}},{key:"isDuplicate",value:function(){return!!((0,o.default)(this)&g.default.BAM_FDUP)}},{key:"isSupplementary",value:function(){return!!((0,o.default)(this)&g.default.BAM_FSUPPLEMENTARY)}},{key:"cigar",value:function(){if(!this.isSegmentUnmapped()){var t=this.bytes,e=t.byteArray,n=t.start,r=this.get("_n_cigar_op"),i=n+36+this.get("_l_read_name"),o=this.get("seq_length"),a="",s=0,u=e.readInt32LE(i),f=u>>4,c=b[15&u];if("S"===c&&f===o)return i+=4,f=(u=e.readInt32LE(i))>>4,"N"!==(c=b[15&u])&&console.warn("CG tag with no N tag"),this.data.length_on_ref=f,this.get("CG");for(var l=0;l<r;++l)a+=(f=(u=e.readInt32LE(i))>>4)+(c=b[15&u]),"H"!==c&&"S"!==c&&"I"!==c&&(s+=f),i+=4;return this.data.length_on_ref=s,a}}},{key:"_flags",value:function(){}},{key:"length_on_ref",value:function(){return this.get("cigar"),this.data.length_on_ref}},{key:"_n_cigar_op",value:function(){return 65535&this.get("_flag_nc")}},{key:"_l_read_name",value:function(){return 255&this.get("_bin_mq_nl")}},{key:"_seq_bytes",value:function(){return this.get("seq_length")+1>>1}},{key:"getReadBases",value:function(){return this.seq()}},{key:"seq",value:function(){for(var t=this.bytes.byteArray,e=this.bytes.start+36+this.get("_l_read_name")+4*this.get("_n_cigar_op"),n=this.get("_seq_bytes"),r=this.get("seq_length"),i="",o=0,a=0;a<n;++a){var s=t[e+a];i+=String.fromCharCode(v[(240&s)>>4]),++o<r&&(i+=String.fromCharCode(v[15&s]),o++)}return i}},{key:"getPairOrientation",value:function(){if(!this.isSegmentUnmapped()&&!this.isMateUnmapped()&&this._refID===this._next_refid()){var t=this.isReverseComplemented()?"R":"F",e=this.isMateReverseComplemented()?"R":"F",n=" ",r=" ";this.isRead1()?(n="1",r="2"):this.isRead2()&&(n="2",r="1");var i=[];return this.template_length()>0?(i[0]=t,i[1]=n,i[2]=e,i[3]=r):(i[2]=t,i[3]=n,i[0]=e,i[1]=r),i.join("")}return null}},{key:"_bin_mq_nl",value:function(){return this.bytes.byteArray.readInt32LE(this.bytes.start+12)}},{key:"_flag_nc",value:function(){return this.bytes.byteArray.readInt32LE(this.bytes.start+16)}},{key:"seq_length",value:function(){return this.bytes.byteArray.readInt32LE(this.bytes.start+20)}},{key:"_next_refid",value:function(){return this.bytes.byteArray.readInt32LE(this.bytes.start+24)}},{key:"_next_pos",value:function(){return this.bytes.byteArray.readInt32LE(this.bytes.start+28)}},{key:"template_length",value:function(){return this.bytes.byteArray.readInt32LE(this.bytes.start+32)}},{key:"toJSON",value:function(){var t,e=this,n={};return(0,f.default)(t=(0,u.default)(this)).call(t,(function(t){"_"!==t.charAt(0)&&"bytes"!==t&&(n[t]=e[t])})),n}}]),e}();e.default=y}).call(this,n(9).Buffer)},function(t,e){t.exports="\t\n\v\f\r                　\u2028\u2029\ufeff"},function(t,e,n){"use strict";var r=n(15);n(12)(e,"__esModule",{value:!0}),e.parseHeaderText=function(t){var e=t.split(/\r?\n/),n=[];return(0,u.default)(e).call(e,(function(t){var e=t.split(/\t/),r=(0,s.default)(e),u=r[0],f=(0,a.default)(r).call(r,1),c=(0,o.default)(f).call(f,(function(t){var e=t.split(":",2),n=(0,i.default)(e,2);return{tag:n[0],value:n[1]}}));u&&n.push({tag:u.substr(1),data:c})})),n};var i=r(n(82)),o=r(n(62)),a=r(n(64)),s=r(n(461)),u=r(n(36))},function(t,e,n){t.exports=n(467)},function(t,e,n){"use strict";var r=n(15),i=n(12);i(e,"__esModule",{value:!0}),i(e,"BAI",{enumerable:!0,get:function(){return o.default}}),i(e,"CSI",{enumerable:!0,get:function(){return a.default}}),i(e,"BamFile",{enumerable:!0,get:function(){return s.default}}),i(e,"HtsgetFile",{enumerable:!0,get:function(){return u.default}}),i(e,"BamRecord",{enumerable:!0,get:function(){return f.default}});var o=r(n(143)),a=r(n(196)),s=r(n(213)),u=r(n(463)),f=r(n(221))},function(t,e,n){"use strict";const r=n(483),i=Symbol("max"),o=Symbol("length"),a=Symbol("lengthCalculator"),s=Symbol("allowStale"),u=Symbol("maxAge"),f=Symbol("dispose"),c=Symbol("noDisposeOnSet"),l=Symbol("lruList"),h=Symbol("cache"),d=Symbol("updateAgeOnGet"),p=()=>1;const g=(t,e,n)=>{const r=t[h].get(e);if(r){const e=r.value;if(v(t,e)){if(y(t,r),!t[s])return}else n&&(t[d]&&(r.value.now=Date.now()),t[l].unshiftNode(r));return e.value}},v=(t,e)=>{if(!e||!e.maxAge&&!t[u])return!1;const n=Date.now()-e.now;return e.maxAge?n>e.maxAge:t[u]&&n>t[u]},b=t=>{if(t[o]>t[i])for(let e=t[l].tail;t[o]>t[i]&&null!==e;){const n=e.prev;y(t,e),e=n}},y=(t,e)=>{if(e){const n=e.value;t[f]&&t[f](n.key,n.value),t[o]-=n.length,t[h].delete(n.key),t[l].removeNode(e)}};class m{constructor(t,e,n,r,i){this.key=t,this.value=e,this.length=n,this.now=r,this.maxAge=i||0}}const w=(t,e,n,r)=>{let i=n.value;v(t,i)&&(y(t,n),t[s]||(i=void 0)),i&&e.call(r,i.value,i.key,t)};t.exports=class{constructor(t){if("number"==typeof t&&(t={max:t}),t||(t={}),t.max&&("number"!=typeof t.max||t.max<0))throw new TypeError("max must be a non-negative number");this[i]=t.max||1/0;const e=t.length||p;if(this[a]="function"!=typeof e?p:e,this[s]=t.stale||!1,t.maxAge&&"number"!=typeof t.maxAge)throw new TypeError("maxAge must be a number");this[u]=t.maxAge||0,this[f]=t.dispose,this[c]=t.noDisposeOnSet||!1,this[d]=t.updateAgeOnGet||!1,this.reset()}set max(t){if("number"!=typeof t||t<0)throw new TypeError("max must be a non-negative number");this[i]=t||1/0,b(this)}get max(){return this[i]}set allowStale(t){this[s]=!!t}get allowStale(){return this[s]}set maxAge(t){if("number"!=typeof t)throw new TypeError("maxAge must be a non-negative number");this[u]=t,b(this)}get maxAge(){return this[u]}set lengthCalculator(t){"function"!=typeof t&&(t=p),t!==this[a]&&(this[a]=t,this[o]=0,this[l].forEach(t=>{t.length=this[a](t.value,t.key),this[o]+=t.length})),b(this)}get lengthCalculator(){return this[a]}get length(){return this[o]}get itemCount(){return this[l].length}rforEach(t,e){e=e||this;for(let n=this[l].tail;null!==n;){const r=n.prev;w(this,t,n,e),n=r}}forEach(t,e){e=e||this;for(let n=this[l].head;null!==n;){const r=n.next;w(this,t,n,e),n=r}}keys(){return this[l].toArray().map(t=>t.key)}values(){return this[l].toArray().map(t=>t.value)}reset(){this[f]&&this[l]&&this[l].length&&this[l].forEach(t=>this[f](t.key,t.value)),this[h]=new Map,this[l]=new r,this[o]=0}dump(){return this[l].map(t=>!v(this,t)&&{k:t.key,v:t.value,e:t.now+(t.maxAge||0)}).toArray().filter(t=>t)}dumpLru(){return this[l]}set(t,e,n){if((n=n||this[u])&&"number"!=typeof n)throw new TypeError("maxAge must be a number");const r=n?Date.now():0,s=this[a](e,t);if(this[h].has(t)){if(s>this[i])return y(this,this[h].get(t)),!1;const a=this[h].get(t).value;return this[f]&&(this[c]||this[f](t,a.value)),a.now=r,a.maxAge=n,a.value=e,this[o]+=s-a.length,a.length=s,this.get(t),b(this),!0}const d=new m(t,e,s,r,n);return d.length>this[i]?(this[f]&&this[f](t,e),!1):(this[o]+=d.length,this[l].unshift(d),this[h].set(t,this[l].head),b(this),!0)}has(t){if(!this[h].has(t))return!1;const e=this[h].get(t).value;return!v(this,e)}get(t){return g(this,t,!0)}peek(t){return g(this,t,!1)}pop(){const t=this[l].tail;return t?(y(this,t),t.value):null}del(t){y(this,this[h].get(t))}load(t){this.reset();const e=Date.now();for(let n=t.length-1;n>=0;n--){const r=t[n],i=r.e||0;if(0===i)this.set(r.k,r.v);else{const t=i-e;t>0&&this.set(r.k,r.v,t)}}}prune(){this[h].forEach((t,e)=>g(this,e,!1))}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return y}));function r(){}function i(t,e){var n=new r;if(t instanceof r)t.each((function(t,e){n.set(e,t)}));else if(Array.isArray(t)){var i,o=-1,a=t.length;if(null==e)for(;++o<a;)n.set(o,t[o]);else for(;++o<a;)n.set(e(i=t[o],o,t),i)}else if(t)for(var s in t)n.set(s,t[s]);return n}r.prototype=i.prototype={constructor:r,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,e){return this["$"+t]=e,this},remove:function(t){var e="$"+t;return e in this&&delete this[e]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(e.slice(1));return t},values:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(this[e]);return t},entries:function(){var t=[];for(var e in this)"$"===e[0]&&t.push({key:e.slice(1),value:this[e]});return t},size:function(){var t=0;for(var e in this)"$"===e[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var e in this)"$"===e[0]&&t(this[e],e.slice(1),this)}};var o=i;function a(){}var s=o.prototype;function u(t,e){var n=new a;if(t instanceof a)t.each((function(t){n.add(t)}));else if(t){var r=-1,i=t.length;if(null==e)for(;++r<i;)n.add(t[r]);else for(;++r<i;)n.add(e(t[r],r,t))}return n}a.prototype=u.prototype={constructor:a,has:s.has,add:function(t){return this["$"+(t+="")]=t,this},remove:s.remove,clear:s.clear,values:s.keys,size:s.size,empty:s.empty,each:s.each};var f={value:function(){}};function c(){for(var t,e=0,n=arguments.length,r={};e<n;++e){if(!(t=arguments[e]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new l(r)}function l(t){this._=t}function h(t,e){return t.trim().split(/^|\s+/).map((function(t){var n="",r=t.indexOf(".");if(r>=0&&(n=t.slice(r+1),t=t.slice(0,r)),t&&!e.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:n}}))}function d(t,e){for(var n,r=0,i=t.length;r<i;++r)if((n=t[r]).name===e)return n.value}function p(t,e,n){for(var r=0,i=t.length;r<i;++r)if(t[r].name===e){t[r]=f,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=n&&t.push({name:e,value:n}),t}l.prototype=c.prototype={constructor:l,on:function(t,e){var n,r=this._,i=h(t+"",r),o=-1,a=i.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++o<a;)if(n=(t=i[o]).type)r[n]=p(r[n],t.name,e);else if(null==e)for(n in r)r[n]=p(r[n],t.name,null);return this}for(;++o<a;)if((n=(t=i[o]).type)&&(n=d(r[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new l(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,r,i=new Array(n),o=0;o<n;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,n=(r=this._[t]).length;o<n;++o)r[o].value.apply(e,i)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(e,n)}};var g=c,v=function(t,e){var n,r,i,a,s=g("beforesend","progress","load","error"),u=o(),f=new XMLHttpRequest,c=null,l=null,h=0;function d(t){var e,r=f.status;if(!r&&function(t){var e=t.responseType;return e&&"text"!==e?t.response:t.responseText}(f)||r>=200&&r<300||304===r){if(i)try{e=i.call(n,f)}catch(t){return void s.call("error",n,t)}else e=f;s.call("load",n,e)}else s.call("error",n,t)}if("undefined"!=typeof XDomainRequest&&!("withCredentials"in f)&&/^(http(s)?:)?\/\//.test(t)&&(f=new XDomainRequest),"onload"in f?f.onload=f.onerror=f.ontimeout=d:f.onreadystatechange=function(t){f.readyState>3&&d(t)},f.onprogress=function(t){s.call("progress",n,t)},n={header:function(t,e){return t=(t+"").toLowerCase(),arguments.length<2?u.get(t):(null==e?u.remove(t):u.set(t,e+""),n)},mimeType:function(t){return arguments.length?(r=null==t?null:t+"",n):r},responseType:function(t){return arguments.length?(a=t,n):a},timeout:function(t){return arguments.length?(h=+t,n):h},user:function(t){return arguments.length<1?c:(c=null==t?null:t+"",n)},password:function(t){return arguments.length<1?l:(l=null==t?null:t+"",n)},response:function(t){return i=t,n},get:function(t,e){return n.send("GET",t,e)},post:function(t,e){return n.send("POST",t,e)},send:function(e,i,o){return f.open(e,t,!0,c,l),null==r||u.has("accept")||u.set("accept",r+",*/*"),f.setRequestHeader&&u.each((function(t,e){f.setRequestHeader(e,t)})),null!=r&&f.overrideMimeType&&f.overrideMimeType(r),null!=a&&(f.responseType=a),h>0&&(f.timeout=h),null==o&&"function"==typeof i&&(o=i,i=null),null!=o&&1===o.length&&(o=function(t){return function(e,n){t(null==e?n:null)}}(o)),null!=o&&n.on("error",o).on("load",(function(t){o(null,t)})),s.call("beforesend",n,f),f.send(null==i?null:i),n},abort:function(){return f.abort(),n},on:function(){var t=s.on.apply(s,arguments);return t===s?n:t}},null!=e){if("function"!=typeof e)throw new Error("invalid callback: "+e);return n.get(e)}return n};var b=function(t,e){return function(n,r){var i=v(n).mimeType(t).response(e);if(null!=r){if("function"!=typeof r)throw new Error("invalid callback: "+r);return i.get(r)}return i}},y=(b("text/html",(function(t){return document.createRange().createContextualFragment(t.responseText)})),b("application/json",(function(t){return JSON.parse(t.responseText)})),b("text/plain",(function(t){return t.responseText}))),m=(b("application/xml",(function(t){var e=t.responseXML;if(!e)throw new Error("parse error");return e})),{}),w={};function _(t){return new Function("d","return {"+t.map((function(t,e){return JSON.stringify(t)+": d["+e+'] || ""'})).join(",")+"}")}function x(t){var e=Object.create(null),n=[];return t.forEach((function(t){for(var r in t)r in e||n.push(e[r]=r)})),n}function k(t,e){var n=t+"",r=n.length;return r<e?new Array(e-r+1).join(0)+n:n}function E(t){var e,n=t.getUTCHours(),r=t.getUTCMinutes(),i=t.getUTCSeconds(),o=t.getUTCMilliseconds();return isNaN(t)?"Invalid Date":((e=t.getUTCFullYear())<0?"-"+k(-e,6):e>9999?"+"+k(e,6):k(e,4))+"-"+k(t.getUTCMonth()+1,2)+"-"+k(t.getUTCDate(),2)+(o?"T"+k(n,2)+":"+k(r,2)+":"+k(i,2)+"."+k(o,3)+"Z":i?"T"+k(n,2)+":"+k(r,2)+":"+k(i,2)+"Z":r||n?"T"+k(n,2)+":"+k(r,2)+"Z":"")}var S=function(t){var e=new RegExp('["'+t+"\n\r]"),n=t.charCodeAt(0);function r(t,e){var r,i=[],o=t.length,a=0,s=0,u=o<=0,f=!1;function c(){if(u)return w;if(f)return f=!1,m;var e,r,i=a;if(34===t.charCodeAt(i)){for(;a++<o&&34!==t.charCodeAt(a)||34===t.charCodeAt(++a););return(e=a)>=o?u=!0:10===(r=t.charCodeAt(a++))?f=!0:13===r&&(f=!0,10===t.charCodeAt(a)&&++a),t.slice(i+1,e-1).replace(/""/g,'"')}for(;a<o;){if(10===(r=t.charCodeAt(e=a++)))f=!0;else if(13===r)f=!0,10===t.charCodeAt(a)&&++a;else if(r!==n)continue;return t.slice(i,e)}return u=!0,t.slice(i,o)}for(10===t.charCodeAt(o-1)&&--o,13===t.charCodeAt(o-1)&&--o;(r=c())!==w;){for(var l=[];r!==m&&r!==w;)l.push(r),r=c();e&&null==(l=e(l,s++))||i.push(l)}return i}function i(e,n){return e.map((function(e){return n.map((function(t){return a(e[t])})).join(t)}))}function o(e){return e.map(a).join(t)}function a(t){return null==t?"":t instanceof Date?E(t):e.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,e){var n,i,o=r(t,(function(t,r){if(n)return n(t,r-1);i=t,n=e?function(t,e){var n=_(t);return function(r,i){return e(n(r),i,t)}}(t,e):_(t)}));return o.columns=i||[],o},parseRows:r,format:function(e,n){return null==n&&(n=x(e)),[n.map(a).join(t)].concat(i(e,n)).join("\n")},formatBody:function(t,e){return null==e&&(e=x(t)),i(t,e).join("\n")},formatRows:function(t){return t.map(o).join("\n")},formatRow:o,formatValue:a}},A=S(","),O=A.parse,T=(A.parseRows,A.format,A.formatBody,A.formatRows,A.formatRow,A.formatValue,function(t,e){return function(n,r,i){arguments.length<3&&(i=r,r=null);var o=v(n).mimeType(t);return o.row=function(t){return arguments.length?o.response(M(e,r=t)):r},o.row(r),i?o.get(i):o}});function M(t,e){return function(n){return t(n.responseText,e)}}T("text/csv",O);var R=S("\t"),j=R.parse;R.parseRows,R.format,R.formatBody,R.formatRows,R.formatRow,R.formatValue,T("text/tab-separated-values",j)},function(t,e,n){"use strict";n.d(e,"a",(function(){return m}));var r=function(t,e,n){t.prototype=e.prototype=n,n.constructor=t};function i(t,e){var n=Object.create(t.prototype);for(var r in e)n[r]=e[r];return n}function o(){}var a="\\s*([+-]?\\d+)\\s*",s="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",u="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",f=/^#([0-9a-f]{3,8})$/,c=new RegExp("^rgb\\("+[a,a,a]+"\\)$"),l=new RegExp("^rgb\\("+[u,u,u]+"\\)$"),h=new RegExp("^rgba\\("+[a,a,a,s]+"\\)$"),d=new RegExp("^rgba\\("+[u,u,u,s]+"\\)$"),p=new RegExp("^hsl\\("+[s,u,u]+"\\)$"),g=new RegExp("^hsla\\("+[s,u,u,s]+"\\)$"),v={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function b(){return this.rgb().formatHex()}function y(){return this.rgb().formatRgb()}function m(t){var e,n;return t=(t+"").trim().toLowerCase(),(e=f.exec(t))?(n=e[1].length,e=parseInt(e[1],16),6===n?w(e):3===n?new k(e>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):8===n?_(e>>24&255,e>>16&255,e>>8&255,(255&e)/255):4===n?_(e>>12&15|e>>8&240,e>>8&15|e>>4&240,e>>4&15|240&e,((15&e)<<4|15&e)/255):null):(e=c.exec(t))?new k(e[1],e[2],e[3],1):(e=l.exec(t))?new k(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=h.exec(t))?_(e[1],e[2],e[3],e[4]):(e=d.exec(t))?_(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=p.exec(t))?O(e[1],e[2]/100,e[3]/100,1):(e=g.exec(t))?O(e[1],e[2]/100,e[3]/100,e[4]):v.hasOwnProperty(t)?w(v[t]):"transparent"===t?new k(NaN,NaN,NaN,0):null}function w(t){return new k(t>>16&255,t>>8&255,255&t,1)}function _(t,e,n,r){return r<=0&&(t=e=n=NaN),new k(t,e,n,r)}function x(t){return t instanceof o||(t=m(t)),t?new k((t=t.rgb()).r,t.g,t.b,t.opacity):new k}function k(t,e,n,r){this.r=+t,this.g=+e,this.b=+n,this.opacity=+r}function E(){return"#"+A(this.r)+A(this.g)+A(this.b)}function S(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function A(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function O(t,e,n,r){return r<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new M(t,e,n,r)}function T(t){if(t instanceof M)return new M(t.h,t.s,t.l,t.opacity);if(t instanceof o||(t=m(t)),!t)return new M;if(t instanceof M)return t;var e=(t=t.rgb()).r/255,n=t.g/255,r=t.b/255,i=Math.min(e,n,r),a=Math.max(e,n,r),s=NaN,u=a-i,f=(a+i)/2;return u?(s=e===a?(n-r)/u+6*(n<r):n===a?(r-e)/u+2:(e-n)/u+4,u/=f<.5?a+i:2-a-i,s*=60):u=f>0&&f<1?0:s,new M(s,u,f,t.opacity)}function M(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function R(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}r(o,m,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:b,formatHex:b,formatHsl:function(){return T(this).formatHsl()},formatRgb:y,toString:y}),r(k,(function(t,e,n,r){return 1===arguments.length?x(t):new k(t,e,n,null==r?1:r)}),i(o,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new k(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new k(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:E,formatHex:E,formatRgb:S,toString:S})),r(M,(function(t,e,n,r){return 1===arguments.length?T(t):new M(t,e,n,null==r?1:r)}),i(o,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new M(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new M(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*e,i=2*n-r;return new k(R(t>=240?t-240:t+120,i,r),R(t,i,r),R(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}))},,,,,,function(t,e,n){"use strict";n.r(e),function(t){n.d(e,"colorToRGBA",(function(){return y})),n.d(e,"PILEUP_COLORS",(function(){return m})),n.d(e,"PILEUP_COLOR_IXS",(function(){return w})),n.d(e,"cigarTypeToText",(function(){return _})),n.d(e,"parseMD",(function(){return x})),n.d(e,"getSubstitutions",(function(){return k})),n.d(e,"barProperty",(function(){return H}));var r=n(227),i=n(490),o=n(486),a=n(487),s=n(228),u=n(26),f=n(485),c=n(489),l=n(88),h=n(488),d=n(67),p=n(225),g=n(226),v=n.n(g),b=n(135);function y(t,e=1){let n=Object(s.a)(t);return n||(n=Object(s.a)("gray")),[n.rgb().r/255,n.rgb().g/255,n.rgb().b/255,e]}const m={BG:[.89,.89,.89,1],BG2:[.85,.85,.85,1],BG_MUTED:[.92,.92,.92,1],A:[0,0,1,1],C:[1,0,0,1],G:[0,1,0,1],T:[1,1,0,1],S:[0,0,0,.5],H:[0,0,0,.5],X:[0,0,0,.7],I:[1,0,1,.5],D:[1,.5,.5,.5],N:[1,1,1,1],BLACK:[0,0,0,1],BLACK_05:[0,0,0,.5],PLUS_STRAND:[.75,.75,1,1],MINUS_STRAND:[1,.75,.75,1]},w={};Object.keys(m).map((t,e)=>(w[t]=e,null));const _=t=>"D"===t?"Deletion":"S"===t?"Soft clipping":"H"===t?"Hard clipping":"I"===t?"Insertion":"N"===t?"Skipped region":t,x=(t,e)=>{let n=0,r=0,i=!1,o=0;const a=[];for(let s=0;s<t.length;s++)t[s].match(/[0-9]/g)?(r=10*r+ +t[s],i=!1):"^"===t[s]?i=!0:(n+=r,e?a.push({length:r,type:t[s]}):i?o-=1:a.push({pos:n,base:t[s],length:1,bamSeqShift:o}),r=0,n+=1);return a},k=(t,e)=>{let n=[],r=null;if(t.cigar){const e=x(t.cigar,!0);let i=0;for(const t of e)"X"===t.type?(n.push({pos:i,length:t.length,type:"X"}),i+=t.length):"I"===t.type?n.push({pos:i,length:t.length,type:"I"}):"D"===t.type?(n.push({pos:i,length:t.length,type:"D"}),i+=t.length):"N"===t.type?(n.push({pos:i,length:t.length,type:"N"}),i+=t.length):"="!==t.type&&"M"!==t.type||(i+=t.length);const o=e[0],a=e[e.length-1];"S"===o.type&&(r=o,n.push({pos:-o.length,type:"S",length:o.length})),"S"===a.type&&n.push({pos:t.to-t.from,length:a.length,type:"S"}),"H"===o.type&&n.push({pos:-o.length,type:"H",length:o.length}),"H"===a.type&&n.push({pos:t.to-t.from,length:a.length,type:"H"})}if(t.md){const i=x(t.md,!1);i.forEach((function(t){let n=t.pos+t.bamSeqShift,i=n+t.length;null!==r&&(n+=r.length,i+=r.length),t.variant=e.substring(n,i),delete t.bamSeqShift})),n=i.concat(n)}return n},E=Object(o.a)(t=>t.pos).left;function S(t,e){const n=t[0],r=e[0];if(n.indexOf("_")>=0){const t=n.split("_");if(r.indexOf("_")>=0){const e=r.split("_");return S(t[1],e[1])}return 1}if(r.indexOf("_")>=0)return-1;const i=[],o=[];for(const t of n.match(/(\d+|[^\d]+)/g))i.push(Number.isNaN(t)?t.toLowerCase():+t);for(const t of r.match(/(\d+|[^\d]+)/g))i.push(Number.isNaN(t)?t.toLowerCase():+t);for(const t of["m","y","x"]){if(r.toLowerCase().includes(t))return-1;if(n.toLowerCase().includes(t))return 1}return i<o?-1:o>i?1:0}function A(t){const e=[],n={},r={};let i=0;for(let o=0;o<t.length;o++){const a=Number(t[o][1]);i+=a;const s={id:o,chr:t[o][0],pos:i-a};e.push(s),r[s.chr]=s,n[t[o][0]]=a}return{cumPositions:e,chrPositions:r,totalLength:i,chromLengths:n}}function O(t,e){const n={};return n.absToChr=t=>n.chrPositions?((t,e)=>{if(!e||!e.cumPositions||!e.cumPositions.length)return null;let n=E(e.cumPositions,t);const r=e.cumPositions[e.cumPositions.length-1].chr,i=e.chromLengths[r];n-=n>0&&1;let o=Math.floor(t-e.cumPositions[n].pos),a=0;return o<0&&(a=o-1,o=1),n===e.cumPositions.length-1&&o>i&&(a=o-i,o=i),[e.cumPositions[n].chr,o,a,n]})(t,n):null,n.chrToAbs=([t,e]=[])=>{return n.chrPositions?(r=t,i=e,n.chrPositions[r].pos+i):null;var r,i},Object(r.a)(t,(t,r)=>{if(t)e&&e(null);else{const t=A(Object(a.a)(r));Object.keys(t).forEach(e=>{n[e]=t[e]}),e&&e(n)}})}const T=(t,e,n)=>{const r=t.get("seq"),i={id:t._id,from:+t.data.start+1+n,to:+t.data.end+1+n,md:t.get("MD"),chrName:e,chrOffset:n,cigar:t.get("cigar"),mapq:t.get("mq"),strand:1===t.get("strand")?"+":"-",row:null,substitutions:[]};return i.substitutions=k(i,r),i},M={},R={},j={},L={},P=new v.a({max:20}),I={},N={},C=t=>{const{chromSizesUrl:e,bamUrl:n}=N[t],r=e?[R[n],j[e]]:[R[n]];return Promise.all(r).then(r=>{let i=null;if(r.length>1)i=r[1];else{const t=[];for(const{refName:e,length:r}of M[n].indexToChr)t.push([e,r]);t.sort(S),i=A(t)}L[e]=i;const o={tile_size:1024,bins_per_dimension:1024,max_zoom:Math.ceil(Math.log(i.totalLength/1024)/Math.log(2)),max_width:i.totalLength,min_pos:[0],max_pos:[i.totalLength]};return I[t]=o,o})},B=async(t,e,n)=>{const{bamUrl:r,chromSizesUrl:i}=N[t],o=M[r];return C(t).then(r=>{const a=+r.max_width/2**+e,s=[];if(a>2e5)return new Promise(t=>t([]));let u=r.min_pos[0]+n*a;const f=r.min_pos[0]+(n+1)*a,c=L[i],{chromLengths:l,cumPositions:h}=c;for(let r=0;r<h.length;r++){const i=h[r].chr,a=h[r].pos,c=h[r].pos+l[i];if(P.set(`${t}.${e}.${n}`,[]),a<=u&&u<c){if(!(f>c)){const c=Math.ceil(f-a),l=Math.floor(u-a);s.push(o.getRecordsForRange(i,l,c,{}).then(o=>{const a=o.map(t=>T(t,i,h[r].pos));return P.set(`${t}.${e}.${n}`,P.get(`${t}.${e}.${n}`).concat(a)),[]}));break}s.push(o.getRecordsForRange(i,u-a,c-a).then(o=>{const a=o.map(t=>T(t,i,h[r].pos));P.set(`${t}.${e}.${n}`,P.get(`${t}.${e}.${n}`).concat(a))})),u=c}}return Promise.all(s).then(t=>t.flat())})};function z(t,e,n,r){return q(t,e,n,void 0!==r?function(t,e){if(e&&e.field)return t[e.field]}(r,t[n]):void 0)}function F(t){return"object"==typeof t&&!("value"in t)}function U(t){return null!==t&&"object"==typeof t&&"value"in t}const D=["x","xe","x1","x1e","y","ye","y1","y1e","color","size","row","stroke","strokeWidth","opacity","text"];function Z(t){const e={};return D.forEach(n=>{const r=t[n];if(U(r))e[n]=()=>r.value;else if(F(r)){if("text"===n)return;const t=r.domain,i=r.range;if(void 0===t||void 0===i)return;if("quantitative"===r.type||"genomic"===r.type)switch(n){case"x":case"x1":case"xe":case"x1e":case"y":case"size":case"opacity":case"strokeWidth":e[n]=Object(u.a)().domain(t).range(i);break;case"color":case"stroke":const o=h.a;e[n]=Object(f.a)(o).domain(r.domain)}else if("nominal"===r.type)switch(n){case"x":case"xe":case"y":case"row":e[n]=Object(c.a)().domain(t).range(i);break;case"size":e[n]=Object(l.a)().domain(t).range(i);break;case"color":case"stroke":e[n]=Object(l.a)(i).domain(t)}}}),e}function q(t,e,n,r){if("text"===n&&void 0!==r)return""+(+r?~~r:r);const i=t[n],o=F(i)?i.type:U(i)?"constant":void 0;if(o){if("constant"===o)return i.value;if(void 0!==r)switch(n){case"x":case"y":case"x1":case"y1":case"xe":case"ye":case"x1e":if("quantitative"===o||"genomic"===o)return e[n](r);if("nominal"===o)return e[n](r);break;case"color":case"stroke":case"size":if("quantitative"===o)return e[n](r);if("nominal"===o)return e[n](r);break;case"row":if("nominal"===o)return e[n](r);break;case"strokeWidth":case"opacity":if("quantitative"===o)return e[n](r);break;default:return void console.warn(n+" is not supported for encoding values, so returning a undefined value")}}}function W(t,e,n,r,i){const o=t.mark;if(["text","color","row","stroke","opacity","strokeWidth","x","y","xe","x1","x1e","size"].includes(n))return z(t,e,n,r);switch(o){case"bar":return H(t,e,n,r,i);case"point":case"text":return;case"rect":return function(t,e,n,r,i){switch(n){case"width":const n=z(t,e,"xe",r)?z(t,e,"xe",r)-z(t,e,"x",r):i.markWidth;return 0===n?.1:n;case"height":return z(t,e,"size",r)||i.markHeight;default:return}}(t,e,n,r,i);default:return}}function H(t,e,n,r,i){const o=z(t,e,"x",r),a=z(t,e,"xe",r),s=z(t,e,"size",r);switch(n){case"width":return s||(a?a-o:i.tileUnitWidth);case"x-start":if(!i.markWidth)return;return a?(o+a-i.markWidth)/2:o-i.markWidth/2;default:return}}function G(t,e){const n=t[e];return n&&n.domain?n.domain:void 0}function Y(t){return function(t){let e=void 0;return["x","y","xe","ye","x1","y1","x1e","y1e"].reverse().forEach(n=>{const r=t[n];F(r)&&"genomic"===r.type&&(e=r)}),e}(t)}const $=(e,n,r,o,a,s,f,c,l)=>{e.x&&(e.x.domain=s,e.x.range=f),e.xe&&(e.xe.domain=s,e.xe.range=f);const h=Z(e),p=Object(u.a)().domain(s).range(f),g=(p.invert(r),p.invert(0),"circular"===e.layout),v=(e.innerRadius,e.outerRadius,e.startAngle,e.endAngle,p(c+l/a)-p(c)),b=o/(G(e,"row")||["___SINGLE_ROW___"]).length,m=F(e.y)?e.y.baseline:void 0,w=q(e,h,"y",m)||0,_=[],x=[],k=[],E=[];if("bar"!==(S=e).mark&&"area"!==S.mark&&"text"!==S.mark||!F(S.color)||"nominal"!==S.color.type||S.row&&!U(S.row)||!F(S.y)||"quantitative"!==S.y.type)n.forEach(t=>{const n=W(e,h,"row"),r=W(e,h,"color",t),i=W(e,h,"stroke",t),o=W(e,h,"strokeWidth",t),a=W(e,h,"opacity");let s=W(e,h,"y",t);const u=W(e,h,"width",t,{tileUnitWidth:v}),f=W(e,h,"x-start",t,{markWidth:u}),c=s-w,l=Math.min(1,a),d=f,p=f+u,m=n+b-c-w,S=n+b-w;if(s=(S+m)/2,g);else{if(0!==o){const t=y(i,l);let e=E.map(t=>t.join()).indexOf(t.join());-1===e&&(E.push(t),e=E.length-1),_.push(d,m);const n=_.length/2-1;_.push(p,m);const r=_.length/2-1;_.push(d,S);const o=_.length/2-1;_.push(p,S);const a=_.length/2-1;x.push(n,r,o,o,a,r),k.push(e,e,e,e)}const t=y(r,l);let e=E.map(t=>t.join()).indexOf(t.join());-1===e&&(E.push(t),e=E.length-1),_.push(d+o,m+o);const n=_.length/2-1;_.push(p-o,m+o);const a=_.length/2-1;_.push(d+o,S-o);const s=_.length/2-1;_.push(p-o,S-o);const u=_.length/2-1;x.push(n,a,s,s,u,a),k.push(e,e,e,e)}});else{const t=Y(e);if(!t||!t.field)return void console.warn("Genomic field is not provided in the specification");const r=Object(i.a)(n,e=>e[t.field]);[...r.keys()].forEach(t=>{let n=0;r.get(t).forEach(t=>{const r=W(e,h,"color",t),i=W(e,h,"stroke",t),o=W(e,h,"strokeWidth",t),a=W(e,h,"opacity",t),s=W(e,h,"y",t),u=W(e,h,"width",t,{tileUnitWidth:v}),f=W(e,h,"x-start",t,{markWidth:u}),c=Math.min(1,a),l=f,d=f+u,p=b-s-n,m=b-n;if(g);else{if(0!==o){const t=y(i,c);let e=E.map(t=>t.join()).indexOf(t.join());-1===e&&(E.push(t),e=E.length-1),_.push(l,p);const n=_.length/2-1;_.push(d,p);const r=_.length/2-1;_.push(l,m);const o=_.length/2-1;_.push(d,m);const a=_.length/2-1;x.push(n,r,o,o,a,r),k.push(e,e,e,e)}const t=y(r,c);let e=E.map(t=>t.join()).indexOf(t.join());-1===e&&(E.push(t),e=E.length-1),_.push(l+o,p+o);const n=_.length/2-1;_.push(d-o,p+o);const a=_.length/2-1;_.push(l+o,m-o);const s=_.length/2-1;_.push(d-o,m-o);const u=_.length/2-1;x.push(n,a,s,s,u,a),k.push(e,e,e,e)}n+=s})})}var S;const A=t.from(JSON.stringify({positions:_,ixs:x,colorIdx:k,colorRGBAs:E})).buffer;return Object(d.Transfer)(A,[A])},V={init:(t,e,n,r)=>{r="https://aveit.s3.amazonaws.com/higlass/data/sequence/hg38.mod.chrom.sizes",M[e]||(M[e]=new p.BamFile({bamUrl:e,baiUrl:n}),R[e]=M[e].getHeader()),j[r]=j[r]||new Promise(t=>{O(r,t)}),N[t]={bamUrl:e,chromSizesUrl:r}},tilesetInfo:C,fetchTilesDebounced:async(t,e)=>{const n={},r=[],i=[];for(const n of e){const e=n.split("."),o=parseInt(e[0],10),a=parseInt(e[1],10);Number.isNaN(a)||Number.isNaN(o)?console.warn("Invalid tile zoom or position:",o,a):(r.push(n),i.push(B(t,o,a)))}return Promise.all(i).then(t=>(t.forEach((t,e)=>{const i=r[e];n[i]=t,n[i].tilePositionId=i}),n))},tile:B,getTabularData:(e,n)=>{const r={};for(const t of n){const n=P.get(`${e}.${t}`);if(n.error)throw new Error(n.error);for(const t of n)r[t.id]={...t,substitutions:JSON.stringify(t.substitutions)}}const i=Object.values(r),o=t.from(JSON.stringify(i)).buffer;return Object(d.Transfer)(o,[o])},visualProperties:(e,n,r,i,o,a,s,f,c)=>{let l;return b.a.recordTime("visualProperties"),"rect"===e.mark?l=((e,n,r,i,o,a,s,f,c)=>{const l="circular"===e.layout;e.x&&(e.x.domain=a,e.x.range=s),e.xe&&(e.xe.domain=a,e.xe.range=s);const h=Z(e),p=Object(u.a)().domain(a).range(s),g=p(f+c/o)-p(f),v=i/(G(e,"row")||["___SINGLE_ROW___"]).length/(G(e,"y")||["___SINGLE_Y_POSITION___"]).length,b=[],m=[],w=[],_=[];n.forEach(t=>{const n=W(e,h,"row",t),r=e.row.padding||0,i=W(e,h,"x",t),o=W(e,h,"color",t),a=W(e,h,"stroke",t),s=W(e,h,"strokeWidth",t),u=W(e,h,"opacity",t),f=W(e,h,"width",t,{markWidth:g}),c=W(e,h,"height",t,{markHeight:v}),d=W(e,h,"y",t)-c/2,p=Math.min(1,u),x=i,k=i+f,E=n+d+r,S=E+c-r;if(l);else{if(0!==s){const t=y(a,p);let e=_.map(t=>t.join()).indexOf(t.join());-1===e&&(_.push(t),e=_.length-1),b.push(x,E);const n=b.length/2-1;b.push(k,E);const r=b.length/2-1;b.push(x,S);const i=b.length/2-1;b.push(k,S);const o=b.length/2-1;m.push(n,r,i,i,o,r),w.push(e,e,e,e)}const t=y(o,p);let e=_.map(t=>t.join()).indexOf(t.join());-1===e&&(_.push(t),e=_.length-1),b.push(x+s,E+s);const n=b.length/2-1;b.push(k-s,E+s);const r=b.length/2-1;b.push(x+s,S-s);const i=b.length/2-1;b.push(k-s,S-s);const u=b.length/2-1;m.push(n,r,i,i,u,r),w.push(e,e,e,e)}});const x=t.from(JSON.stringify({positions:b,ixs:m,colorIdx:w,colorRGBAs:_})).buffer;return Object(d.Transfer)(x,[x])})(e,n,0,i,o,a,s,f,c):"bar"===e.mark&&(l=$(e,n,r,i,o,a,s,f,c)),b.a.printTime("visualProperties"),l}};Object(d.expose)(V)}.call(this,n(9).Buffer)},function(t,e,n){"use strict";e.byteLength=function(t){var e=f(t),n=e[0],r=e[1];return 3*(n+r)/4-r},e.toByteArray=function(t){var e,n,r=f(t),a=r[0],s=r[1],u=new o(function(t,e,n){return 3*(e+n)/4-n}(0,a,s)),c=0,l=s>0?a-4:a;for(n=0;n<l;n+=4)e=i[t.charCodeAt(n)]<<18|i[t.charCodeAt(n+1)]<<12|i[t.charCodeAt(n+2)]<<6|i[t.charCodeAt(n+3)],u[c++]=e>>16&255,u[c++]=e>>8&255,u[c++]=255&e;2===s&&(e=i[t.charCodeAt(n)]<<2|i[t.charCodeAt(n+1)]>>4,u[c++]=255&e);1===s&&(e=i[t.charCodeAt(n)]<<10|i[t.charCodeAt(n+1)]<<4|i[t.charCodeAt(n+2)]>>2,u[c++]=e>>8&255,u[c++]=255&e);return u},e.fromByteArray=function(t){for(var e,n=t.length,i=n%3,o=[],a=0,s=n-i;a<s;a+=16383)o.push(c(t,a,a+16383>s?s:a+16383));1===i?(e=t[n-1],o.push(r[e>>2]+r[e<<4&63]+"==")):2===i&&(e=(t[n-2]<<8)+t[n-1],o.push(r[e>>10]+r[e>>4&63]+r[e<<2&63]+"="));return o.join("")};for(var r=[],i=[],o="undefined"!=typeof Uint8Array?Uint8Array:Array,a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",s=0,u=a.length;s<u;++s)r[s]=a[s],i[a.charCodeAt(s)]=s;function f(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=t.indexOf("=");return-1===n&&(n=e),[n,n===e?0:4-n%4]}function c(t,e,n){for(var i,o,a=[],s=e;s<n;s+=3)i=(t[s]<<16&16711680)+(t[s+1]<<8&65280)+(255&t[s+2]),a.push(r[(o=i)>>18&63]+r[o>>12&63]+r[o>>6&63]+r[63&o]);return a.join("")}i["-".charCodeAt(0)]=62,i["_".charCodeAt(0)]=63},function(t,e){e.read=function(t,e,n,r,i){var o,a,s=8*i-r-1,u=(1<<s)-1,f=u>>1,c=-7,l=n?i-1:0,h=n?-1:1,d=t[e+l];for(l+=h,o=d&(1<<-c)-1,d>>=-c,c+=s;c>0;o=256*o+t[e+l],l+=h,c-=8);for(a=o&(1<<-c)-1,o>>=-c,c+=r;c>0;a=256*a+t[e+l],l+=h,c-=8);if(0===o)o=1-f;else{if(o===u)return a?NaN:1/0*(d?-1:1);a+=Math.pow(2,r),o-=f}return(d?-1:1)*a*Math.pow(2,o-r)},e.write=function(t,e,n,r,i,o){var a,s,u,f=8*o-i-1,c=(1<<f)-1,l=c>>1,h=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,d=r?0:o-1,p=r?1:-1,g=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(s=isNaN(e)?1:0,a=c):(a=Math.floor(Math.log(e)/Math.LN2),e*(u=Math.pow(2,-a))<1&&(a--,u*=2),(e+=a+l>=1?h/u:h*Math.pow(2,1-l))*u>=2&&(a++,u/=2),a+l>=c?(s=0,a=c):a+l>=1?(s=(e*u-1)*Math.pow(2,i),a+=l):(s=e*Math.pow(2,l-1)*Math.pow(2,i),a=0));i>=8;t[n+d]=255&s,d+=p,s/=256,i-=8);for(a=a<<i|s,f+=i;f>0;t[n+d]=255&a,d+=p,a/=256,f-=8);t[n+d-p]|=128*g}},function(t,e,n){"use strict";(function(t){var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))((function(i,o){function a(t){try{u(r.next(t))}catch(t){o(t)}}function s(t){try{u(r.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,s)}u((r=r.apply(t,e||[])).next())}))},i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.expose=e.isWorkerRuntime=e.Transfer=e.registerSerializer=void 0;const o=i(n(238)),a=n(138),s=n(139),u=n(241),f=i(n(242));var c=n(138);Object.defineProperty(e,"registerSerializer",{enumerable:!0,get:function(){return c.registerSerializer}});var l=n(139);Object.defineProperty(e,"Transfer",{enumerable:!0,get:function(){return l.Transfer}}),e.isWorkerRuntime=f.default.isWorkerRuntime;let h=!1;const d=new Map,p=t=>t&&t.type===u.MasterMessageType.run,g=t=>o.default(t)||function(t){return t&&"object"==typeof t&&"function"==typeof t.subscribe}(t);function v(t){return s.isTransferDescriptor(t)?{payload:t.send,transferables:t.transferables}:{payload:t,transferables:void 0}}function b(t,e){const{payload:n,transferables:r}=v(e),i={type:u.WorkerMessageType.error,uid:t,error:a.serialize(n)};f.default.postMessageToMaster(i,r)}function y(t,e,n){const{payload:r,transferables:i}=v(n),o={type:u.WorkerMessageType.result,uid:t,complete:!!e||void 0,payload:r};f.default.postMessageToMaster(o,i)}function m(t){try{const e={type:u.WorkerMessageType.uncaughtError,error:a.serialize(t)};f.default.postMessageToMaster(e)}catch(e){console.error("Not reporting uncaught error back to master thread as it occured while reporting an uncaught error already.\nLatest error:",e,"\nOriginal error:",t)}}function w(t,e,n){return r(this,void 0,void 0,(function*(){let r;try{r=e(...n)}catch(e){return b(t,e)}const i=g(r)?"observable":"promise";if(function(t,e){const n={type:u.WorkerMessageType.running,uid:t,resultType:e};f.default.postMessageToMaster(n)}(t,i),g(r)){const e=r.subscribe(e=>y(t,!1,a.serialize(e)),e=>{b(t,a.serialize(e)),d.delete(t)},()=>{y(t,!0),d.delete(t)});d.set(t,e)}else try{const e=yield r;y(t,!0,a.serialize(e))}catch(e){b(t,a.serialize(e))}}))}e.expose=function(t){if(!f.default.isWorkerRuntime())throw Error("expose() called in the master thread.");if(h)throw Error("expose() called more than once. This is not possible. Pass an object to expose() if you want to expose multiple functions.");if(h=!0,"function"==typeof t)f.default.subscribeToMasterMessages(e=>{p(e)&&!e.method&&w(e.uid,t,e.args.map(a.deserialize))}),function(){const t={type:u.WorkerMessageType.init,exposed:{type:"function"}};f.default.postMessageToMaster(t)}();else{if("object"!=typeof t||!t)throw Error("Invalid argument passed to expose(). Expected a function or an object, got: "+t);f.default.subscribeToMasterMessages(e=>{p(e)&&e.method&&w(e.uid,t[e.method],e.args.map(a.deserialize))});!function(t){const e={type:u.WorkerMessageType.init,exposed:{type:"module",methods:t}};f.default.postMessageToMaster(e)}(Object.keys(t).filter(e=>"function"==typeof t[e]))}f.default.subscribeToMasterMessages(t=>{if((e=t)&&e.type===u.MasterMessageType.cancel){const e=t.uid,n=d.get(e);n&&(n.unsubscribe(),d.delete(e))}var e})},"undefined"!=typeof self&&"function"==typeof self.addEventListener&&f.default.isWorkerRuntime()&&(self.addEventListener("error",t=>{setTimeout(()=>m(t.error||t),250)}),self.addEventListener("unhandledrejection",t=>{const e=t.reason;e&&"string"==typeof e.message&&setTimeout(()=>m(e),250)})),void 0!==t&&"function"==typeof t.on&&f.default.isWorkerRuntime()&&(t.on("uncaughtException",t=>{setTimeout(()=>m(t),250)}),t.on("unhandledRejection",t=>{t&&"string"==typeof t.message&&setTimeout(()=>m(t),250)}))}).call(this,n(22))},function(t,e,n){"use strict";t.exports=t=>!!t&&("symbol"==typeof Symbol.observable&&"function"==typeof t[Symbol.observable]?t===t[Symbol.observable]():"function"==typeof t["@@observable"]&&t===t["@@observable"]())},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.DefaultSerializer=e.extendSerializer=void 0,e.extendSerializer=function(t,e){const n=t.deserialize.bind(t),r=t.serialize.bind(t);return{deserialize:t=>e.deserialize(t,n),serialize:t=>e.serialize(t,r)}};const r={deserialize:t=>Object.assign(Error(t.message),{name:t.name,stack:t.stack}),serialize:t=>({__error_marker:"$$error",message:t.message,name:t.name,stack:t.stack})};e.DefaultSerializer={deserialize(t){return(e=t)&&"object"==typeof e&&"__error_marker"in e&&"$$error"===e.__error_marker?r.deserialize(t):t;var e},serialize:t=>t instanceof Error?r.serialize(t):t}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.$worker=e.$transferable=e.$terminate=e.$events=e.$errors=void 0,e.$errors=Symbol("thread.errors"),e.$events=Symbol("thread.events"),e.$terminate=Symbol("thread.terminate"),e.$transferable=Symbol("thread.transferable"),e.$worker=Symbol("thread.worker")},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.WorkerMessageType=e.MasterMessageType=void 0,function(t){t.cancel="cancel",t.run="run"}(e.MasterMessageType||(e.MasterMessageType={})),function(t){t.error="error",t.init="init",t.result="result",t.running="running",t.uncaughtError="uncaughtError"}(e.WorkerMessageType||(e.WorkerMessageType={}))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default={isWorkerRuntime:function(){const t="undefined"!=typeof self&&"undefined"!=typeof Window&&self instanceof Window;return!("undefined"==typeof self||!self.postMessage||t)},postMessageToMaster:function(t,e){self.postMessage(t,e)},subscribeToMasterMessages:function(t){const e=e=>{t(e.data)};return self.addEventListener("message",e),()=>{self.removeEventListener("message",e)}}}},function(t,e,n){var r=n(140);t.exports=r},function(t,e,n){var r=n(0),i=n(10);r({target:"Object",stat:!0,forced:!i,sham:!i},{defineProperty:n(17).f})},function(t,e,n){n(43),n(58);var r=n(254);t.exports=r},function(t,e,n){"use strict";var r=n(23),i=n(247),o=n(44),a=n(27),s=n(148),u=a.set,f=a.getterFor("Array Iterator");t.exports=s(Array,"Array",(function(t,e){u(this,{type:"Array Iterator",target:r(t),index:0,kind:e})}),(function(){var t=f(this),e=t.target,n=t.kind,r=t.index++;return!e||r>=e.length?(t.target=void 0,{value:void 0,done:!0}):"keys"==n?{value:r,done:!1}:"values"==n?{value:e[r],done:!1}:{value:[r,e[r]],done:!1}}),"values"),o.Arguments=o.Array,i("keys"),i("values"),i("entries")},function(t,e){t.exports=function(){}},function(t,e,n){var r=n(2),i=n(16);t.exports=function(t,e){try{i(r,t,e)}catch(n){r[t]=e}return e}},function(t,e,n){"use strict";var r=n(149).IteratorPrototype,i=n(56),o=n(41),a=n(35),s=n(44),u=function(){return this};t.exports=function(t,e,n){var f=e+" Iterator";return t.prototype=i(r,{next:o(1,n)}),a(t,f,!1,!0),s[f]=u,t}},function(t,e,n){"use strict";var r=n(95),i=n(75);t.exports=r?{}.toString:function(){return"[object "+i(this)+"]"}},function(t,e,n){var r=n(7);t.exports=function(t){if(!r(t)&&null!==t)throw TypeError("Can't set "+String(t)+" as a prototype");return t}},function(t,e){t.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},function(t,e,n){var r=n(93),i=n(54),o=function(t){return function(e,n){var o,a,s=String(i(e)),u=r(n),f=s.length;return u<0||u>=f?t?"":void 0:(o=s.charCodeAt(u))<55296||o>56319||u+1===f||(a=s.charCodeAt(u+1))<56320||a>57343?t?s.charAt(u):o:t?s.slice(u,u+2):a-56320+(o-55296<<10)+65536}};t.exports={codeAt:o(!1),charAt:o(!0)}},function(t,e,n){var r=n(11),i=n(76);t.exports=function(t){var e=i(t);if("function"!=typeof e)throw TypeError(String(t)+" is not iterable");return r(e.call(t))}},function(t,e,n){var r=n(158);t.exports=r},function(t,e,n){n(0)({target:"Array",stat:!0},{isArray:n(59)})},function(t,e,n){n(43),n(58);var r=n(76);t.exports=r},function(t,e,n){var r=n(160);t.exports=r},function(t,e,n){var r=n(23),i=n(100).f,o={}.toString,a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return a&&"[object Window]"==o.call(t)?function(t){try{return i(t)}catch(t){return a.slice()}}(t):i(r(t))}},function(t,e){},function(t,e,n){n(5)("hasInstance")},function(t,e,n){n(5)("isConcatSpreadable")},function(t,e,n){n(5)("match")},function(t,e,n){n(5)("matchAll")},function(t,e,n){n(5)("replace")},function(t,e,n){n(5)("search")},function(t,e,n){n(5)("species")},function(t,e,n){n(5)("split")},function(t,e,n){n(5)("toPrimitive")},function(t,e,n){n(5)("toStringTag")},function(t,e,n){n(5)("unscopables")},function(t,e,n){n(35)(Math,"Math",!0)},function(t,e,n){var r=n(2);n(35)(r.JSON,"JSON",!0)},function(t,e,n){var r=n(167);t.exports=r},function(t,e,n){var r=n(0),i=n(276);r({target:"Array",stat:!0,forced:!n(170)((function(t){Array.from(t)}))},{from:i})},function(t,e,n){"use strict";var r=n(42),i=n(18),o=n(168),a=n(169),s=n(28),u=n(77),f=n(76);t.exports=function(t){var e,n,c,l,h,d,p=i(t),g="function"==typeof this?this:Array,v=arguments.length,b=v>1?arguments[1]:void 0,y=void 0!==b,m=f(p),w=0;if(y&&(b=r(b,v>2?arguments[2]:void 0,2)),null==m||g==Array&&a(m))for(n=new g(e=s(p.length));e>w;w++)d=y?b(p[w],w):p[w],u(n,w,d);else for(h=(l=m.call(p)).next,n=new g;!(c=h.call(l)).done;w++)d=y?o(l,b,[c.value,w],!0):c.value,u(n,w,d);return n.length=w,n}},function(t,e,n){var r=n(278);t.exports=r},function(t,e,n){n(279);var r=n(1).Object,i=t.exports=function(t,e){return r.defineProperties(t,e)};r.defineProperties.sham&&(i.sham=!0)},function(t,e,n){var r=n(0),i=n(10);r({target:"Object",stat:!0,forced:!i,sham:!i},{defineProperties:n(152)})},function(t,e,n){var r=n(281);t.exports=r},function(t,e,n){n(282);var r=n(1);t.exports=r.Object.getOwnPropertyDescriptors},function(t,e,n){var r=n(0),i=n(10),o=n(283),a=n(23),s=n(40),u=n(77);r({target:"Object",stat:!0,sham:!i},{getOwnPropertyDescriptors:function(t){for(var e,n,r=a(t),i=s.f,f=o(r),c={},l=0;f.length>l;)void 0!==(n=i(r,e=f[l++]))&&u(c,e,n);return c}})},function(t,e,n){var r=n(25),i=n(100),o=n(101),a=n(11);t.exports=r("Reflect","ownKeys")||function(t){var e=i.f(a(t)),n=o.f;return n?e.concat(n(t)):e}},function(t,e,n){n(43);var r=n(285),i=n(75),o=Array.prototype,a={DOMTokenList:!0,NodeList:!0};t.exports=function(t){var e=t.forEach;return t===o||t instanceof Array&&e===o.forEach||a.hasOwnProperty(i(t))?r:e}},function(t,e,n){var r=n(286);t.exports=r},function(t,e,n){n(287);var r=n(19);t.exports=r("Array").forEach},function(t,e,n){"use strict";var r=n(0),i=n(288);r({target:"Array",proto:!0,forced:[].forEach!=i},{forEach:i})},function(t,e,n){"use strict";var r=n(45).forEach,i=n(80),o=n(46),a=i("forEach"),s=o("forEach");t.exports=a&&s?[].forEach:function(t){return r(this,t,arguments.length>1?arguments[1]:void 0)}},function(t,e,n){var r=n(171);t.exports=r},function(t,e,n){var r=n(0),i=n(3),o=n(23),a=n(40).f,s=n(10),u=i((function(){a(1)}));r({target:"Object",stat:!0,forced:!s||u,sham:!s},{getOwnPropertyDescriptor:function(t,e){return a(o(t),e)}})},function(t,e,n){var r=n(292);t.exports=r},function(t,e,n){var r=n(293),i=Array.prototype;t.exports=function(t){var e=t.filter;return t===i||t instanceof Array&&e===i.filter?r:e}},function(t,e,n){n(294);var r=n(19);t.exports=r("Array").filter},function(t,e,n){"use strict";var r=n(0),i=n(45).filter,o=n(78),a=n(46),s=o("filter"),u=a("filter");r({target:"Array",proto:!0,forced:!s||!u},{filter:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}})},function(t,e,n){var r=n(172);t.exports=r},function(t,e,n){var r=n(173);t.exports=r},function(t,e,n){var r=n(0),i=n(18),o=n(74);r({target:"Object",stat:!0,forced:n(3)((function(){o(1)}))},{keys:function(t){return o(i(t))}})},function(t,e,n){var r=n(299);t.exports=r},function(t,e,n){n(300);var r=n(1);t.exports=r.Reflect.construct},function(t,e,n){var r=n(0),i=n(25),o=n(14),a=n(11),s=n(7),u=n(56),f=n(174),c=n(3),l=i("Reflect","construct"),h=c((function(){function t(){}return!(l((function(){}),[],t)instanceof t)})),d=!c((function(){l((function(){}))})),p=h||d;r({target:"Reflect",stat:!0,forced:p,sham:p},{construct:function(t,e){o(t),a(e);var n=arguments.length<3?t:o(arguments[2]);if(d&&!h)return l(t,e,n);if(t==n){switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3])}var r=[null];return r.push.apply(r,e),new(f.apply(t,r))}var i=n.prototype,c=u(s(i)?i:Object.prototype),p=Function.apply.call(t,c,e);return s(p)?p:c}})},function(t,e,n){t.exports=n(302)},function(t,e,n){var r=n(158);t.exports=r},function(t,e,n){var r=n(47),i=n(60);t.exports=function(t,e){var n=t&&(void 0!==r&&i(t)||t["@@iterator"]);if(null!=n){var o,a,s=[],u=!0,f=!1;try{for(n=n.call(t);!(u=(o=n.next()).done)&&(s.push(o.value),!e||s.length!==e);u=!0);}catch(t){f=!0,a=t}finally{try{u||null==n.return||n.return()}finally{if(f)throw a}}return s}},t.exports.default=t.exports,t.exports.__esModule=!0},function(t,e,n){var r=n(160);n(305),n(306),n(307),n(308),n(309),t.exports=r},function(t,e,n){n(5)("asyncDispose")},function(t,e,n){n(5)("dispose")},function(t,e,n){n(5)("observable")},function(t,e,n){n(5)("patternMatch")},function(t,e,n){n(5)("replaceAll")},function(t,e,n){t.exports=n(311)},function(t,e,n){var r=n(177);t.exports=r},function(t,e,n){n(313);var r=n(19);t.exports=r("Array").slice},function(t,e,n){"use strict";var r=n(0),i=n(7),o=n(59),a=n(155),s=n(28),u=n(23),f=n(77),c=n(4),l=n(78),h=n(46),d=l("slice"),p=h("slice",{ACCESSORS:!0,0:0,1:2}),g=c("species"),v=[].slice,b=Math.max;r({target:"Array",proto:!0,forced:!d||!p},{slice:function(t,e){var n,r,c,l=u(this),h=s(l.length),d=a(t,h),p=a(void 0===e?h:e,h);if(o(l)&&("function"!=typeof(n=l.constructor)||n!==Array&&!o(n.prototype)?i(n)&&null===(n=n[g])&&(n=void 0):n=void 0,n===Array||void 0===n))return v.call(l,d,p);for(r=new(void 0===n?Array:n)(b(p-d,0)),c=0;d<p;d++,c++)d in l&&f(r,c,l[d]);return r.length=c,r}})},function(t,e,n){var r=n(167);t.exports=r},function(t,e){t.exports=function(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r},t.exports.default=t.exports,t.exports.__esModule=!0},function(t,e,n){var r=n(140);t.exports=r},function(t,e,n){var r=n(318);t.exports=r},function(t,e,n){var r=n(319),i=Array.prototype;t.exports=function(t){var e=t.map;return t===i||t instanceof Array&&e===i.map?r:e}},function(t,e,n){n(320);var r=n(19);t.exports=r("Array").map},function(t,e,n){"use strict";var r=n(0),i=n(45).map,o=n(78),a=n(46),s=o("map"),u=a("map");r({target:"Array",proto:!0,forced:!s||!u},{map:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}})},function(t,e,n){var r=n(180);n(327),n(328),n(329),n(330),t.exports=r},function(t,e,n){"use strict";var r,i,o,a,s=n(0),u=n(24),f=n(2),c=n(25),l=n(181),h=n(57),d=n(110),p=n(35),g=n(323),v=n(7),b=n(14),y=n(111),m=n(34),w=n(146),_=n(37),x=n(170),k=n(182),E=n(183).set,S=n(324),A=n(185),O=n(325),T=n(63),M=n(83),R=n(27),j=n(142),L=n(4),P=n(97),I=L("species"),N="Promise",C=R.get,B=R.set,z=R.getterFor(N),F=l,U=f.TypeError,D=f.document,Z=f.process,q=c("fetch"),W=T.f,H=W,G="process"==m(Z),Y=!!(D&&D.createEvent&&f.dispatchEvent),$=j(N,(function(){if(!(w(F)!==String(F))){if(66===P)return!0;if(!G&&"function"!=typeof PromiseRejectionEvent)return!0}if(u&&!F.prototype.finally)return!0;if(P>=51&&/native code/.test(F))return!1;var t=F.resolve(1),e=function(t){t((function(){}),(function(){}))};return(t.constructor={})[I]=e,!(t.then((function(){}))instanceof e)})),V=$||!x((function(t){F.all(t).catch((function(){}))})),K=function(t){var e;return!(!v(t)||"function"!=typeof(e=t.then))&&e},X=function(t,e,n){if(!e.notified){e.notified=!0;var r=e.reactions;S((function(){for(var i=e.value,o=1==e.state,a=0;r.length>a;){var s,u,f,c=r[a++],l=o?c.ok:c.fail,h=c.resolve,d=c.reject,p=c.domain;try{l?(o||(2===e.rejection&&et(t,e),e.rejection=1),!0===l?s=i:(p&&p.enter(),s=l(i),p&&(p.exit(),f=!0)),s===c.promise?d(U("Promise-chain cycle")):(u=K(s))?u.call(s,h,d):h(s)):d(i)}catch(t){p&&!f&&p.exit(),d(t)}}e.reactions=[],e.notified=!1,n&&!e.rejection&&Q(t,e)}))}},J=function(t,e,n){var r,i;Y?((r=D.createEvent("Event")).promise=e,r.reason=n,r.initEvent(t,!1,!0),f.dispatchEvent(r)):r={promise:e,reason:n},(i=f["on"+t])?i(r):"unhandledrejection"===t&&O("Unhandled promise rejection",n)},Q=function(t,e){E.call(f,(function(){var n,r=e.value;if(tt(e)&&(n=M((function(){G?Z.emit("unhandledRejection",r,t):J("unhandledrejection",t,r)})),e.rejection=G||tt(e)?2:1,n.error))throw n.value}))},tt=function(t){return 1!==t.rejection&&!t.parent},et=function(t,e){E.call(f,(function(){G?Z.emit("rejectionHandled",t):J("rejectionhandled",t,e.value)}))},nt=function(t,e,n,r){return function(i){t(e,n,i,r)}},rt=function(t,e,n,r){e.done||(e.done=!0,r&&(e=r),e.value=n,e.state=2,X(t,e,!0))},it=function(t,e,n,r){if(!e.done){e.done=!0,r&&(e=r);try{if(t===n)throw U("Promise can't be resolved itself");var i=K(n);i?S((function(){var r={done:!1};try{i.call(n,nt(it,t,r,e),nt(rt,t,r,e))}catch(n){rt(t,r,n,e)}})):(e.value=n,e.state=1,X(t,e,!1))}catch(n){rt(t,{done:!1},n,e)}}};$&&(F=function(t){y(this,F,N),b(t),r.call(this);var e=C(this);try{t(nt(it,this,e),nt(rt,this,e))}catch(t){rt(this,e,t)}},(r=function(t){B(this,{type:N,done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:0,value:void 0})}).prototype=d(F.prototype,{then:function(t,e){var n=z(this),r=W(k(this,F));return r.ok="function"!=typeof t||t,r.fail="function"==typeof e&&e,r.domain=G?Z.domain:void 0,n.parent=!0,n.reactions.push(r),0!=n.state&&X(this,n,!1),r.promise},catch:function(t){return this.then(void 0,t)}}),i=function(){var t=new r,e=C(t);this.promise=t,this.resolve=nt(it,t,e),this.reject=nt(rt,t,e)},T.f=W=function(t){return t===F||t===o?new i(t):H(t)},u||"function"!=typeof l||(a=l.prototype.then,h(l.prototype,"then",(function(t,e){var n=this;return new F((function(t,e){a.call(n,t,e)})).then(t,e)}),{unsafe:!0}),"function"==typeof q&&s({global:!0,enumerable:!0,forced:!0},{fetch:function(t){return A(F,q.apply(f,arguments))}}))),s({global:!0,wrap:!0,forced:$},{Promise:F}),p(F,N,!1,!0),g(N),o=c(N),s({target:N,stat:!0,forced:$},{reject:function(t){var e=W(this);return e.reject.call(void 0,t),e.promise}}),s({target:N,stat:!0,forced:u||$},{resolve:function(t){return A(u&&this===o?F:this,t)}}),s({target:N,stat:!0,forced:V},{all:function(t){var e=this,n=W(e),r=n.resolve,i=n.reject,o=M((function(){var n=b(e.resolve),o=[],a=0,s=1;_(t,(function(t){var u=a++,f=!1;o.push(void 0),s++,n.call(e,t).then((function(t){f||(f=!0,o[u]=t,--s||r(o))}),i)})),--s||r(o)}));return o.error&&i(o.value),n.promise},race:function(t){var e=this,n=W(e),r=n.reject,i=M((function(){var i=b(e.resolve);_(t,(function(t){i.call(e,t).then(n.resolve,r)}))}));return i.error&&r(i.value),n.promise}})},function(t,e,n){"use strict";var r=n(25),i=n(17),o=n(4),a=n(10),s=o("species");t.exports=function(t){var e=r(t),n=i.f;a&&e&&!e[s]&&n(e,s,{configurable:!0,get:function(){return this}})}},function(t,e,n){var r,i,o,a,s,u,f,c,l=n(2),h=n(40).f,d=n(34),p=n(183).set,g=n(184),v=l.MutationObserver||l.WebKitMutationObserver,b=l.process,y=l.Promise,m="process"==d(b),w=h(l,"queueMicrotask"),_=w&&w.value;_||(r=function(){var t,e;for(m&&(t=b.domain)&&t.exit();i;){e=i.fn,i=i.next;try{e()}catch(t){throw i?a():o=void 0,t}}o=void 0,t&&t.enter()},m?a=function(){b.nextTick(r)}:v&&!g?(s=!0,u=document.createTextNode(""),new v(r).observe(u,{characterData:!0}),a=function(){u.data=s=!s}):y&&y.resolve?(f=y.resolve(void 0),c=f.then,a=function(){c.call(f,r)}):a=function(){p.call(l,r)}),t.exports=_||function(t){var e={fn:t,next:void 0};o&&(o.next=e),i||(i=e,a()),o=e}},function(t,e,n){var r=n(2);t.exports=function(t,e){var n=r.console;n&&n.error&&(1===arguments.length?n.error(t):n.error(t,e))}},function(t,e,n){"use strict";var r=n(0),i=n(24),o=n(181),a=n(3),s=n(25),u=n(182),f=n(185),c=n(57);r({target:"Promise",proto:!0,real:!0,forced:!!o&&a((function(){o.prototype.finally.call({then:function(){}},(function(){}))}))},{finally:function(t){var e=u(this,s("Promise")),n="function"==typeof t;return this.then(n?function(n){return f(e,t()).then((function(){return n}))}:t,n?function(n){return f(e,t()).then((function(){throw n}))}:t)}}),i||"function"!=typeof o||o.prototype.finally||c(o.prototype,"finally",s("Promise").prototype.finally)},function(t,e,n){"use strict";var r=n(0),i=n(10),o=n(73),a=n(96),s=n(56),u=n(17),f=n(41),c=n(37),l=n(16),h=n(27),d=h.set,p=h.getterFor("AggregateError"),g=function(t,e){var n=this;if(!(n instanceof g))return new g(t,e);a&&(n=a(new Error(e),o(n)));var r=[];return c(t,r.push,r),i?d(n,{errors:r,type:"AggregateError"}):n.errors=r,void 0!==e&&l(n,"message",String(e)),n};g.prototype=s(Error.prototype,{constructor:f(5,g),message:f(5,""),name:f(5,"AggregateError")}),i&&u.f(g.prototype,"errors",{get:function(){return p(this).errors},configurable:!0}),r({global:!0},{AggregateError:g})},function(t,e,n){n(186)},function(t,e,n){"use strict";var r=n(0),i=n(63),o=n(83);r({target:"Promise",stat:!0},{try:function(t){var e=i.f(this),n=o(t);return(n.error?e.reject:e.resolve)(n.value),e.promise}})},function(t,e,n){"use strict";var r=n(0),i=n(14),o=n(25),a=n(63),s=n(83),u=n(37);r({target:"Promise",stat:!0},{any:function(t){var e=this,n=a.f(e),r=n.resolve,f=n.reject,c=s((function(){var n=i(e.resolve),a=[],s=0,c=1,l=!1;u(t,(function(t){var i=s++,u=!1;a.push(void 0),c++,n.call(e,t).then((function(t){u||l||(l=!0,r(t))}),(function(t){u||l||(u=!0,a[i]=t,--c||f(new(o("AggregateError"))(a,"No one promise resolved")))}))})),--c||f(new(o("AggregateError"))(a,"No one promise resolved"))}));return c.error&&f(c.value),n.promise}})},function(t,e,n){var r=n(177);t.exports=r},function(t,e,n){t.exports=n(333)},function(t,e,n){var r=n(334);t.exports=r},function(t,e,n){n(335);var r=n(1).Object;t.exports=function(t,e){return r.create(t,e)}},function(t,e,n){n(0)({target:"Object",stat:!0,sham:!n(10)},{create:n(56)})},function(t,e,n){var r=n(187);function i(e,n){return t.exports=i=r||function(t,e){return t.__proto__=e,t},t.exports.default=t.exports,t.exports.__esModule=!0,i(e,n)}t.exports=i,t.exports.default=t.exports,t.exports.__esModule=!0},function(t,e,n){var r=n(338);t.exports=r},function(t,e,n){n(339);var r=n(1);t.exports=r.Object.setPrototypeOf},function(t,e,n){n(0)({target:"Object",stat:!0},{setPrototypeOf:n(96)})},function(t,e,n){var r=n(341);t.exports=r},function(t,e,n){n(165),n(58),n(43);var r=n(79);t.exports=r.f("iterator")},function(t,e,n){t.exports=n(343)},function(t,e,n){var r=n(344);t.exports=r},function(t,e,n){n(345);var r=n(1);t.exports=r.Object.getPrototypeOf},function(t,e,n){var r=n(0),i=n(3),o=n(18),a=n(73),s=n(150);r({target:"Object",stat:!0,forced:i((function(){a(1)})),sham:!s},{getPrototypeOf:function(t){return a(o(t))}})},function(t,e,n){var r=n(347);t.exports=r},function(t,e,n){var r=n(348),i=Array.prototype;t.exports=function(t){var e=t.concat;return t===i||t instanceof Array&&e===i.concat?r:e}},function(t,e,n){n(161);var r=n(19);t.exports=r("Array").concat},function(t,e,n){"use strict";var r=n(32);Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var i=r(n(350)),o=r(n(51)),a=r(n(52)),s=r(n(118)),u=n(193),f=r(n(352)),c=r(n(353)),l=function(){function t(e){var n=e.fill,r=e.cache;if((0,o.default)(this,t),(0,s.default)(this,"cache",void 0),(0,s.default)(this,"fillCallback",void 0),"function"!=typeof n)throw new TypeError("must pass a fill function");if("object"!==(0,i.default)(r))throw new TypeError("must pass a cache object");if("function"!=typeof r.get||"function"!=typeof r.set||"function"!=typeof r.delete)throw new TypeError("cache must implement get(key), set(key, val), and and delete(key)");this.cache=r,this.fillCallback=n}return(0,a.default)(t,[{key:"evict",value:function(t,e){this.cache.get(t)===e&&this.cache.delete(t)}},{key:"fill",value:function(t,e,n,r){var i=this,o=new f.default,a=new c.default;a.addCallback(r);var s={aborter:o,promise:this.fillCallback(e,o.signal,(function(t){a.callback(t)})),settled:!1,statusReporter:a,get aborted(){return this.aborter.signal.aborted}};s.aborter.addSignal(n),s.aborter.signal.addEventListener("abort",(function(){s.settled||i.evict(t,s)})),s.promise.then((function(){s.settled=!0}),(function(e){s.settled=!0,i.evict(t,s)})).catch((function(t){throw console.error(t),t})),this.cache.set(t,s)}},{key:"has",value:function(t){return this.cache.has(t)}},{key:"get",value:function(e,n,r,i){if(!r&&n instanceof u.AbortSignal)throw new TypeError("second get argument appears to be an AbortSignal, perhaps you meant to pass `null` for the fill data?");var o=this.cache.get(e);return o?o.aborted&&!o.settled?(this.evict(e,o),this.get(e,n,r,i)):o.settled?o.promise:(o.aborter.addSignal(r),o.statusReporter.addCallback(i),t.checkSinglePromise(o.promise,r)):(this.fill(e,n,r,i),t.checkSinglePromise(this.cache.get(e).promise,r))}},{key:"delete",value:function(t){var e=this.cache.get(t);e&&(e.settled||e.aborter.abort(),this.cache.delete(t))}},{key:"clear",value:function(){for(var t=this.cache.keys(),e=0,n=t.next();!n.done;n=t.next())this.delete(n.value),e+=1;return e}}],[{key:"isAbortException",value:function(t){return"AbortError"===t.name||"ERR_ABORTED"===t.code||"AbortError: aborted"===t.message||"Error: aborted"===t.message}},{key:"checkSinglePromise",value:function(t,e){function n(){if(e&&e.aborted)throw Object.assign(new Error("aborted"),{code:"ERR_ABORTED"})}return t.then((function(t){return n(),t}),(function(t){throw n(),t}))}}]),t}();e.default=l},function(t,e){function n(e){return"function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?t.exports=n=function(t){return typeof t}:t.exports=n=function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n(e)}t.exports=n},function(t,e,n){"use strict";function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function o(t,e,n){return e&&i(t.prototype,e),n&&i(t,n),t}function a(t){return(a=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function s(t,e){return(s=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function u(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function f(t,e){return!e||"object"!=typeof e&&"function"!=typeof e?u(t):e}function c(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=a(t);if(e){var i=a(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return f(this,n)}}function l(t,e,n){return(l="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=a(t)););return t}(t,e);if(r){var i=Object.getOwnPropertyDescriptor(r,e);return i.get?i.get.call(n):i.value}})(t,e,n||t)}Object.defineProperty(e,"__esModule",{value:!0});var h=function(){function t(){r(this,t),Object.defineProperty(this,"listeners",{value:{},writable:!0,configurable:!0})}return o(t,[{key:"addEventListener",value:function(t,e,n){t in this.listeners||(this.listeners[t]=[]),this.listeners[t].push({callback:e,options:n})}},{key:"removeEventListener",value:function(t,e){if(t in this.listeners)for(var n=this.listeners[t],r=0,i=n.length;r<i;r++)if(n[r].callback===e)return void n.splice(r,1)}},{key:"dispatchEvent",value:function(t){if(t.type in this.listeners){for(var e=this.listeners[t.type].slice(),n=0,r=e.length;n<r;n++){var i=e[n];try{i.callback.call(this,t)}catch(t){Promise.resolve().then((function(){throw t}))}i.options&&i.options.once&&this.removeEventListener(t.type,i.callback)}return!t.defaultPrevented}}}]),t}(),d=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&s(t,e)}(n,t);var e=c(n);function n(){var t;return r(this,n),(t=e.call(this)).listeners||h.call(u(t)),Object.defineProperty(u(t),"aborted",{value:!1,writable:!0,configurable:!0}),Object.defineProperty(u(t),"onabort",{value:null,writable:!0,configurable:!0}),t}return o(n,[{key:"toString",value:function(){return"[object AbortSignal]"}},{key:"dispatchEvent",value:function(t){"abort"===t.type&&(this.aborted=!0,"function"==typeof this.onabort&&this.onabort.call(this,t)),l(a(n.prototype),"dispatchEvent",this).call(this,t)}}]),n}(h),p=function(){function t(){r(this,t),Object.defineProperty(this,"signal",{value:new d,writable:!0,configurable:!0})}return o(t,[{key:"abort",value:function(){var t;try{t=new Event("abort")}catch(e){"undefined"!=typeof document?document.createEvent?(t=document.createEvent("Event")).initEvent("abort",!1,!1):(t=document.createEventObject()).type="abort":t={type:"abort",bubbles:!1,cancelable:!1}}this.signal.dispatchEvent(t)}},{key:"toString",value:function(){return"[object AbortController]"}}]),t}();"undefined"!=typeof Symbol&&Symbol.toStringTag&&(p.prototype[Symbol.toStringTag]="AbortController",d.prototype[Symbol.toStringTag]="AbortSignal"),e.AbortController=p,e.AbortSignal=d,e.abortableFetch=function(t){"function"==typeof t&&(t={fetch:t});var e=t,n=e.fetch,r=e.Request,i=void 0===r?n.Request:r,o=e.AbortController,a=e.__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL,s=void 0!==a&&a;if(!function(t){return t.__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL?(console.log("__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL=true is set, will force install polyfill"),!0):"function"==typeof t.Request&&!t.Request.prototype.hasOwnProperty("signal")||!t.AbortController}({fetch:n,Request:i,AbortController:o,__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL:s}))return{fetch:n,Request:u};var u=i;(u&&!u.prototype.hasOwnProperty("signal")||s)&&((u=function(t,e){var n;e&&e.signal&&(n=e.signal,delete e.signal);var r=new i(t,e);return n&&Object.defineProperty(r,"signal",{writable:!1,enumerable:!1,configurable:!0,value:n}),r}).prototype=i.prototype);var f=n;return{fetch:function(t,e){var n=u&&u.prototype.isPrototypeOf(t)?t.signal:e?e.signal:void 0;if(n){var r;try{r=new DOMException("Aborted","AbortError")}catch(t){(r=new Error("Aborted")).name="AbortError"}if(n.aborted)return Promise.reject(r);var i=new Promise((function(t,e){n.addEventListener("abort",(function(){return e(r)}),{once:!0})}));return e&&e.signal&&delete e.signal,Promise.race([i,f(t,e)])}return f(t,e)},Request:u}}},function(t,e,n){"use strict";var r=n(32);Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var i=r(n(52)),o=r(n(118)),a=r(n(51)),s=n(193),u=function t(){(0,a.default)(this,t)},f=function(){function t(){(0,a.default)(this,t),(0,o.default)(this,"signals",new Set),(0,o.default)(this,"abortController",new s.AbortController)}return(0,i.default)(t,[{key:"addSignal",value:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:new u;if(this.signal.aborted)throw new Error("cannot add a signal, already aborted!");this.signals.add(e),e.aborted?this.handleAborted(e):"function"==typeof e.addEventListener&&e.addEventListener("abort",(function(){t.handleAborted(e)}))}},{key:"handleAborted",value:function(t){this.signals.delete(t),0===this.signals.size&&this.abortController.abort()}},{key:"abort",value:function(){this.abortController.abort()}},{key:"signal",get:function(){return this.abortController.signal}}]),t}();e.default=f},function(t,e,n){"use strict";var r=n(32);Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var i=r(n(51)),o=r(n(52)),a=r(n(118)),s=function(){function t(){(0,i.default)(this,t),(0,a.default)(this,"callbacks",new Set),(0,a.default)(this,"currentMessage",void 0)}return(0,o.default)(t,[{key:"addCallback",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(){};this.callbacks.add(t),t(this.currentMessage)}},{key:"callback",value:function(t){this.currentMessage=t,this.callbacks.forEach((function(e){e(t)}))}}]),t}();e.default=s},function(t,e,n){var r=n(355);t.exports=r},function(t,e,n){var r=n(356),i=Array.prototype;t.exports=function(t){var e=t.sort;return t===i||t instanceof Array&&e===i.sort?r:e}},function(t,e,n){n(357);var r=n(19);t.exports=r("Array").sort},function(t,e,n){"use strict";var r=n(0),i=n(14),o=n(18),a=n(3),s=n(80),u=[],f=u.sort,c=a((function(){u.sort(void 0)})),l=a((function(){u.sort(null)})),h=s("sort");r({target:"Array",proto:!0,forced:c||!l||!h},{sort:function(t){return void 0===t?f.call(o(this)):f.call(o(this),i(t))}})},function(t,e,n){t.exports=n(359)},function(t,e,n){var r=n(360);t.exports=r},function(t,e,n){n(361),t.exports=-9007199254740991},function(t,e,n){n(0)({target:"Number",stat:!0},{MIN_SAFE_INTEGER:-9007199254740991})},function(t,e,n){t.exports=n(363)},function(t,e,n){var r=n(364);t.exports=r},function(t,e,n){n(365),t.exports=9007199254740991},function(t,e,n){n(0)({target:"Number",stat:!0},{MAX_SAFE_INTEGER:9007199254740991})},function(t,e,n){t.exports=n(367)},function(t,e,n){n(368);var r=n(1);t.exports=r.setTimeout},function(t,e,n){var r=n(0),i=n(2),o=n(98),a=[].slice,s=function(t){return function(e,n){var r=arguments.length>2,i=r?a.call(arguments,2):void 0;return t(r?function(){("function"==typeof e?e:Function(e)).apply(this,i)}:e,n)}};r({global:!0,bind:!0,forced:/MSIE .\./.test(o)},{setTimeout:s(i.setTimeout),setInterval:s(i.setInterval)})},function(t,e,n){var r=n(180);t.exports=r},function(t,e,n){t.exports=n(371)},function(t,e,n){var r=n(372);n(377),n(379),n(381),n(383),t.exports=r},function(t,e,n){n(99),n(373),n(43);var r=n(1);t.exports=r.WeakMap},function(t,e,n){"use strict";var r,i=n(2),o=n(110),a=n(121),s=n(375),u=n(376),f=n(7),c=n(27).enforce,l=n(145),h=!i.ActiveXObject&&"ActiveXObject"in i,d=Object.isExtensible,p=function(t){return function(){return t(this,arguments.length?arguments[0]:void 0)}},g=t.exports=s("WeakMap",p,u);if(l&&h){r=u.getConstructor(p,"WeakMap",!0),a.REQUIRED=!0;var v=g.prototype,b=v.delete,y=v.has,m=v.get,w=v.set;o(v,{delete:function(t){if(f(t)&&!d(t)){var e=c(this);return e.frozen||(e.frozen=new r),b.call(this,t)||e.frozen.delete(t)}return b.call(this,t)},has:function(t){if(f(t)&&!d(t)){var e=c(this);return e.frozen||(e.frozen=new r),y.call(this,t)||e.frozen.has(t)}return y.call(this,t)},get:function(t){if(f(t)&&!d(t)){var e=c(this);return e.frozen||(e.frozen=new r),y.call(this,t)?m.call(this,t):e.frozen.get(t)}return m.call(this,t)},set:function(t,e){if(f(t)&&!d(t)){var n=c(this);n.frozen||(n.frozen=new r),y.call(this,t)?w.call(this,t,e):n.frozen.set(t,e)}else w.call(this,t,e);return this}})}},function(t,e,n){var r=n(3);t.exports=!r((function(){return Object.isExtensible(Object.preventExtensions({}))}))},function(t,e,n){"use strict";var r=n(0),i=n(2),o=n(121),a=n(3),s=n(16),u=n(37),f=n(111),c=n(7),l=n(35),h=n(17).f,d=n(45).forEach,p=n(10),g=n(27),v=g.set,b=g.getterFor;t.exports=function(t,e,n){var g,y=-1!==t.indexOf("Map"),m=-1!==t.indexOf("Weak"),w=y?"set":"add",_=i[t],x=_&&_.prototype,k={};if(p&&"function"==typeof _&&(m||x.forEach&&!a((function(){(new _).entries().next()})))){g=e((function(e,n){v(f(e,g,t),{type:t,collection:new _}),null!=n&&u(n,e[w],e,y)}));var E=b(t);d(["add","clear","delete","forEach","get","has","set","keys","values","entries"],(function(t){var e="add"==t||"set"==t;!(t in x)||m&&"clear"==t||s(g.prototype,t,(function(n,r){var i=E(this).collection;if(!e&&m&&!c(n))return"get"==t&&void 0;var o=i[t](0===n?0:n,r);return e?this:o}))})),m||h(g.prototype,"size",{configurable:!0,get:function(){return E(this).collection.size}})}else g=n.getConstructor(e,t,y,w),o.REQUIRED=!0;return l(g,t,!1,!0),k[t]=g,r({global:!0,forced:!0},k),m||n.setStrong(g,t,y),g}},function(t,e,n){"use strict";var r=n(110),i=n(121).getWeakData,o=n(11),a=n(7),s=n(111),u=n(37),f=n(45),c=n(13),l=n(27),h=l.set,d=l.getterFor,p=f.find,g=f.findIndex,v=0,b=function(t){return t.frozen||(t.frozen=new y)},y=function(){this.entries=[]},m=function(t,e){return p(t.entries,(function(t){return t[0]===e}))};y.prototype={get:function(t){var e=m(this,t);if(e)return e[1]},has:function(t){return!!m(this,t)},set:function(t,e){var n=m(this,t);n?n[1]=e:this.entries.push([t,e])},delete:function(t){var e=g(this.entries,(function(e){return e[0]===t}));return~e&&this.entries.splice(e,1),!!~e}},t.exports={getConstructor:function(t,e,n,f){var l=t((function(t,r){s(t,l,e),h(t,{type:e,id:v++,frozen:void 0}),null!=r&&u(r,t[f],t,n)})),p=d(e),g=function(t,e,n){var r=p(t),a=i(o(e),!0);return!0===a?b(r).set(e,n):a[r.id]=n,t};return r(l.prototype,{delete:function(t){var e=p(this);if(!a(t))return!1;var n=i(t);return!0===n?b(e).delete(t):n&&c(n,e.id)&&delete n[e.id]},has:function(t){var e=p(this);if(!a(t))return!1;var n=i(t);return!0===n?b(e).has(t):n&&c(n,e.id)}}),r(l.prototype,n?{get:function(t){var e=p(this);if(a(t)){var n=i(t);return!0===n?b(e).get(t):n?n[e.id]:void 0}},set:function(t,e){return g(this,t,e)}}:{add:function(t){return g(this,t,!0)}}),l}}},function(t,e,n){n(0)({target:"WeakMap",stat:!0},{from:n(378)})},function(t,e,n){"use strict";var r=n(14),i=n(42),o=n(37);t.exports=function(t){var e,n,a,s,u=arguments.length,f=u>1?arguments[1]:void 0;return r(this),(e=void 0!==f)&&r(f),null==t?new this:(n=[],e?(a=0,s=i(f,u>2?arguments[2]:void 0,2),o(t,(function(t){n.push(s(t,a++))}))):o(t,n.push,n),new this(n))}},function(t,e,n){n(0)({target:"WeakMap",stat:!0},{of:n(380)})},function(t,e,n){"use strict";t.exports=function(){for(var t=arguments.length,e=new Array(t);t--;)e[t]=arguments[t];return new this(e)}},function(t,e,n){"use strict";var r=n(0),i=n(24),o=n(382);r({target:"WeakMap",proto:!0,real:!0,forced:i},{deleteAll:function(){return o.apply(this,arguments)}})},function(t,e,n){"use strict";var r=n(11),i=n(14);t.exports=function(){for(var t,e=r(this),n=i(e.delete),o=!0,a=0,s=arguments.length;a<s;a++)t=n.call(e,arguments[a]),o=o&&t;return!!o}},function(t,e,n){"use strict";n(0)({target:"WeakMap",proto:!0,real:!0,forced:n(24)},{upsert:n(384)})},function(t,e,n){"use strict";var r=n(11);t.exports=function(t,e){var n,i=r(this),o=arguments.length>2?arguments[2]:void 0;if("function"!=typeof e&&"function"!=typeof o)throw TypeError("At least one callback required");return i.has(t)?(n=i.get(t),"function"==typeof e&&(n=e(n),i.set(t,n))):"function"==typeof o&&(n=o(),i.set(t,n)),n}},function(t,e,n){t.exports=n(386)},function(t,e,n){var r=n(171);t.exports=r},function(t,e,n){t.exports=n(388)},function(t,e,n){var r=n(389);t.exports=r},function(t,e,n){n(390);var r=n(1);t.exports=r.Object.assign},function(t,e,n){var r=n(0),i=n(391);r({target:"Object",stat:!0,forced:Object.assign!==i},{assign:i})},function(t,e,n){"use strict";var r=n(10),i=n(3),o=n(74),a=n(101),s=n(89),u=n(18),f=n(69),c=Object.assign,l=Object.defineProperty;t.exports=!c||i((function(){if(r&&1!==c({b:1},c(l({},"a",{enumerable:!0,get:function(){l(this,"b",{value:3,enumerable:!1})}}),{b:2})).b)return!0;var t={},e={},n=Symbol();return t[n]=7,"abcdefghijklmnopqrst".split("").forEach((function(t){e[t]=t})),7!=c({},t)[n]||"abcdefghijklmnopqrst"!=o(c({},e)).join("")}))?function(t,e){for(var n=u(t),i=arguments.length,c=1,l=a.f,h=s.f;i>c;)for(var d,p=f(arguments[c++]),g=l?o(p).concat(l(p)):o(p),v=g.length,b=0;v>b;)d=g[b++],r&&!h.call(p,d)||(n[d]=p[d]);return n}:c},function(t,e,n){"use strict";(function(e){var r=n(32),i=r(n(393)),o=r(n(84)),a=r(n(85)),s=r(n(51)),u=r(n(52)),f=n(198).unzip,c=n(212),l=n(424),h=function(){function t(e){var n=e.filehandle,r=e.path,i=e.gziFilehandle,o=e.gziPath;if((0,s.default)(this,t),n)this.filehandle=n;else{if(!r)throw new TypeError("either filehandle or path must be defined");this.filehandle=new c(r)}if(!i&&!o&&!r)throw new TypeError("either gziFilehandle or gziPath must be defined");this.gzi=new l({filehandle:i,path:i||o||!r?"".concat(r,".gzi"):o})}var n,r,h,d;return(0,u.default)(t,[{key:"stat",value:(d=(0,a.default)(o.default.mark((function t(){var e;return o.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this.filehandle.stat();case 2:return e=t.sent,t.t0=Object,t.t1=e,t.next=7,this.getUncompressedFileSize();case 7:return t.t2=t.sent,t.t3=void 0,t.t4=void 0,t.t5={size:t.t2,blocks:t.t3,blksize:t.t4},t.abrupt("return",t.t0.assign.call(t.t0,t.t1,t.t5));case 12:case"end":return t.stop()}}),t,this)}))),function(){return d.apply(this,arguments)})},{key:"getUncompressedFileSize",value:(h=(0,a.default)(o.default.mark((function t(){var n,r,a,s,u,f,c;return o.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this.gzi.getLastBlock();case 2:return n=t.sent,r=(0,i.default)(n,2),a=r[1],t.next=7,this.filehandle.stat();case 7:return s=t.sent,u=s.size,f=e.allocUnsafe(4),t.next=12,this.filehandle.read(f,0,4,u-28-4);case 12:if(4===t.sent.bytesRead){t.next=16;break}throw new Error("read error");case 16:return c=f.readUInt32LE(0),t.abrupt("return",a+c);case 18:case"end":return t.stop()}}),t,this)}))),function(){return h.apply(this,arguments)})},{key:"_readAndUncompressBlock",value:(r=(0,a.default)(o.default.mark((function t(e,n,r){var a,s,u,c,l,h,d;return o.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(a=(0,i.default)(n,1),s=a[0],u=(0,i.default)(r,1),c=u[0],l=c){t.next=7;break}return t.next=6,this.filehandle.stat();case 6:l=t.sent.size;case 7:return h=l-s,t.next=10,this.filehandle.read(e,0,h,s);case 10:return t.next=12,f(e.slice(0,h));case 12:return d=t.sent,t.abrupt("return",d);case 14:case"end":return t.stop()}}),t,this)}))),function(t,e,n){return r.apply(this,arguments)})},{key:"read",value:(n=(0,a.default)(o.default.mark((function t(n,r,a,s){var u,f,c,l,h,d,p,g,v,b;return o.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this.gzi.getRelevantBlocksForRead(a,s);case 2:u=t.sent,f=e.allocUnsafe(65536),c=r,l=0,h=0;case 7:if(!(h<u.length-1)){t.next=18;break}return t.next=10,this._readAndUncompressBlock(f,u[h],u[h+1]);case 10:d=t.sent,p=(0,i.default)(u[h],2),g=p[1],v=g>=s?0:s-g,b=Math.min(s+a,g+d.length)-g,v>=0&&v<d.length&&(d.copy(n,c,v,b),c+=b-v,l+=b-v);case 15:h+=1,t.next=7;break;case 18:return t.abrupt("return",{bytesRead:l,buffer:n});case 19:case"end":return t.stop()}}),t,this)}))),function(t,e,r,i){return n.apply(this,arguments)})}]),t}();t.exports=h}).call(this,n(9).Buffer)},function(t,e,n){var r=n(394),i=n(395),o=n(396),a=n(398);t.exports=function(t,e){return r(t)||i(t,e)||o(t,e)||a()}},function(t,e){t.exports=function(t){if(Array.isArray(t))return t}},function(t,e){t.exports=function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var n=[],r=!0,i=!1,o=void 0;try{for(var a,s=t[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){i=!0,o=t}finally{try{r||null==s.return||s.return()}finally{if(i)throw o}}return n}}},function(t,e,n){var r=n(397);t.exports=function(t,e){if(t){if("string"==typeof t)return r(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?r(t,e):void 0}}},function(t,e){t.exports=function(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}},function(t,e){t.exports=function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}},function(t,e,n){"use strict";(function(t){var r=n(9).Buffer,i=n(400).Transform,o=n(413),a=n(205),s=n(204).ok,u=n(9).kMaxLength,f="Cannot create final Buffer. It would be larger than 0x"+u.toString(16)+" bytes";o.Z_MIN_WINDOWBITS=8,o.Z_MAX_WINDOWBITS=15,o.Z_DEFAULT_WINDOWBITS=15,o.Z_MIN_CHUNK=64,o.Z_MAX_CHUNK=1/0,o.Z_DEFAULT_CHUNK=16384,o.Z_MIN_MEMLEVEL=1,o.Z_MAX_MEMLEVEL=9,o.Z_DEFAULT_MEMLEVEL=8,o.Z_MIN_LEVEL=-1,o.Z_MAX_LEVEL=9,o.Z_DEFAULT_LEVEL=o.Z_DEFAULT_COMPRESSION;for(var c=Object.keys(o),l=0;l<c.length;l++){var h=c[l];h.match(/^Z/)&&Object.defineProperty(e,h,{enumerable:!0,value:o[h],writable:!1})}for(var d={Z_OK:o.Z_OK,Z_STREAM_END:o.Z_STREAM_END,Z_NEED_DICT:o.Z_NEED_DICT,Z_ERRNO:o.Z_ERRNO,Z_STREAM_ERROR:o.Z_STREAM_ERROR,Z_DATA_ERROR:o.Z_DATA_ERROR,Z_MEM_ERROR:o.Z_MEM_ERROR,Z_BUF_ERROR:o.Z_BUF_ERROR,Z_VERSION_ERROR:o.Z_VERSION_ERROR},p=Object.keys(d),g=0;g<p.length;g++){var v=p[g];d[d[v]]=v}function b(t,e,n){var i=[],o=0;function a(){for(var e;null!==(e=t.read());)i.push(e),o+=e.length;t.once("readable",a)}function s(){var e,a=null;o>=u?a=new RangeError(f):e=r.concat(i,o),i=[],t.close(),n(a,e)}t.on("error",(function(e){t.removeListener("end",s),t.removeListener("readable",a),n(e)})),t.on("end",s),t.end(e),a()}function y(t,e){if("string"==typeof e&&(e=r.from(e)),!r.isBuffer(e))throw new TypeError("Not a string or buffer");var n=t._finishFlushFlag;return t._processChunk(e,n)}function m(t){if(!(this instanceof m))return new m(t);O.call(this,t,o.DEFLATE)}function w(t){if(!(this instanceof w))return new w(t);O.call(this,t,o.INFLATE)}function _(t){if(!(this instanceof _))return new _(t);O.call(this,t,o.GZIP)}function x(t){if(!(this instanceof x))return new x(t);O.call(this,t,o.GUNZIP)}function k(t){if(!(this instanceof k))return new k(t);O.call(this,t,o.DEFLATERAW)}function E(t){if(!(this instanceof E))return new E(t);O.call(this,t,o.INFLATERAW)}function S(t){if(!(this instanceof S))return new S(t);O.call(this,t,o.UNZIP)}function A(t){return t===o.Z_NO_FLUSH||t===o.Z_PARTIAL_FLUSH||t===o.Z_SYNC_FLUSH||t===o.Z_FULL_FLUSH||t===o.Z_FINISH||t===o.Z_BLOCK}function O(t,n){var a=this;if(this._opts=t=t||{},this._chunkSize=t.chunkSize||e.Z_DEFAULT_CHUNK,i.call(this,t),t.flush&&!A(t.flush))throw new Error("Invalid flush flag: "+t.flush);if(t.finishFlush&&!A(t.finishFlush))throw new Error("Invalid flush flag: "+t.finishFlush);if(this._flushFlag=t.flush||o.Z_NO_FLUSH,this._finishFlushFlag=void 0!==t.finishFlush?t.finishFlush:o.Z_FINISH,t.chunkSize&&(t.chunkSize<e.Z_MIN_CHUNK||t.chunkSize>e.Z_MAX_CHUNK))throw new Error("Invalid chunk size: "+t.chunkSize);if(t.windowBits&&(t.windowBits<e.Z_MIN_WINDOWBITS||t.windowBits>e.Z_MAX_WINDOWBITS))throw new Error("Invalid windowBits: "+t.windowBits);if(t.level&&(t.level<e.Z_MIN_LEVEL||t.level>e.Z_MAX_LEVEL))throw new Error("Invalid compression level: "+t.level);if(t.memLevel&&(t.memLevel<e.Z_MIN_MEMLEVEL||t.memLevel>e.Z_MAX_MEMLEVEL))throw new Error("Invalid memLevel: "+t.memLevel);if(t.strategy&&t.strategy!=e.Z_FILTERED&&t.strategy!=e.Z_HUFFMAN_ONLY&&t.strategy!=e.Z_RLE&&t.strategy!=e.Z_FIXED&&t.strategy!=e.Z_DEFAULT_STRATEGY)throw new Error("Invalid strategy: "+t.strategy);if(t.dictionary&&!r.isBuffer(t.dictionary))throw new Error("Invalid dictionary: it should be a Buffer instance");this._handle=new o.Zlib(n);var s=this;this._hadError=!1,this._handle.onerror=function(t,n){T(s),s._hadError=!0;var r=new Error(t);r.errno=n,r.code=e.codes[n],s.emit("error",r)};var u=e.Z_DEFAULT_COMPRESSION;"number"==typeof t.level&&(u=t.level);var f=e.Z_DEFAULT_STRATEGY;"number"==typeof t.strategy&&(f=t.strategy),this._handle.init(t.windowBits||e.Z_DEFAULT_WINDOWBITS,u,t.memLevel||e.Z_DEFAULT_MEMLEVEL,f,t.dictionary),this._buffer=r.allocUnsafe(this._chunkSize),this._offset=0,this._level=u,this._strategy=f,this.once("end",this.close),Object.defineProperty(this,"_closed",{get:function(){return!a._handle},configurable:!0,enumerable:!0})}function T(e,n){n&&t.nextTick(n),e._handle&&(e._handle.close(),e._handle=null)}function M(t){t.emit("close")}Object.defineProperty(e,"codes",{enumerable:!0,value:Object.freeze(d),writable:!1}),e.Deflate=m,e.Inflate=w,e.Gzip=_,e.Gunzip=x,e.DeflateRaw=k,e.InflateRaw=E,e.Unzip=S,e.createDeflate=function(t){return new m(t)},e.createInflate=function(t){return new w(t)},e.createDeflateRaw=function(t){return new k(t)},e.createInflateRaw=function(t){return new E(t)},e.createGzip=function(t){return new _(t)},e.createGunzip=function(t){return new x(t)},e.createUnzip=function(t){return new S(t)},e.deflate=function(t,e,n){return"function"==typeof e&&(n=e,e={}),b(new m(e),t,n)},e.deflateSync=function(t,e){return y(new m(e),t)},e.gzip=function(t,e,n){return"function"==typeof e&&(n=e,e={}),b(new _(e),t,n)},e.gzipSync=function(t,e){return y(new _(e),t)},e.deflateRaw=function(t,e,n){return"function"==typeof e&&(n=e,e={}),b(new k(e),t,n)},e.deflateRawSync=function(t,e){return y(new k(e),t)},e.unzip=function(t,e,n){return"function"==typeof e&&(n=e,e={}),b(new S(e),t,n)},e.unzipSync=function(t,e){return y(new S(e),t)},e.inflate=function(t,e,n){return"function"==typeof e&&(n=e,e={}),b(new w(e),t,n)},e.inflateSync=function(t,e){return y(new w(e),t)},e.gunzip=function(t,e,n){return"function"==typeof e&&(n=e,e={}),b(new x(e),t,n)},e.gunzipSync=function(t,e){return y(new x(e),t)},e.inflateRaw=function(t,e,n){return"function"==typeof e&&(n=e,e={}),b(new E(e),t,n)},e.inflateRawSync=function(t,e){return y(new E(e),t)},a.inherits(O,i),O.prototype.params=function(n,r,i){if(n<e.Z_MIN_LEVEL||n>e.Z_MAX_LEVEL)throw new RangeError("Invalid compression level: "+n);if(r!=e.Z_FILTERED&&r!=e.Z_HUFFMAN_ONLY&&r!=e.Z_RLE&&r!=e.Z_FIXED&&r!=e.Z_DEFAULT_STRATEGY)throw new TypeError("Invalid strategy: "+r);if(this._level!==n||this._strategy!==r){var a=this;this.flush(o.Z_SYNC_FLUSH,(function(){s(a._handle,"zlib binding closed"),a._handle.params(n,r),a._hadError||(a._level=n,a._strategy=r,i&&i())}))}else t.nextTick(i)},O.prototype.reset=function(){return s(this._handle,"zlib binding closed"),this._handle.reset()},O.prototype._flush=function(t){this._transform(r.alloc(0),"",t)},O.prototype.flush=function(e,n){var i=this,a=this._writableState;("function"==typeof e||void 0===e&&!n)&&(n=e,e=o.Z_FULL_FLUSH),a.ended?n&&t.nextTick(n):a.ending?n&&this.once("end",n):a.needDrain?n&&this.once("drain",(function(){return i.flush(e,n)})):(this._flushFlag=e,this.write(r.alloc(0),"",n))},O.prototype.close=function(e){T(this,e),t.nextTick(M,this)},O.prototype._transform=function(t,e,n){var i,a=this._writableState,s=(a.ending||a.ended)&&(!t||a.length===t.length);return null===t||r.isBuffer(t)?this._handle?(s?i=this._finishFlushFlag:(i=this._flushFlag,t.length>=a.length&&(this._flushFlag=this._opts.flush||o.Z_NO_FLUSH)),void this._processChunk(t,i,n)):n(new Error("zlib binding closed")):n(new Error("invalid input"))},O.prototype._processChunk=function(t,e,n){var i=t&&t.length,o=this._chunkSize-this._offset,a=0,c=this,l="function"==typeof n;if(!l){var h,d=[],p=0;this.on("error",(function(t){h=t})),s(this._handle,"zlib binding closed");do{var g=this._handle.writeSync(e,t,a,i,this._buffer,this._offset,o)}while(!this._hadError&&y(g[0],g[1]));if(this._hadError)throw h;if(p>=u)throw T(this),new RangeError(f);var v=r.concat(d,p);return T(this),v}s(this._handle,"zlib binding closed");var b=this._handle.write(e,t,a,i,this._buffer,this._offset,o);function y(u,f){if(this&&(this.buffer=null,this.callback=null),!c._hadError){var h=o-f;if(s(h>=0,"have should not go down"),h>0){var g=c._buffer.slice(c._offset,c._offset+h);c._offset+=h,l?c.push(g):(d.push(g),p+=g.length)}if((0===f||c._offset>=c._chunkSize)&&(o=c._chunkSize,c._offset=0,c._buffer=r.allocUnsafe(c._chunkSize)),0===f){if(a+=i-u,i=u,!l)return!0;var v=c._handle.write(e,t,a,i,c._buffer,c._offset,c._chunkSize);return v.callback=y,void(v.buffer=t)}if(!l)return!1;n()}}b.buffer=t,b.callback=y},a.inherits(m,O),a.inherits(w,O),a.inherits(_,O),a.inherits(x,O),a.inherits(k,O),a.inherits(E,O),a.inherits(S,O)}).call(this,n(22))},function(t,e,n){t.exports=i;var r=n(123).EventEmitter;function i(){r.call(this)}n(53)(i,r),i.Readable=n(124),i.Writable=n(409),i.Duplex=n(410),i.Transform=n(411),i.PassThrough=n(412),i.Stream=i,i.prototype.pipe=function(t,e){var n=this;function i(e){t.writable&&!1===t.write(e)&&n.pause&&n.pause()}function o(){n.readable&&n.resume&&n.resume()}n.on("data",i),t.on("drain",o),t._isStdio||e&&!1===e.end||(n.on("end",s),n.on("close",u));var a=!1;function s(){a||(a=!0,t.end())}function u(){a||(a=!0,"function"==typeof t.destroy&&t.destroy())}function f(t){if(c(),0===r.listenerCount(this,"error"))throw t}function c(){n.removeListener("data",i),t.removeListener("drain",o),n.removeListener("end",s),n.removeListener("close",u),n.removeListener("error",f),t.removeListener("error",f),n.removeListener("end",c),n.removeListener("close",c),t.removeListener("close",c)}return n.on("error",f),t.on("error",f),n.on("end",c),n.on("close",c),t.on("close",c),t.emit("pipe",n),t}},function(t,e){},function(t,e,n){"use strict";var r=n(125).Buffer,i=n(403);t.exports=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.head=null,this.tail=null,this.length=0}return t.prototype.push=function(t){var e={data:t,next:null};this.length>0?this.tail.next=e:this.head=e,this.tail=e,++this.length},t.prototype.unshift=function(t){var e={data:t,next:this.head};0===this.length&&(this.tail=e),this.head=e,++this.length},t.prototype.shift=function(){if(0!==this.length){var t=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,t}},t.prototype.clear=function(){this.head=this.tail=null,this.length=0},t.prototype.join=function(t){if(0===this.length)return"";for(var e=this.head,n=""+e.data;e=e.next;)n+=t+e.data;return n},t.prototype.concat=function(t){if(0===this.length)return r.alloc(0);if(1===this.length)return this.head.data;for(var e,n,i,o=r.allocUnsafe(t>>>0),a=this.head,s=0;a;)e=a.data,n=o,i=s,e.copy(n,i),s+=a.data.length,a=a.next;return o},t}(),i&&i.inspect&&i.inspect.custom&&(t.exports.prototype[i.inspect.custom]=function(){var t=i.inspect({length:this.length});return this.constructor.name+" "+t})},function(t,e){},function(t,e,n){(function(t){var r=void 0!==t&&t||"undefined"!=typeof self&&self||window,i=Function.prototype.apply;function o(t,e){this._id=t,this._clearFn=e}e.setTimeout=function(){return new o(i.call(setTimeout,r,arguments),clearTimeout)},e.setInterval=function(){return new o(i.call(setInterval,r,arguments),clearInterval)},e.clearTimeout=e.clearInterval=function(t){t&&t.close()},o.prototype.unref=o.prototype.ref=function(){},o.prototype.close=function(){this._clearFn.call(r,this._id)},e.enroll=function(t,e){clearTimeout(t._idleTimeoutId),t._idleTimeout=e},e.unenroll=function(t){clearTimeout(t._idleTimeoutId),t._idleTimeout=-1},e._unrefActive=e.active=function(t){clearTimeout(t._idleTimeoutId);var e=t._idleTimeout;e>=0&&(t._idleTimeoutId=setTimeout((function(){t._onTimeout&&t._onTimeout()}),e))},n(405),e.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==t&&t.setImmediate||this&&this.setImmediate,e.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==t&&t.clearImmediate||this&&this.clearImmediate}).call(this,n(21))},function(t,e,n){(function(t,e){!function(t,n){"use strict";if(!t.setImmediate){var r,i,o,a,s,u=1,f={},c=!1,l=t.document,h=Object.getPrototypeOf&&Object.getPrototypeOf(t);h=h&&h.setTimeout?h:t,"[object process]"==={}.toString.call(t.process)?r=function(t){e.nextTick((function(){p(t)}))}:!function(){if(t.postMessage&&!t.importScripts){var e=!0,n=t.onmessage;return t.onmessage=function(){e=!1},t.postMessage("","*"),t.onmessage=n,e}}()?t.MessageChannel?((o=new MessageChannel).port1.onmessage=function(t){p(t.data)},r=function(t){o.port2.postMessage(t)}):l&&"onreadystatechange"in l.createElement("script")?(i=l.documentElement,r=function(t){var e=l.createElement("script");e.onreadystatechange=function(){p(t),e.onreadystatechange=null,i.removeChild(e),e=null},i.appendChild(e)}):r=function(t){setTimeout(p,0,t)}:(a="setImmediate$"+Math.random()+"$",s=function(e){e.source===t&&"string"==typeof e.data&&0===e.data.indexOf(a)&&p(+e.data.slice(a.length))},t.addEventListener?t.addEventListener("message",s,!1):t.attachEvent("onmessage",s),r=function(e){t.postMessage(a+e,"*")}),h.setImmediate=function(t){"function"!=typeof t&&(t=new Function(""+t));for(var e=new Array(arguments.length-1),n=0;n<e.length;n++)e[n]=arguments[n+1];var i={callback:t,args:e};return f[u]=i,r(u),u++},h.clearImmediate=d}function d(t){delete f[t]}function p(t){if(c)setTimeout(p,0,t);else{var e=f[t];if(e){c=!0;try{!function(t){var e=t.callback,n=t.args;switch(n.length){case 0:e();break;case 1:e(n[0]);break;case 2:e(n[0],n[1]);break;case 3:e(n[0],n[1],n[2]);break;default:e.apply(void 0,n)}}(e)}finally{d(t),c=!1}}}}}("undefined"==typeof self?void 0===t?this:t:self)}).call(this,n(21),n(22))},function(t,e,n){(function(e){function n(t){try{if(!e.localStorage)return!1}catch(t){return!1}var n=e.localStorage[t];return null!=n&&"true"===String(n).toLowerCase()}t.exports=function(t,e){if(n("noDeprecation"))return t;var r=!1;return function(){if(!r){if(n("throwDeprecation"))throw new Error(e);n("traceDeprecation")?console.trace(e):console.warn(e),r=!0}return t.apply(this,arguments)}}}).call(this,n(21))},function(t,e,n){
/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
var r=n(9),i=r.Buffer;function o(t,e){for(var n in t)e[n]=t[n]}function a(t,e,n){return i(t,e,n)}i.from&&i.alloc&&i.allocUnsafe&&i.allocUnsafeSlow?t.exports=r:(o(r,e),e.Buffer=a),a.prototype=Object.create(i.prototype),o(i,a),a.from=function(t,e,n){if("number"==typeof t)throw new TypeError("Argument must not be a number");return i(t,e,n)},a.alloc=function(t,e,n){if("number"!=typeof t)throw new TypeError("Argument must be a number");var r=i(t);return void 0!==e?"string"==typeof n?r.fill(e,n):r.fill(e):r.fill(0),r},a.allocUnsafe=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return i(t)},a.allocUnsafeSlow=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return r.SlowBuffer(t)}},function(t,e,n){"use strict";t.exports=o;var r=n(203),i=Object.create(n(65));function o(t){if(!(this instanceof o))return new o(t);r.call(this,t)}i.inherits=n(53),i.inherits(o,r),o.prototype._transform=function(t,e,n){n(null,t)}},function(t,e,n){t.exports=n(126)},function(t,e,n){t.exports=n(38)},function(t,e,n){t.exports=n(124).Transform},function(t,e,n){t.exports=n(124).PassThrough},function(t,e,n){"use strict";(function(t,r){var i=n(204),o=n(127),a=n(206),s=n(209),u=n(129);for(var f in u)e[f]=u[f];e.NONE=0,e.DEFLATE=1,e.INFLATE=2,e.GZIP=3,e.GUNZIP=4,e.DEFLATERAW=5,e.INFLATERAW=6,e.UNZIP=7;function c(t){if("number"!=typeof t||t<e.DEFLATE||t>e.UNZIP)throw new TypeError("Bad argument");this.dictionary=null,this.err=0,this.flush=0,this.init_done=!1,this.level=0,this.memLevel=0,this.mode=t,this.strategy=0,this.windowBits=0,this.write_in_progress=!1,this.pending_close=!1,this.gzip_id_bytes_read=0}c.prototype.close=function(){this.write_in_progress?this.pending_close=!0:(this.pending_close=!1,i(this.init_done,"close before init"),i(this.mode<=e.UNZIP),this.mode===e.DEFLATE||this.mode===e.GZIP||this.mode===e.DEFLATERAW?a.deflateEnd(this.strm):this.mode!==e.INFLATE&&this.mode!==e.GUNZIP&&this.mode!==e.INFLATERAW&&this.mode!==e.UNZIP||s.inflateEnd(this.strm),this.mode=e.NONE,this.dictionary=null)},c.prototype.write=function(t,e,n,r,i,o,a){return this._write(!0,t,e,n,r,i,o,a)},c.prototype.writeSync=function(t,e,n,r,i,o,a){return this._write(!1,t,e,n,r,i,o,a)},c.prototype._write=function(n,o,a,s,u,f,c,l){if(i.equal(arguments.length,8),i(this.init_done,"write before init"),i(this.mode!==e.NONE,"already finalized"),i.equal(!1,this.write_in_progress,"write already in progress"),i.equal(!1,this.pending_close,"close is pending"),this.write_in_progress=!0,i.equal(!1,void 0===o,"must provide flush value"),this.write_in_progress=!0,o!==e.Z_NO_FLUSH&&o!==e.Z_PARTIAL_FLUSH&&o!==e.Z_SYNC_FLUSH&&o!==e.Z_FULL_FLUSH&&o!==e.Z_FINISH&&o!==e.Z_BLOCK)throw new Error("Invalid flush value");if(null==a&&(a=t.alloc(0),u=0,s=0),this.strm.avail_in=u,this.strm.input=a,this.strm.next_in=s,this.strm.avail_out=l,this.strm.output=f,this.strm.next_out=c,this.flush=o,!n)return this._process(),this._checkError()?this._afterSync():void 0;var h=this;return r.nextTick((function(){h._process(),h._after()})),this},c.prototype._afterSync=function(){var t=this.strm.avail_out,e=this.strm.avail_in;return this.write_in_progress=!1,[e,t]},c.prototype._process=function(){var t=null;switch(this.mode){case e.DEFLATE:case e.GZIP:case e.DEFLATERAW:this.err=a.deflate(this.strm,this.flush);break;case e.UNZIP:switch(this.strm.avail_in>0&&(t=this.strm.next_in),this.gzip_id_bytes_read){case 0:if(null===t)break;if(31!==this.strm.input[t]){this.mode=e.INFLATE;break}if(this.gzip_id_bytes_read=1,t++,1===this.strm.avail_in)break;case 1:if(null===t)break;139===this.strm.input[t]?(this.gzip_id_bytes_read=2,this.mode=e.GUNZIP):this.mode=e.INFLATE;break;default:throw new Error("invalid number of gzip magic number bytes read")}case e.INFLATE:case e.GUNZIP:case e.INFLATERAW:for(this.err=s.inflate(this.strm,this.flush),this.err===e.Z_NEED_DICT&&this.dictionary&&(this.err=s.inflateSetDictionary(this.strm,this.dictionary),this.err===e.Z_OK?this.err=s.inflate(this.strm,this.flush):this.err===e.Z_DATA_ERROR&&(this.err=e.Z_NEED_DICT));this.strm.avail_in>0&&this.mode===e.GUNZIP&&this.err===e.Z_STREAM_END&&0!==this.strm.next_in[0];)this.reset(),this.err=s.inflate(this.strm,this.flush);break;default:throw new Error("Unknown mode "+this.mode)}},c.prototype._checkError=function(){switch(this.err){case e.Z_OK:case e.Z_BUF_ERROR:if(0!==this.strm.avail_out&&this.flush===e.Z_FINISH)return this._error("unexpected end of file"),!1;break;case e.Z_STREAM_END:break;case e.Z_NEED_DICT:return null==this.dictionary?this._error("Missing dictionary"):this._error("Bad dictionary"),!1;default:return this._error("Zlib error"),!1}return!0},c.prototype._after=function(){if(this._checkError()){var t=this.strm.avail_out,e=this.strm.avail_in;this.write_in_progress=!1,this.callback(e,t),this.pending_close&&this.close()}},c.prototype._error=function(t){this.strm.msg&&(t=this.strm.msg),this.onerror(t,this.err),this.write_in_progress=!1,this.pending_close&&this.close()},c.prototype.init=function(t,n,r,o,a){i(4===arguments.length||5===arguments.length,"init(windowBits, level, memLevel, strategy, [dictionary])"),i(t>=8&&t<=15,"invalid windowBits"),i(n>=-1&&n<=9,"invalid compression level"),i(r>=1&&r<=9,"invalid memlevel"),i(o===e.Z_FILTERED||o===e.Z_HUFFMAN_ONLY||o===e.Z_RLE||o===e.Z_FIXED||o===e.Z_DEFAULT_STRATEGY,"invalid strategy"),this._init(n,t,r,o,a),this._setDictionary()},c.prototype.params=function(){throw new Error("deflateParams Not supported")},c.prototype.reset=function(){this._reset(),this._setDictionary()},c.prototype._init=function(t,n,r,i,u){switch(this.level=t,this.windowBits=n,this.memLevel=r,this.strategy=i,this.flush=e.Z_NO_FLUSH,this.err=e.Z_OK,this.mode!==e.GZIP&&this.mode!==e.GUNZIP||(this.windowBits+=16),this.mode===e.UNZIP&&(this.windowBits+=32),this.mode!==e.DEFLATERAW&&this.mode!==e.INFLATERAW||(this.windowBits=-1*this.windowBits),this.strm=new o,this.mode){case e.DEFLATE:case e.GZIP:case e.DEFLATERAW:this.err=a.deflateInit2(this.strm,this.level,e.Z_DEFLATED,this.windowBits,this.memLevel,this.strategy);break;case e.INFLATE:case e.GUNZIP:case e.INFLATERAW:case e.UNZIP:this.err=s.inflateInit2(this.strm,this.windowBits);break;default:throw new Error("Unknown mode "+this.mode)}this.err!==e.Z_OK&&this._error("Init error"),this.dictionary=u,this.write_in_progress=!1,this.init_done=!0},c.prototype._setDictionary=function(){if(null!=this.dictionary){switch(this.err=e.Z_OK,this.mode){case e.DEFLATE:case e.DEFLATERAW:this.err=a.deflateSetDictionary(this.strm,this.dictionary)}this.err!==e.Z_OK&&this._error("Failed to set dictionary")}},c.prototype._reset=function(){switch(this.err=e.Z_OK,this.mode){case e.DEFLATE:case e.DEFLATERAW:case e.GZIP:this.err=a.deflateReset(this.strm);break;case e.INFLATE:case e.INFLATERAW:case e.GUNZIP:this.err=s.inflateReset(this.strm)}this.err!==e.Z_OK&&this._error("Failed to reset stream")},e.Zlib=c}).call(this,n(9).Buffer,n(22))},function(t,e,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,i=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable;function a(t){if(null==t)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(t)}t.exports=function(){try{if(!Object.assign)return!1;var t=new String("abc");if(t[5]="de","5"===Object.getOwnPropertyNames(t)[0])return!1;for(var e={},n=0;n<10;n++)e["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(e).map((function(t){return e[t]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(t){r[t]=t})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(t){return!1}}()?Object.assign:function(t,e){for(var n,s,u=a(t),f=1;f<arguments.length;f++){for(var c in n=Object(arguments[f]))i.call(n,c)&&(u[c]=n[c]);if(r){s=r(n);for(var l=0;l<s.length;l++)o.call(n,s[l])&&(u[s[l]]=n[s[l]])}}return u}},function(t,e){t.exports=function(t){return t&&"object"==typeof t&&"function"==typeof t.copy&&"function"==typeof t.fill&&"function"==typeof t.readUInt8}},function(t,e){"function"==typeof Object.create?t.exports=function(t,e){t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}})}:t.exports=function(t,e){t.super_=e;var n=function(){};n.prototype=e.prototype,t.prototype=new n,t.prototype.constructor=t}},function(t,e,n){"use strict";var r=n(33);function i(t){for(var e=t.length;--e>=0;)t[e]=0}var o=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],a=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],s=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],u=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],f=new Array(576);i(f);var c=new Array(60);i(c);var l=new Array(512);i(l);var h=new Array(256);i(h);var d=new Array(29);i(d);var p,g,v,b=new Array(30);function y(t,e,n,r,i){this.static_tree=t,this.extra_bits=e,this.extra_base=n,this.elems=r,this.max_length=i,this.has_stree=t&&t.length}function m(t,e){this.dyn_tree=t,this.max_code=0,this.stat_desc=e}function w(t){return t<256?l[t]:l[256+(t>>>7)]}function _(t,e){t.pending_buf[t.pending++]=255&e,t.pending_buf[t.pending++]=e>>>8&255}function x(t,e,n){t.bi_valid>16-n?(t.bi_buf|=e<<t.bi_valid&65535,_(t,t.bi_buf),t.bi_buf=e>>16-t.bi_valid,t.bi_valid+=n-16):(t.bi_buf|=e<<t.bi_valid&65535,t.bi_valid+=n)}function k(t,e,n){x(t,n[2*e],n[2*e+1])}function E(t,e){var n=0;do{n|=1&t,t>>>=1,n<<=1}while(--e>0);return n>>>1}function S(t,e,n){var r,i,o=new Array(16),a=0;for(r=1;r<=15;r++)o[r]=a=a+n[r-1]<<1;for(i=0;i<=e;i++){var s=t[2*i+1];0!==s&&(t[2*i]=E(o[s]++,s))}}function A(t){var e;for(e=0;e<286;e++)t.dyn_ltree[2*e]=0;for(e=0;e<30;e++)t.dyn_dtree[2*e]=0;for(e=0;e<19;e++)t.bl_tree[2*e]=0;t.dyn_ltree[512]=1,t.opt_len=t.static_len=0,t.last_lit=t.matches=0}function O(t){t.bi_valid>8?_(t,t.bi_buf):t.bi_valid>0&&(t.pending_buf[t.pending++]=t.bi_buf),t.bi_buf=0,t.bi_valid=0}function T(t,e,n,r){var i=2*e,o=2*n;return t[i]<t[o]||t[i]===t[o]&&r[e]<=r[n]}function M(t,e,n){for(var r=t.heap[n],i=n<<1;i<=t.heap_len&&(i<t.heap_len&&T(e,t.heap[i+1],t.heap[i],t.depth)&&i++,!T(e,r,t.heap[i],t.depth));)t.heap[n]=t.heap[i],n=i,i<<=1;t.heap[n]=r}function R(t,e,n){var r,i,s,u,f=0;if(0!==t.last_lit)do{r=t.pending_buf[t.d_buf+2*f]<<8|t.pending_buf[t.d_buf+2*f+1],i=t.pending_buf[t.l_buf+f],f++,0===r?k(t,i,e):(k(t,(s=h[i])+256+1,e),0!==(u=o[s])&&x(t,i-=d[s],u),k(t,s=w(--r),n),0!==(u=a[s])&&x(t,r-=b[s],u))}while(f<t.last_lit);k(t,256,e)}function j(t,e){var n,r,i,o=e.dyn_tree,a=e.stat_desc.static_tree,s=e.stat_desc.has_stree,u=e.stat_desc.elems,f=-1;for(t.heap_len=0,t.heap_max=573,n=0;n<u;n++)0!==o[2*n]?(t.heap[++t.heap_len]=f=n,t.depth[n]=0):o[2*n+1]=0;for(;t.heap_len<2;)o[2*(i=t.heap[++t.heap_len]=f<2?++f:0)]=1,t.depth[i]=0,t.opt_len--,s&&(t.static_len-=a[2*i+1]);for(e.max_code=f,n=t.heap_len>>1;n>=1;n--)M(t,o,n);i=u;do{n=t.heap[1],t.heap[1]=t.heap[t.heap_len--],M(t,o,1),r=t.heap[1],t.heap[--t.heap_max]=n,t.heap[--t.heap_max]=r,o[2*i]=o[2*n]+o[2*r],t.depth[i]=(t.depth[n]>=t.depth[r]?t.depth[n]:t.depth[r])+1,o[2*n+1]=o[2*r+1]=i,t.heap[1]=i++,M(t,o,1)}while(t.heap_len>=2);t.heap[--t.heap_max]=t.heap[1],function(t,e){var n,r,i,o,a,s,u=e.dyn_tree,f=e.max_code,c=e.stat_desc.static_tree,l=e.stat_desc.has_stree,h=e.stat_desc.extra_bits,d=e.stat_desc.extra_base,p=e.stat_desc.max_length,g=0;for(o=0;o<=15;o++)t.bl_count[o]=0;for(u[2*t.heap[t.heap_max]+1]=0,n=t.heap_max+1;n<573;n++)(o=u[2*u[2*(r=t.heap[n])+1]+1]+1)>p&&(o=p,g++),u[2*r+1]=o,r>f||(t.bl_count[o]++,a=0,r>=d&&(a=h[r-d]),s=u[2*r],t.opt_len+=s*(o+a),l&&(t.static_len+=s*(c[2*r+1]+a)));if(0!==g){do{for(o=p-1;0===t.bl_count[o];)o--;t.bl_count[o]--,t.bl_count[o+1]+=2,t.bl_count[p]--,g-=2}while(g>0);for(o=p;0!==o;o--)for(r=t.bl_count[o];0!==r;)(i=t.heap[--n])>f||(u[2*i+1]!==o&&(t.opt_len+=(o-u[2*i+1])*u[2*i],u[2*i+1]=o),r--)}}(t,e),S(o,f,t.bl_count)}function L(t,e,n){var r,i,o=-1,a=e[1],s=0,u=7,f=4;for(0===a&&(u=138,f=3),e[2*(n+1)+1]=65535,r=0;r<=n;r++)i=a,a=e[2*(r+1)+1],++s<u&&i===a||(s<f?t.bl_tree[2*i]+=s:0!==i?(i!==o&&t.bl_tree[2*i]++,t.bl_tree[32]++):s<=10?t.bl_tree[34]++:t.bl_tree[36]++,s=0,o=i,0===a?(u=138,f=3):i===a?(u=6,f=3):(u=7,f=4))}function P(t,e,n){var r,i,o=-1,a=e[1],s=0,u=7,f=4;for(0===a&&(u=138,f=3),r=0;r<=n;r++)if(i=a,a=e[2*(r+1)+1],!(++s<u&&i===a)){if(s<f)do{k(t,i,t.bl_tree)}while(0!=--s);else 0!==i?(i!==o&&(k(t,i,t.bl_tree),s--),k(t,16,t.bl_tree),x(t,s-3,2)):s<=10?(k(t,17,t.bl_tree),x(t,s-3,3)):(k(t,18,t.bl_tree),x(t,s-11,7));s=0,o=i,0===a?(u=138,f=3):i===a?(u=6,f=3):(u=7,f=4)}}i(b);var I=!1;function N(t,e,n,i){x(t,0+(i?1:0),3),function(t,e,n,i){O(t),i&&(_(t,n),_(t,~n)),r.arraySet(t.pending_buf,t.window,e,n,t.pending),t.pending+=n}(t,e,n,!0)}e._tr_init=function(t){I||(!function(){var t,e,n,r,i,u=new Array(16);for(n=0,r=0;r<28;r++)for(d[r]=n,t=0;t<1<<o[r];t++)h[n++]=r;for(h[n-1]=r,i=0,r=0;r<16;r++)for(b[r]=i,t=0;t<1<<a[r];t++)l[i++]=r;for(i>>=7;r<30;r++)for(b[r]=i<<7,t=0;t<1<<a[r]-7;t++)l[256+i++]=r;for(e=0;e<=15;e++)u[e]=0;for(t=0;t<=143;)f[2*t+1]=8,t++,u[8]++;for(;t<=255;)f[2*t+1]=9,t++,u[9]++;for(;t<=279;)f[2*t+1]=7,t++,u[7]++;for(;t<=287;)f[2*t+1]=8,t++,u[8]++;for(S(f,287,u),t=0;t<30;t++)c[2*t+1]=5,c[2*t]=E(t,5);p=new y(f,o,257,286,15),g=new y(c,a,0,30,15),v=new y(new Array(0),s,0,19,7)}(),I=!0),t.l_desc=new m(t.dyn_ltree,p),t.d_desc=new m(t.dyn_dtree,g),t.bl_desc=new m(t.bl_tree,v),t.bi_buf=0,t.bi_valid=0,A(t)},e._tr_stored_block=N,e._tr_flush_block=function(t,e,n,r){var i,o,a=0;t.level>0?(2===t.strm.data_type&&(t.strm.data_type=function(t){var e,n=4093624447;for(e=0;e<=31;e++,n>>>=1)if(1&n&&0!==t.dyn_ltree[2*e])return 0;if(0!==t.dyn_ltree[18]||0!==t.dyn_ltree[20]||0!==t.dyn_ltree[26])return 1;for(e=32;e<256;e++)if(0!==t.dyn_ltree[2*e])return 1;return 0}(t)),j(t,t.l_desc),j(t,t.d_desc),a=function(t){var e;for(L(t,t.dyn_ltree,t.l_desc.max_code),L(t,t.dyn_dtree,t.d_desc.max_code),j(t,t.bl_desc),e=18;e>=3&&0===t.bl_tree[2*u[e]+1];e--);return t.opt_len+=3*(e+1)+5+5+4,e}(t),i=t.opt_len+3+7>>>3,(o=t.static_len+3+7>>>3)<=i&&(i=o)):i=o=n+5,n+4<=i&&-1!==e?N(t,e,n,r):4===t.strategy||o===i?(x(t,2+(r?1:0),3),R(t,f,c)):(x(t,4+(r?1:0),3),function(t,e,n,r){var i;for(x(t,e-257,5),x(t,n-1,5),x(t,r-4,4),i=0;i<r;i++)x(t,t.bl_tree[2*u[i]+1],3);P(t,t.dyn_ltree,e-1),P(t,t.dyn_dtree,n-1)}(t,t.l_desc.max_code+1,t.d_desc.max_code+1,a+1),R(t,t.dyn_ltree,t.dyn_dtree)),A(t),r&&O(t)},e._tr_tally=function(t,e,n){return t.pending_buf[t.d_buf+2*t.last_lit]=e>>>8&255,t.pending_buf[t.d_buf+2*t.last_lit+1]=255&e,t.pending_buf[t.l_buf+t.last_lit]=255&n,t.last_lit++,0===e?t.dyn_ltree[2*n]++:(t.matches++,e--,t.dyn_ltree[2*(h[n]+256+1)]++,t.dyn_dtree[2*w(e)]++),t.last_lit===t.lit_bufsize-1},e._tr_align=function(t){x(t,2,3),k(t,256,f),function(t){16===t.bi_valid?(_(t,t.bi_buf),t.bi_buf=0,t.bi_valid=0):t.bi_valid>=8&&(t.pending_buf[t.pending++]=255&t.bi_buf,t.bi_buf>>=8,t.bi_valid-=8)}(t)}},function(t,e,n){"use strict";t.exports=function(t,e){var n,r,i,o,a,s,u,f,c,l,h,d,p,g,v,b,y,m,w,_,x,k,E,S,A;n=t.state,r=t.next_in,S=t.input,i=r+(t.avail_in-5),o=t.next_out,A=t.output,a=o-(e-t.avail_out),s=o+(t.avail_out-257),u=n.dmax,f=n.wsize,c=n.whave,l=n.wnext,h=n.window,d=n.hold,p=n.bits,g=n.lencode,v=n.distcode,b=(1<<n.lenbits)-1,y=(1<<n.distbits)-1;t:do{p<15&&(d+=S[r++]<<p,p+=8,d+=S[r++]<<p,p+=8),m=g[d&b];e:for(;;){if(d>>>=w=m>>>24,p-=w,0===(w=m>>>16&255))A[o++]=65535&m;else{if(!(16&w)){if(0==(64&w)){m=g[(65535&m)+(d&(1<<w)-1)];continue e}if(32&w){n.mode=12;break t}t.msg="invalid literal/length code",n.mode=30;break t}_=65535&m,(w&=15)&&(p<w&&(d+=S[r++]<<p,p+=8),_+=d&(1<<w)-1,d>>>=w,p-=w),p<15&&(d+=S[r++]<<p,p+=8,d+=S[r++]<<p,p+=8),m=v[d&y];n:for(;;){if(d>>>=w=m>>>24,p-=w,!(16&(w=m>>>16&255))){if(0==(64&w)){m=v[(65535&m)+(d&(1<<w)-1)];continue n}t.msg="invalid distance code",n.mode=30;break t}if(x=65535&m,p<(w&=15)&&(d+=S[r++]<<p,(p+=8)<w&&(d+=S[r++]<<p,p+=8)),(x+=d&(1<<w)-1)>u){t.msg="invalid distance too far back",n.mode=30;break t}if(d>>>=w,p-=w,x>(w=o-a)){if((w=x-w)>c&&n.sane){t.msg="invalid distance too far back",n.mode=30;break t}if(k=0,E=h,0===l){if(k+=f-w,w<_){_-=w;do{A[o++]=h[k++]}while(--w);k=o-x,E=A}}else if(l<w){if(k+=f+l-w,(w-=l)<_){_-=w;do{A[o++]=h[k++]}while(--w);if(k=0,l<_){_-=w=l;do{A[o++]=h[k++]}while(--w);k=o-x,E=A}}}else if(k+=l-w,w<_){_-=w;do{A[o++]=h[k++]}while(--w);k=o-x,E=A}for(;_>2;)A[o++]=E[k++],A[o++]=E[k++],A[o++]=E[k++],_-=3;_&&(A[o++]=E[k++],_>1&&(A[o++]=E[k++]))}else{k=o-x;do{A[o++]=A[k++],A[o++]=A[k++],A[o++]=A[k++],_-=3}while(_>2);_&&(A[o++]=A[k++],_>1&&(A[o++]=A[k++]))}break}}break}}while(r<i&&o<s);r-=_=p>>3,d&=(1<<(p-=_<<3))-1,t.next_in=r,t.next_out=o,t.avail_in=r<i?i-r+5:5-(r-i),t.avail_out=o<s?s-o+257:257-(o-s),n.hold=d,n.bits=p}},function(t,e,n){"use strict";var r=n(33),i=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],o=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],a=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],s=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];t.exports=function(t,e,n,u,f,c,l,h){var d,p,g,v,b,y,m,w,_,x=h.bits,k=0,E=0,S=0,A=0,O=0,T=0,M=0,R=0,j=0,L=0,P=null,I=0,N=new r.Buf16(16),C=new r.Buf16(16),B=null,z=0;for(k=0;k<=15;k++)N[k]=0;for(E=0;E<u;E++)N[e[n+E]]++;for(O=x,A=15;A>=1&&0===N[A];A--);if(O>A&&(O=A),0===A)return f[c++]=20971520,f[c++]=20971520,h.bits=1,0;for(S=1;S<A&&0===N[S];S++);for(O<S&&(O=S),R=1,k=1;k<=15;k++)if(R<<=1,(R-=N[k])<0)return-1;if(R>0&&(0===t||1!==A))return-1;for(C[1]=0,k=1;k<15;k++)C[k+1]=C[k]+N[k];for(E=0;E<u;E++)0!==e[n+E]&&(l[C[e[n+E]]++]=E);if(0===t?(P=B=l,y=19):1===t?(P=i,I-=257,B=o,z-=257,y=256):(P=a,B=s,y=-1),L=0,E=0,k=S,b=c,T=O,M=0,g=-1,v=(j=1<<O)-1,1===t&&j>852||2===t&&j>592)return 1;for(;;){m=k-M,l[E]<y?(w=0,_=l[E]):l[E]>y?(w=B[z+l[E]],_=P[I+l[E]]):(w=96,_=0),d=1<<k-M,S=p=1<<T;do{f[b+(L>>M)+(p-=d)]=m<<24|w<<16|_|0}while(0!==p);for(d=1<<k-1;L&d;)d>>=1;if(0!==d?(L&=d-1,L+=d):L=0,E++,0==--N[k]){if(k===A)break;k=e[n+l[E]]}if(k>O&&(L&v)!==g){for(0===M&&(M=O),b+=S,R=1<<(T=k-M);T+M<A&&!((R-=N[T+M])<=0);)T++,R<<=1;if(j+=1<<T,1===t&&j>852||2===t&&j>592)return 1;f[g=L&v]=O<<24|T<<16|b-c|0}}return 0!==L&&(f[b+L]=k-M<<24|64<<16|0),h.bits=O,0}},function(t,e,n){"use strict";var r={};(0,n(33).assign)(r,n(421),n(422),n(129)),t.exports=r},function(t,e,n){"use strict";var r=n(206),i=n(33),o=n(211),a=n(128),s=n(127),u=Object.prototype.toString;function f(t){if(!(this instanceof f))return new f(t);this.options=i.assign({level:-1,method:8,chunkSize:16384,windowBits:15,memLevel:8,strategy:0,to:""},t||{});var e=this.options;e.raw&&e.windowBits>0?e.windowBits=-e.windowBits:e.gzip&&e.windowBits>0&&e.windowBits<16&&(e.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new s,this.strm.avail_out=0;var n=r.deflateInit2(this.strm,e.level,e.method,e.windowBits,e.memLevel,e.strategy);if(0!==n)throw new Error(a[n]);if(e.header&&r.deflateSetHeader(this.strm,e.header),e.dictionary){var c;if(c="string"==typeof e.dictionary?o.string2buf(e.dictionary):"[object ArrayBuffer]"===u.call(e.dictionary)?new Uint8Array(e.dictionary):e.dictionary,0!==(n=r.deflateSetDictionary(this.strm,c)))throw new Error(a[n]);this._dict_set=!0}}function c(t,e){var n=new f(e);if(n.push(t,!0),n.err)throw n.msg||a[n.err];return n.result}f.prototype.push=function(t,e){var n,a,s=this.strm,f=this.options.chunkSize;if(this.ended)return!1;a=e===~~e?e:!0===e?4:0,"string"==typeof t?s.input=o.string2buf(t):"[object ArrayBuffer]"===u.call(t)?s.input=new Uint8Array(t):s.input=t,s.next_in=0,s.avail_in=s.input.length;do{if(0===s.avail_out&&(s.output=new i.Buf8(f),s.next_out=0,s.avail_out=f),1!==(n=r.deflate(s,a))&&0!==n)return this.onEnd(n),this.ended=!0,!1;0!==s.avail_out&&(0!==s.avail_in||4!==a&&2!==a)||("string"===this.options.to?this.onData(o.buf2binstring(i.shrinkBuf(s.output,s.next_out))):this.onData(i.shrinkBuf(s.output,s.next_out)))}while((s.avail_in>0||0===s.avail_out)&&1!==n);return 4===a?(n=r.deflateEnd(this.strm),this.onEnd(n),this.ended=!0,0===n):2!==a||(this.onEnd(0),s.avail_out=0,!0)},f.prototype.onData=function(t){this.chunks.push(t)},f.prototype.onEnd=function(t){0===t&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=i.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg},e.Deflate=f,e.deflate=c,e.deflateRaw=function(t,e){return(e=e||{}).raw=!0,c(t,e)},e.gzip=function(t,e){return(e=e||{}).gzip=!0,c(t,e)}},function(t,e,n){"use strict";var r=n(209),i=n(33),o=n(211),a=n(129),s=n(128),u=n(127),f=n(423),c=Object.prototype.toString;function l(t){if(!(this instanceof l))return new l(t);this.options=i.assign({chunkSize:16384,windowBits:0,to:""},t||{});var e=this.options;e.raw&&e.windowBits>=0&&e.windowBits<16&&(e.windowBits=-e.windowBits,0===e.windowBits&&(e.windowBits=-15)),!(e.windowBits>=0&&e.windowBits<16)||t&&t.windowBits||(e.windowBits+=32),e.windowBits>15&&e.windowBits<48&&0==(15&e.windowBits)&&(e.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new u,this.strm.avail_out=0;var n=r.inflateInit2(this.strm,e.windowBits);if(n!==a.Z_OK)throw new Error(s[n]);if(this.header=new f,r.inflateGetHeader(this.strm,this.header),e.dictionary&&("string"==typeof e.dictionary?e.dictionary=o.string2buf(e.dictionary):"[object ArrayBuffer]"===c.call(e.dictionary)&&(e.dictionary=new Uint8Array(e.dictionary)),e.raw&&(n=r.inflateSetDictionary(this.strm,e.dictionary))!==a.Z_OK))throw new Error(s[n])}function h(t,e){var n=new l(e);if(n.push(t,!0),n.err)throw n.msg||s[n.err];return n.result}l.prototype.push=function(t,e){var n,s,u,f,l,h=this.strm,d=this.options.chunkSize,p=this.options.dictionary,g=!1;if(this.ended)return!1;s=e===~~e?e:!0===e?a.Z_FINISH:a.Z_NO_FLUSH,"string"==typeof t?h.input=o.binstring2buf(t):"[object ArrayBuffer]"===c.call(t)?h.input=new Uint8Array(t):h.input=t,h.next_in=0,h.avail_in=h.input.length;do{if(0===h.avail_out&&(h.output=new i.Buf8(d),h.next_out=0,h.avail_out=d),(n=r.inflate(h,a.Z_NO_FLUSH))===a.Z_NEED_DICT&&p&&(n=r.inflateSetDictionary(this.strm,p)),n===a.Z_BUF_ERROR&&!0===g&&(n=a.Z_OK,g=!1),n!==a.Z_STREAM_END&&n!==a.Z_OK)return this.onEnd(n),this.ended=!0,!1;h.next_out&&(0!==h.avail_out&&n!==a.Z_STREAM_END&&(0!==h.avail_in||s!==a.Z_FINISH&&s!==a.Z_SYNC_FLUSH)||("string"===this.options.to?(u=o.utf8border(h.output,h.next_out),f=h.next_out-u,l=o.buf2string(h.output,u),h.next_out=f,h.avail_out=d-f,f&&i.arraySet(h.output,h.output,u,f,0),this.onData(l)):this.onData(i.shrinkBuf(h.output,h.next_out)))),0===h.avail_in&&0===h.avail_out&&(g=!0)}while((h.avail_in>0||0===h.avail_out)&&n!==a.Z_STREAM_END);return n===a.Z_STREAM_END&&(s=a.Z_FINISH),s===a.Z_FINISH?(n=r.inflateEnd(this.strm),this.onEnd(n),this.ended=!0,n===a.Z_OK):s!==a.Z_SYNC_FLUSH||(this.onEnd(a.Z_OK),h.avail_out=0,!0)},l.prototype.onData=function(t){this.chunks.push(t)},l.prototype.onEnd=function(t){t===a.Z_OK&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=i.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg},e.Inflate=l,e.inflate=h,e.inflateRaw=function(t,e){return(e=e||{}).raw=!0,h(t,e)},e.ungzip=h},function(t,e,n){"use strict";t.exports=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}},function(t,e,n){"use strict";(function(e){var r=n(32),i=r(n(84)),o=r(n(85)),a=r(n(51)),s=r(n(52)),u=n(117),f=n(212),c=function(){function t(e){var n=e.filehandle,r=e.path;if((0,a.default)(this,t),n)this.filehandle=n;else{if(!r)throw new TypeError("either filehandle or path must be defined");this.filehandle=new f(r)}}var n,r,c;return(0,s.default)(t,[{key:"_readLongWithOverflow",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],r=u.fromBytesLE(t.slice(e,e+8),n);if(r.greaterThan(Number.MAX_SAFE_INTEGER)||r.lessThan(Number.MIN_SAFE_INTEGER))throw new TypeError("integer overflow");return r.toNumber()}},{key:"_getIndex",value:function(){return this.index||(this.index=this._readIndex()),this.index}},{key:"_readIndex",value:(c=(0,o.default)(i.default.mark((function t(){var n,r,o,a,s,u,f;return i.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n=e.allocUnsafe(8),t.next=3,this.filehandle.read(n,0,8,0);case 3:if(r=this._readLongWithOverflow(n,0,!0)){t.next=6;break}return t.abrupt("return",[[0,0]]);case 6:if((o=new Array(r+1))[0]=[0,0],!((a=16*r)>Number.MAX_SAFE_INTEGER)){t.next=11;break}throw new TypeError("integer overflow");case 11:return n=e.allocUnsafe(a),t.next=14,this.filehandle.read(n,0,a,8);case 14:for(s=0;s<r;s+=1)u=this._readLongWithOverflow(n,16*s),f=this._readLongWithOverflow(n,16*s+8),o[s+1]=[u,f];return t.abrupt("return",o);case 16:case"end":return t.stop()}}),t,this)}))),function(){return c.apply(this,arguments)})},{key:"getLastBlock",value:(r=(0,o.default)(i.default.mark((function t(){var e;return i.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this._getIndex();case 2:if((e=t.sent).length){t.next=5;break}return t.abrupt("return",void 0);case 5:return t.abrupt("return",e[e.length-1]);case 6:case"end":return t.stop()}}),t,this)}))),function(){return r.apply(this,arguments)})},{key:"getRelevantBlocksForRead",value:(n=(0,o.default)(i.default.mark((function t(e,n){var r,o,a,s,u,f,c,l,h;return i.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(r=n+e,0!==e){t.next=3;break}return t.abrupt("return",[]);case 3:return t.next=5,this._getIndex();case 5:for(o=t.sent,a=[],s=function(t,e){var r=t[1],i=e?e[1]:1/0;return r<=n&&i>n?0:r<n?-1:1},u=0,f=o.length-1,c=Math.floor(o.length/2),l=s(o[c],o[c+1]);0!==l;)l>0?f=c-1:l<0&&(u=c+1),c=Math.ceil((f-u)/2)+u,l=s(o[c],o[c+1]);a.push(o[c]),h=c+1;case 15:if(!(h<o.length)){t.next=22;break}if(a.push(o[h]),!(o[h][1]>=r)){t.next=19;break}return t.abrupt("break",22);case 19:h+=1,t.next=15;break;case 22:return a[a.length-1][1]<r&&a.push([]),t.abrupt("return",a);case 24:case"end":return t.stop()}}),t,this)}))),function(t,e){return n.apply(this,arguments)})}]),t}();t.exports=c}).call(this,n(9).Buffer)},function(t,e,n){t.exports=n(426)},function(t,e,n){var r=n(427);t.exports=r},function(t,e,n){var r=n(428),i=Array.prototype;t.exports=function(t){var e=t.reduce;return t===i||t instanceof Array&&e===i.reduce?r:e}},function(t,e,n){n(429);var r=n(19);t.exports=r("Array").reduce},function(t,e,n){"use strict";var r=n(0),i=n(430).left,o=n(80),a=n(46),s=o("reduce"),u=a("reduce",{1:0});r({target:"Array",proto:!0,forced:!s||!u},{reduce:function(t){return i(this,t,arguments.length,arguments.length>1?arguments[1]:void 0)}})},function(t,e,n){var r=n(14),i=n(18),o=n(69),a=n(28),s=function(t){return function(e,n,s,u){r(n);var f=i(e),c=o(f),l=a(f.length),h=t?l-1:0,d=t?-1:1;if(s<2)for(;;){if(h in c){u=c[h],h+=d;break}if(h+=d,t?h<0:l<=h)throw TypeError("Reduce of empty array with no initial value")}for(;t?h>=0:l>h;h+=d)h in c&&(u=n(u,c[h],h,f));return u}};t.exports={left:s(!1),right:s(!0)}},function(t,e,n){t.exports=n(432)},function(t,e,n){var r=n(433);t.exports=r},function(t,e,n){var r=n(434),i=Function.prototype;t.exports=function(t){var e=t.bind;return t===i||t instanceof Function&&e===i.bind?r:e}},function(t,e,n){n(435);var r=n(19);t.exports=r("Function").bind},function(t,e,n){n(0)({target:"Function",proto:!0},{bind:n(174)})},function(t,e,n){var r=n(109),i=n(47),o=n(215),a=n(216);function s(t){var e,n;function i(e,n){try{var s=t[e](n),u=s.value,f=u instanceof a;r.resolve(f?u.wrapped:u).then((function(t){f?i("return"===e?"return":"next",t):o(s.done?"return":"normal",t)}),(function(t){i("throw",t)}))}catch(t){o("throw",t)}}function o(t,r){switch(t){case"return":e.resolve({value:r,done:!0});break;case"throw":e.reject(r);break;default:e.resolve({value:r,done:!1})}(e=e.next)?i(e.key,e.arg):n=null}this._invoke=function(t,o){return new r((function(r,a){var s={key:t,arg:o,resolve:r,reject:a,next:null};n?n=n.next=s:(e=n=s,i(t,o))}))},"function"!=typeof t.return&&(this.return=void 0)}s.prototype["function"==typeof i&&o||"@@asyncIterator"]=function(){return this},s.prototype.next=function(t){return this._invoke("next",t)},s.prototype.throw=function(t){return this._invoke("throw",t)},s.prototype.return=function(t){return this._invoke("return",t)},t.exports=s,t.exports.default=t.exports,t.exports.__esModule=!0},function(t,e,n){var r=n(438);t.exports=r},function(t,e,n){n(164);var r=n(79);t.exports=r.f("asyncIterator")},function(t,e,n){var r=n(9).Buffer,i=[0,1996959894,3993919788,2567524794,124634137,1886057615,3915621685,2657392035,249268274,2044508324,3772115230,2547177864,162941995,2125561021,3887607047,2428444049,498536548,1789927666,4089016648,2227061214,450548861,1843258603,4107580753,2211677639,325883990,1684777152,4251122042,2321926636,335633487,1661365465,4195302755,2366115317,997073096,1281953886,3579855332,2724688242,1006888145,1258607687,3524101629,2768942443,901097722,1119000684,3686517206,2898065728,853044451,1172266101,3705015759,2882616665,651767980,1373503546,3369554304,3218104598,565507253,1454621731,3485111705,3099436303,671266974,1594198024,3322730930,2970347812,795835527,1483230225,3244367275,3060149565,1994146192,31158534,2563907772,4023717930,1907459465,112637215,2680153253,3904427059,2013776290,251722036,2517215374,3775830040,2137656763,141376813,2439277719,3865271297,1802195444,476864866,2238001368,4066508878,1812370925,453092731,2181625025,4111451223,1706088902,314042704,2344532202,4240017532,1658658271,366619977,2362670323,4224994405,1303535960,984961486,2747007092,3569037538,1256170817,1037604311,2765210733,3554079995,1131014506,879679996,2909243462,3663771856,1141124467,855842277,2852801631,3708648649,1342533948,654459306,3188396048,3373015174,1466479909,544179635,3110523913,3462522015,1591671054,702138776,2966460450,3352799412,1504918807,783551873,3082640443,3233442989,3988292384,2596254646,62317068,1957810842,3939845945,2647816111,81470997,1943803523,3814918930,2489596804,225274430,2053790376,3826175755,2466906013,167816743,2097651377,4027552580,2265490386,503444072,1762050814,4150417245,2154129355,426522225,1852507879,4275313526,2312317920,282753626,1742555852,4189708143,2394877945,397917763,1622183637,3604390888,2714866558,953729732,1340076626,3518719985,2797360999,1068828381,1219638859,3624741850,2936675148,906185462,1090812512,3747672003,2825379669,829329135,1181335161,3412177804,3160834842,628085408,1382605366,3423369109,3138078467,570562233,1426400815,3317316542,2998733608,733239954,1555261956,3268935591,3050360625,752459403,1541320221,2607071920,3965973030,1969922972,40735498,2617837225,3943577151,1913087877,83908371,2512341634,3803740692,2075208622,213261112,2463272603,3855990285,2094854071,198958881,2262029012,4057260610,1759359992,534414190,2176718541,4139329115,1873836001,414664567,2282248934,4279200368,1711684554,285281116,2405801727,4167216745,1634467795,376229701,2685067896,3608007406,1308918612,956543938,2808555105,3495958263,1231636301,1047427035,2932959818,3654703836,1088359270,936918e3,2847714899,3736837829,1202900863,817233897,3183342108,3401237130,1404277552,615818150,3134207493,3453421203,1423857449,601450431,3009837614,3294710456,1567103746,711928724,3020668471,3272380065,1510334235,755167117];function o(t){if(r.isBuffer(t))return t;var e="function"==typeof r.alloc&&"function"==typeof r.from;if("number"==typeof t)return e?r.alloc(t):new r(t);if("string"==typeof t)return e?r.from(t):new r(t);throw new Error("input must be buffer, number, or string, received "+typeof t)}function a(t){var e=o(4);return e.writeInt32BE(t,0),e}function s(t,e){t=o(t),r.isBuffer(e)&&(e=e.readUInt32BE(0));for(var n=-1^~~e,a=0;a<t.length;a++)n=i[255&(n^t[a])]^n>>>8;return-1^n}function u(){return a(s.apply(null,arguments))}"undefined"!=typeof Int32Array&&(i=new Int32Array(i)),u.signed=function(){return s.apply(null,arguments)},u.unsigned=function(){return s.apply(null,arguments)>>>0},t.exports=u},function(t,e,n){t.exports="function"==typeof Object.entries?Object.entries:n(441)},function(t,e,n){"use strict";var r=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i=function(t,e){return Object.prototype.propertyIsEnumerable.call(t,e)};t.exports=function(t){if(null==t)throw new TypeError("Cannot convert undefined or null to object");var e=[];for(var n in t)r(t,n)&&i(t,n)&&e.push([n,t[n]]);return e}},function(t,e,n){"use strict";var r=n(87);Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var i=r(n(130)),o=r(n(131)),a=r(n(132)),s=r(n(133)),u=r(n(134)),f=(n(210),null),c=f,l=f,h=function(){function t(e){(0,a.default)(this,t),(0,u.default)(this,"fd",void 0),(0,u.default)(this,"filename",void 0),this.filename=e}var e,n,r;return(0,s.default)(t,[{key:"getFd",value:function(){return this.fd||(this.fd=c(this.filename,"r")),this.fd}},{key:"read",value:(r=(0,o.default)(i.default.mark((function t(e){var n,r,o,a,s,u=arguments;return i.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n=u.length>1&&void 0!==u[1]?u[1]:0,r=u.length>2?u[2]:void 0,o=u.length>3&&void 0!==u[3]?u[3]:0,a=Math.min(e.length-n,r),t.t0=null,t.next=7,this.getFd();case 7:return t.t1=t.sent,t.t2=e,t.t3=n,t.t4=a,t.t5=o,t.next=14,(0,t.t0)(t.t1,t.t2,t.t3,t.t4,t.t5);case 14:return s=t.sent,t.abrupt("return",{bytesRead:s,buffer:e});case 16:case"end":return t.stop()}}),t,this)}))),function(t){return r.apply(this,arguments)})},{key:"readFile",value:(n=(0,o.default)(i.default.mark((function t(e){return i.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",l(this.filename,e));case 1:case"end":return t.stop()}}),t,this)}))),function(t){return n.apply(this,arguments)})},{key:"stat",value:(e=(0,o.default)(i.default.mark((function t(){return i.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.t0=null,t.next=3,this.getFd();case 3:return t.t1=t.sent,t.abrupt("return",(0,t.t0)(t.t1));case 5:case"end":return t.stop()}}),t,this)}))),function(){return e.apply(this,arguments)})}]),t}();e.default=h},function(t,e,n){"use strict";(function(t){var r=n(87);Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var i=r(n(130)),o=r(n(131)),a=r(n(132)),s=r(n(133)),u=r(n(134)),f=r(n(444)),c=n(220);function l(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function h(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?l(Object(n),!0).forEach((function(e){(0,u.default)(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}var d="undefined"!=typeof window?window:"undefined"!=typeof self?self:{fetch:void 0},p=function(){var e,n,r,l;function p(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if((0,a.default)(this,p),(0,u.default)(this,"url",void 0),(0,u.default)(this,"_stat",void 0),(0,u.default)(this,"fetch",void 0),(0,u.default)(this,"baseOverrides",{}),this.url=t,t.startsWith("file://")){var n=(0,f.default)(t);if(!n)throw new TypeError("invalid file url");var r=new c.LocalFile(n);return this.read=r.read.bind(r),this.readFile=r.readFile.bind(r),this.stat=r.stat.bind(r),void(this.fetch=function(){})}var i=e.fetch||d.fetch&&d.fetch.bind(d);if(!i)throw new TypeError("no fetch function supplied, and none found in global environment");e.overrides&&(this.baseOverrides=e.overrides),this.fetch=i}return(0,s.default)(p,[{key:"getBufferFromResponse",value:(e=(0,o.default)(i.default.mark((function e(n){var r;return i.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if("function"!=typeof n.buffer){e.next=4;break}return e.abrupt("return",n.buffer());case 4:if("function"!=typeof n.arrayBuffer){e.next=11;break}return e.next=7,n.arrayBuffer();case 7:return r=e.sent,e.abrupt("return",t.from(r));case 11:throw new TypeError("invalid HTTP response object, has no buffer method, and no arrayBuffer method");case 12:case"end":return e.stop()}}),e)}))),function(t){return e.apply(this,arguments)})}]),(0,s.default)(p,[{key:"read",value:(l=(0,o.default)(i.default.mark((function t(e){var n,r,o,a,s,u,f,c,l,d,p,g,v,b,y=arguments;return i.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n=y.length>1&&void 0!==y[1]?y[1]:0,r=y.length>2?y[2]:void 0,o=y.length>3&&void 0!==y[3]?y[3]:0,a=y.length>4&&void 0!==y[4]?y[4]:{},s=a.headers,u=void 0===s?{}:s,f=a.signal,c=a.overrides,l=void 0===c?{}:c,r<1/0?u.range="bytes=".concat(o,"-").concat(o+r):r===1/0&&0!==o&&(u.range="bytes=".concat(o,"-")),t.next=8,this.fetch(this.url,h(h(h({},this.baseOverrides),l),{},{headers:h(h(h({},u),l.headers),this.baseOverrides.headers),method:"GET",redirect:"follow",mode:"cors",signal:f}));case 8:if((200!==(d=t.sent).status||0!==o)&&206!==d.status){t.next=18;break}return t.next=12,this.getBufferFromResponse(d);case 12:return p=t.sent,g=p.copy(e,n,0,Math.min(r,p.length)),v=d.headers.get("content-range"),(b=/\/(\d+)$/.exec(v||""))&&b[1]&&(this._stat={size:parseInt(b[1],10)}),t.abrupt("return",{bytesRead:g,buffer:e});case 18:throw new Error("HTTP ".concat(d.status," fetching ").concat(this.url));case 19:case"end":return t.stop()}}),t,this)}))),function(t){return l.apply(this,arguments)})},{key:"readFile",value:(r=(0,o.default)(i.default.mark((function t(){var e,n,r,o,a,s,u,f,c,l,d=arguments;return i.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return"string"==typeof(e=d.length>0&&void 0!==d[0]?d[0]:{})?(n=e,r={}):(n=e.encoding,delete(r=e).encoding),a=(o=r).headers,s=void 0===a?{}:a,u=o.signal,f=o.overrides,c=void 0===f?{}:f,t.next=5,this.fetch(this.url,h(h({headers:s,method:"GET",redirect:"follow",mode:"cors",signal:u},this.baseOverrides),c));case 5:if(200===(l=t.sent).status){t.next=8;break}throw Object.assign(new Error("HTTP ".concat(l.status," fetching ").concat(this.url)),{status:l.status});case 8:if("utf8"!==n){t.next=10;break}return t.abrupt("return",l.text());case 10:if(!n){t.next=12;break}throw new Error("unsupported encoding: ".concat(n));case 12:return t.abrupt("return",this.getBufferFromResponse(l));case 13:case"end":return t.stop()}}),t,this)}))),function(){return r.apply(this,arguments)})},{key:"stat",value:(n=(0,o.default)(i.default.mark((function e(){var n;return i.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(this._stat){e.next=6;break}return n=t.allocUnsafe(10),e.next=4,this.read(n,0,10,0);case 4:if(this._stat){e.next=6;break}throw new Error("unable to determine size of file at ".concat(this.url));case 6:return e.abrupt("return",this._stat);case 7:case"end":return e.stop()}}),e,this)}))),function(){return n.apply(this,arguments)})}]),p}();e.default=p}).call(this,n(9).Buffer)},function(t,e,n){"use strict";const r=n(445);t.exports=function(t){if("string"!=typeof t||t.length<=7||"file://"!==t.substring(0,7))throw new TypeError("must pass in a file:// URI to convert to a file path");const e=decodeURI(t.substring(7)),n=e.indexOf("/");let i=e.substring(0,n),o=e.substring(n+1);return"localhost"===i&&(i=""),i&&(i=r.sep+r.sep+i),o=o.replace(/^(.+)\|/,"$1:"),"\\"===r.sep&&(o=o.replace(/\//g,"\\")),/^.+:/.test(o)||(o=r.sep+o),i+o}},function(t,e,n){(function(t){function n(t,e){for(var n=0,r=t.length-1;r>=0;r--){var i=t[r];"."===i?t.splice(r,1):".."===i?(t.splice(r,1),n++):n&&(t.splice(r,1),n--)}if(e)for(;n--;n)t.unshift("..");return t}function r(t,e){if(t.filter)return t.filter(e);for(var n=[],r=0;r<t.length;r++)e(t[r],r,t)&&n.push(t[r]);return n}e.resolve=function(){for(var e="",i=!1,o=arguments.length-1;o>=-1&&!i;o--){var a=o>=0?arguments[o]:t.cwd();if("string"!=typeof a)throw new TypeError("Arguments to path.resolve must be strings");a&&(e=a+"/"+e,i="/"===a.charAt(0))}return(i?"/":"")+(e=n(r(e.split("/"),(function(t){return!!t})),!i).join("/"))||"."},e.normalize=function(t){var o=e.isAbsolute(t),a="/"===i(t,-1);return(t=n(r(t.split("/"),(function(t){return!!t})),!o).join("/"))||o||(t="."),t&&a&&(t+="/"),(o?"/":"")+t},e.isAbsolute=function(t){return"/"===t.charAt(0)},e.join=function(){var t=Array.prototype.slice.call(arguments,0);return e.normalize(r(t,(function(t,e){if("string"!=typeof t)throw new TypeError("Arguments to path.join must be strings");return t})).join("/"))},e.relative=function(t,n){function r(t){for(var e=0;e<t.length&&""===t[e];e++);for(var n=t.length-1;n>=0&&""===t[n];n--);return e>n?[]:t.slice(e,n-e+1)}t=e.resolve(t).substr(1),n=e.resolve(n).substr(1);for(var i=r(t.split("/")),o=r(n.split("/")),a=Math.min(i.length,o.length),s=a,u=0;u<a;u++)if(i[u]!==o[u]){s=u;break}var f=[];for(u=s;u<i.length;u++)f.push("..");return(f=f.concat(o.slice(s))).join("/")},e.sep="/",e.delimiter=":",e.dirname=function(t){if("string"!=typeof t&&(t+=""),0===t.length)return".";for(var e=t.charCodeAt(0),n=47===e,r=-1,i=!0,o=t.length-1;o>=1;--o)if(47===(e=t.charCodeAt(o))){if(!i){r=o;break}}else i=!1;return-1===r?n?"/":".":n&&1===r?"/":t.slice(0,r)},e.basename=function(t,e){var n=function(t){"string"!=typeof t&&(t+="");var e,n=0,r=-1,i=!0;for(e=t.length-1;e>=0;--e)if(47===t.charCodeAt(e)){if(!i){n=e+1;break}}else-1===r&&(i=!1,r=e+1);return-1===r?"":t.slice(n,r)}(t);return e&&n.substr(-1*e.length)===e&&(n=n.substr(0,n.length-e.length)),n},e.extname=function(t){"string"!=typeof t&&(t+="");for(var e=-1,n=0,r=-1,i=!0,o=0,a=t.length-1;a>=0;--a){var s=t.charCodeAt(a);if(47!==s)-1===r&&(i=!1,r=a+1),46===s?-1===e?e=a:1!==o&&(o=1):-1!==e&&(o=-1);else if(!i){n=a+1;break}}return-1===e||-1===r||0===o||1===o&&e===r-1&&e===n+1?"":t.slice(e,r)};var i="b"==="ab".substr(-1)?function(t,e,n){return t.substr(e,n)}:function(t,e,n){return e<0&&(e=t.length+e),t.substr(e,n)}}).call(this,n(22))},function(t,e,n){"use strict";(function(t){var r=n(87);Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var i=r(n(130)),o=r(n(131)),a=r(n(132)),s=r(n(133)),u=r(n(134));function f(t){var e=new FileReader;return new Promise((function(n,r){e.onerror=function(){e.abort(),r(new Error("problem reading blob"))},e.onabort=function(){r(new Error("blob reading was aborted"))},e.onload=function(){e.result&&"string"!=typeof e.result?n(e.result):r(new Error("unknown error reading blob"))},e.readAsArrayBuffer(t)}))}function c(t){var e=new FileReader;return new Promise((function(n,r){e.onerror=function(){e.abort(),r(new Error("problem reading blob"))},e.onabort=function(){r(new Error("blob reading was aborted"))},e.onload=function(){e.result&&"string"==typeof e.result?n(e.result):r(new Error("unknown error reading blob"))},e.readAsText(t)}))}var l=function(){function e(t){(0,a.default)(this,e),(0,u.default)(this,"blob",void 0),(0,u.default)(this,"size",void 0),this.blob=t,this.size=t.size}var n,r,l;return(0,s.default)(e,[{key:"read",value:(l=(0,o.default)(i.default.mark((function e(n){var r,o,a,s,u,c,l,h,d=arguments;return i.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(r=d.length>1&&void 0!==d[1]?d[1]:0,o=d.length>2?d[2]:void 0,a=d.length>3&&void 0!==d[3]?d[3]:0,o){e.next=5;break}return e.abrupt("return",{bytesRead:0,buffer:n});case 5:return u=(s=a)+o,e.next=9,f(this.blob.slice(s,u));case 9:return c=e.sent,l=t.from(c),h=l.copy(n,r),e.abrupt("return",{bytesRead:h,buffer:l});case 13:case"end":return e.stop()}}),e,this)}))),function(t){return l.apply(this,arguments)})},{key:"readFile",value:(r=(0,o.default)(i.default.mark((function e(n){var r,o;return i.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if("utf8"!==(r="string"==typeof n?n:n&&n.encoding)){e.next=3;break}return e.abrupt("return",c(this.blob));case 3:if(!r){e.next=5;break}throw new Error("unsupported encoding: ".concat(r));case 5:return e.next=7,f(this.blob);case 7:return o=e.sent,e.abrupt("return",t.from(o));case 9:case"end":return e.stop()}}),e,this)}))),function(t){return r.apply(this,arguments)})},{key:"stat",value:(n=(0,o.default)(i.default.mark((function t(){return i.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",{size:this.size});case 1:case"end":return t.stop()}}),t,this)}))),function(){return n.apply(this,arguments)})}]),e}();e.default=l}).call(this,n(9).Buffer)},function(t,e,n){},function(t,e,n){t.exports=n(449)},function(t,e,n){var r=n(450);t.exports=r},function(t,e,n){var r=n(451),i=RegExp.prototype;t.exports=function(t){return(t===i||t instanceof RegExp)&&!("flags"in t)?r(t):t.flags}},function(t,e,n){n(452);var r=n(453);t.exports=function(t){return r.call(t)}},function(t,e){},function(t,e,n){"use strict";var r=n(11);t.exports=function(){var t=r(this),e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.dotAll&&(e+="s"),t.unicode&&(e+="u"),t.sticky&&(e+="y"),e}},function(t,e,n){t.exports=n(455)},function(t,e,n){var r=n(456);t.exports=r},function(t,e,n){n(457);var r=n(1);t.exports=r.parseInt},function(t,e,n){var r=n(0),i=n(458);r({global:!0,forced:parseInt!=i},{parseInt:i})},function(t,e,n){var r=n(2),i=n(459).trim,o=n(222),a=r.parseInt,s=/^[+-]?0[Xx]/,u=8!==a(o+"08")||22!==a(o+"0x16");t.exports=u?function(t,e){var n=i(String(t));return a(n,e>>>0||(s.test(n)?16:10))}:a},function(t,e,n){var r=n(54),i="["+n(222)+"]",o=RegExp("^"+i+i+"*"),a=RegExp(i+i+"*$"),s=function(t){return function(e){var n=String(r(e));return 1&t&&(n=n.replace(o,"")),2&t&&(n=n.replace(a,"")),n}};t.exports={start:s(1),end:s(2),trim:s(3)}},function(t,e,n){"use strict";n(12)(e,"__esModule",{value:!0}),e.default=void 0;e.default={BAM_FPAIRED:1,BAM_FPROPER_PAIR:2,BAM_FUNMAP:4,BAM_FMUNMAP:8,BAM_FREVERSE:16,BAM_FMREVERSE:32,BAM_FREAD1:64,BAM_FREAD2:128,BAM_FSECONDARY:256,BAM_FQCFAIL:512,BAM_FDUP:1024,BAM_FSUPPLEMENTARY:2048}},function(t,e,n){var r=n(175),i=n(462),o=n(176),a=n(179);t.exports=function(t){return r(t)||i(t)||o(t)||a()},t.exports.default=t.exports,t.exports.__esModule=!0},function(t,e,n){var r=n(47),i=n(60),o=n(178);t.exports=function(t){if(void 0!==r&&null!=i(t)||null!=t["@@iterator"])return o(t)},t.exports.default=t.exports,t.exports.__esModule=!0},function(t,e,n){"use strict";(function(t){var r=n(197),i=n(15);n(12)(e,"__esModule",{value:!0}),e.default=void 0;var o=i(n(464)),a=i(n(474)),s=i(n(62)),u=i(n(120)),f=i(n(12)),c=i(n(102)),l=i(n(103)),h=i(n(104)),d=i(n(105)),p=i(n(81)),g=i(n(106)),v=i(n(36)),b=i(n(61)),y=i(n(48)),m=i(n(64)),w=i(n(50)),_=i(n(30)),x=i(n(31)),k=i(n(115)),E=i(n(112)),S=i(n(113)),A=i(n(116)),O=i(n(29)),T=i(n(49)),M=i(n(214)),R=i(n(217)),j=i(n(219)),L=i(n(218)),P=r(n(213));n(482);var I=n(122),N=n(223);function C(t,e){var n=(0,p.default)(t);if(d.default){var r=(0,d.default)(t);e&&(r=(0,b.default)(r).call(r,(function(e){return(0,h.default)(t,e).enumerable}))),n.push.apply(n,r)}return n}function B(t){for(var e=1;e<arguments.length;e++){var n,r=null!=arguments[e]?arguments[e]:{};if(e%2)(0,v.default)(n=C(Object(r),!0)).call(n,(function(e){(0,O.default)(t,e,r[e])}));else if(l.default)(0,c.default)(t,(0,l.default)(r));else{var i;(0,v.default)(i=C(Object(r))).call(i,(function(e){(0,f.default)(t,e,(0,h.default)(r,e))}))}}return t}function z(t){var e=function(){if("undefined"==typeof Reflect||!g.default)return!1;if(g.default.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call((0,g.default)(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=(0,A.default)(t);if(e){var i=(0,A.default)(this).constructor;n=(0,g.default)(r,arguments,i)}else n=r.apply(this,arguments);return(0,S.default)(this,n)}}function F(t,e){return U.apply(this,arguments)}function U(){return(U=(0,T.default)(y.default.mark((function e(n,r){var i;return y.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,u.default.all((0,s.default)(n).call(n,function(){var e=(0,T.default)(y.default.mark((function e(n){var i,s,u,f;return y.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(i=n.url,s=n.headers,!(0,a.default)(i).call(i,"data:")){e.next=5;break}return e.abrupt("return",t.from(i.split(",")[1],"base64"));case 5:return s.referer,u=(0,o.default)(s,["referer"]),e.next=8,fetch(i,B(B({},r),{},{headers:B(B({},r.headers),u)}));case 8:if((f=e.sent).ok){e.next=11;break}throw new Error("Failed to fetch ".concat(f.statusText));case 11:return e.t0=t,e.next=14,f.arrayBuffer();case 14:return e.t1=e.sent,e.abrupt("return",e.t0.from.call(e.t0,e.t1));case 16:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}()));case 2:return i=e.sent,e.t0=(0,w.default)(t),e.t1=t,e.next=7,u.default.all((0,s.default)(i).call(i,(function(t){return(0,I.unzip)(t)})));case 7:return e.t2=e.sent,e.abrupt("return",e.t0.call.call(e.t0,e.t1,e.t2));case 9:case"end":return e.stop()}}),e)})))).apply(this,arguments)}var D=function(t){(0,E.default)(i,t);var e,n,r=z(i);function i(t){var e;return(0,_.default)(this,i),e=r.call(this,{bamFilehandle:"?",baiFilehandle:"?"}),(0,O.default)((0,k.default)(e),"baseUrl",void 0),(0,O.default)((0,k.default)(e),"trackId",void 0),e.baseUrl=t.baseUrl,e.trackId=t.trackId,e}return(0,x.default)(i,[{key:"streamRecordsForRange",value:function(t,e,n){var r=this,i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{viewAsPairs:!1,pairAcrossChr:!1,maxInsertSize:2e5};return(0,M.default)(y.default.mark((function o(){var a,s,u,f,c,l,h,d,p,g,v,b;return y.default.wrap((function(o){for(;;)switch(o.prev=o.next){case 0:return l=(0,w.default)(a="".concat(r.baseUrl,"/")).call(a,r.trackId),h=(0,w.default)(s=(0,w.default)(u=(0,w.default)(f="".concat(l,"?referenceName=")).call(f,t,"&start=")).call(u,e,"&end=")).call(s,n,"&format=BAM"),d=r.chrToIndex&&r.chrToIndex[t],o.next=5,(0,R.default)(fetch(h,B({},i)));case 5:if((p=o.sent).ok){o.next=8;break}throw new Error(p.statusText);case 8:return o.next=10,(0,R.default)(p.json());case 10:return g=o.sent,o.next=13,(0,R.default)(F((0,m.default)(c=g.htsget.urls).call(c,1),i));case 13:return v=o.sent,b={buffer:v,chunk:{minv:{dataPosition:0}},toString:function(){var r,i;return(0,w.default)(r=(0,w.default)(i="".concat(t,"_")).call(i,e,"_")).call(r,n)}},o.delegateYield((0,L.default)((0,j.default)(r._fetchChunkFeatures([b],d,e,n,i)),R.default),"t0",16);case 16:case"end":return o.stop()}}),o)})))()}},{key:"_readChunk",value:(n=(0,T.default)(y.default.mark((function t(e){var n,r,i;return y.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n=e.chunk,r=n.buffer,i=n.chunk,t.abrupt("return",{data:r,cpositions:null,dpositions:null,chunk:i});case 3:case"end":return t.stop()}}),t)}))),function(t){return n.apply(this,arguments)})},{key:"getHeader",value:(e=(0,T.default)(y.default.mark((function t(){var e,n,r,i,o,a,s,u,f,c,l,h,d=arguments;return y.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n=d.length>0&&void 0!==d[0]?d[0]:{},r=(0,w.default)(e="".concat(this.baseUrl,"/")).call(e,this.trackId,"?referenceName=na&class=header"),t.next=4,fetch(r,n);case 4:if((i=t.sent).ok){t.next=7;break}throw new Error("Failed to fetch ".concat(i.statusText));case 7:return t.next=9,i.json();case 9:return o=t.sent,t.next=12,F(o.htsget.urls,n);case 12:if((a=t.sent).readInt32LE(0)===P.BAM_MAGIC){t.next=15;break}throw new Error("Not a BAM file");case 15:return s=a.readInt32LE(4),u=a.toString("utf8",8,8+s),f=(0,N.parseHeaderText)(u),c=[],l={},h=(0,b.default)(f).call(f,(function(t){return"SQ"===t.tag})),(0,v.default)(h).call(h,(function(t,e){var n;(0,v.default)(n=t.data).call(n,(function(t){if("SN"===t.tag){var n=t.value;l[n]=e,c[e]=n}}))})),this.chrToIndex=l,this.indexToChr=c,t.abrupt("return",f);case 25:case"end":return t.stop()}}),t,this)}))),function(){return e.apply(this,arguments)})}]),i}(P.default);e.default=D}).call(this,n(9).Buffer)},function(t,e,n){var r=n(465),i=n(224),o=n(471);t.exports=function(t,e){if(null==t)return{};var n,a,s=o(t,e);if(r){var u=r(t);for(a=0;a<u.length;a++)n=u[a],i(e).call(e,n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(s[n]=t[n])}return s},t.exports.default=t.exports,t.exports.__esModule=!0},function(t,e,n){t.exports=n(466)},function(t,e,n){var r=n(172);t.exports=r},function(t,e,n){var r=n(468);t.exports=r},function(t,e,n){var r=n(469),i=Array.prototype;t.exports=function(t){var e=t.indexOf;return t===i||t instanceof Array&&e===i.indexOf?r:e}},function(t,e,n){n(470);var r=n(19);t.exports=r("Array").indexOf},function(t,e,n){"use strict";var r=n(0),i=n(154).indexOf,o=n(80),a=n(46),s=[].indexOf,u=!!s&&1/[1].indexOf(1,-0)<0,f=o("indexOf"),c=a("indexOf",{ACCESSORS:!0,1:0});r({target:"Array",proto:!0,forced:u||!f||!c},{indexOf:function(t){return u?s.apply(this,arguments)||0:i(this,t,arguments.length>1?arguments[1]:void 0)}})},function(t,e,n){var r=n(472),i=n(224);t.exports=function(t,e){if(null==t)return{};var n,o,a={},s=r(t);for(o=0;o<s.length;o++)n=s[o],i(e).call(e,n)>=0||(a[n]=t[n]);return a},t.exports.default=t.exports,t.exports.__esModule=!0},function(t,e,n){t.exports=n(473)},function(t,e,n){var r=n(173);t.exports=r},function(t,e,n){t.exports=n(475)},function(t,e,n){var r=n(476);t.exports=r},function(t,e,n){var r=n(477),i=String.prototype;t.exports=function(t){var e=t.startsWith;return"string"==typeof t||t===i||t instanceof String&&e===i.startsWith?r:e}},function(t,e,n){n(478);var r=n(19);t.exports=r("String").startsWith},function(t,e,n){"use strict";var r,i=n(0),o=n(40).f,a=n(28),s=n(479),u=n(54),f=n(481),c=n(24),l="".startsWith,h=Math.min,d=f("startsWith");i({target:"String",proto:!0,forced:!!(c||d||(r=o(String.prototype,"startsWith"),!r||r.writable))&&!d},{startsWith:function(t){var e=String(u(this));s(t);var n=a(h(arguments.length>1?arguments[1]:void 0,e.length)),r=String(t);return l?l.call(e,r,n):e.slice(n,n+r.length)===r}})},function(t,e,n){var r=n(480);t.exports=function(t){if(r(t))throw TypeError("The method doesn't accept regular expressions");return t}},function(t,e,n){var r=n(7),i=n(34),o=n(4)("match");t.exports=function(t){var e;return r(t)&&(void 0!==(e=t[o])?!!e:"RegExp"==i(t))}},function(t,e,n){var r=n(4)("match");t.exports=function(t){var e=/./;try{"/./"[t](e)}catch(n){try{return e[r]=!1,"/./"[t](e)}catch(t){}}return!1}},function(t,e){!function(t){!function(e){var n="URLSearchParams"in t,r="Symbol"in t&&"iterator"in Symbol,i="FileReader"in t&&"Blob"in t&&function(){try{return new Blob,!0}catch(t){return!1}}(),o="FormData"in t,a="ArrayBuffer"in t;if(a)var s=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],u=ArrayBuffer.isView||function(t){return t&&s.indexOf(Object.prototype.toString.call(t))>-1};function f(t){if("string"!=typeof t&&(t=String(t)),/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(t))throw new TypeError("Invalid character in header field name");return t.toLowerCase()}function c(t){return"string"!=typeof t&&(t=String(t)),t}function l(t){var e={next:function(){var e=t.shift();return{done:void 0===e,value:e}}};return r&&(e[Symbol.iterator]=function(){return e}),e}function h(t){this.map={},t instanceof h?t.forEach((function(t,e){this.append(e,t)}),this):Array.isArray(t)?t.forEach((function(t){this.append(t[0],t[1])}),this):t&&Object.getOwnPropertyNames(t).forEach((function(e){this.append(e,t[e])}),this)}function d(t){if(t.bodyUsed)return Promise.reject(new TypeError("Already read"));t.bodyUsed=!0}function p(t){return new Promise((function(e,n){t.onload=function(){e(t.result)},t.onerror=function(){n(t.error)}}))}function g(t){var e=new FileReader,n=p(e);return e.readAsArrayBuffer(t),n}function v(t){if(t.slice)return t.slice(0);var e=new Uint8Array(t.byteLength);return e.set(new Uint8Array(t)),e.buffer}function b(){return this.bodyUsed=!1,this._initBody=function(t){var e;this._bodyInit=t,t?"string"==typeof t?this._bodyText=t:i&&Blob.prototype.isPrototypeOf(t)?this._bodyBlob=t:o&&FormData.prototype.isPrototypeOf(t)?this._bodyFormData=t:n&&URLSearchParams.prototype.isPrototypeOf(t)?this._bodyText=t.toString():a&&i&&((e=t)&&DataView.prototype.isPrototypeOf(e))?(this._bodyArrayBuffer=v(t.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):a&&(ArrayBuffer.prototype.isPrototypeOf(t)||u(t))?this._bodyArrayBuffer=v(t):this._bodyText=t=Object.prototype.toString.call(t):this._bodyText="",this.headers.get("content-type")||("string"==typeof t?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):n&&URLSearchParams.prototype.isPrototypeOf(t)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},i&&(this.blob=function(){var t=d(this);if(t)return t;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?d(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(g)}),this.text=function(){var t,e,n,r=d(this);if(r)return r;if(this._bodyBlob)return t=this._bodyBlob,e=new FileReader,n=p(e),e.readAsText(t),n;if(this._bodyArrayBuffer)return Promise.resolve(function(t){for(var e=new Uint8Array(t),n=new Array(e.length),r=0;r<e.length;r++)n[r]=String.fromCharCode(e[r]);return n.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},o&&(this.formData=function(){return this.text().then(w)}),this.json=function(){return this.text().then(JSON.parse)},this}h.prototype.append=function(t,e){t=f(t),e=c(e);var n=this.map[t];this.map[t]=n?n+", "+e:e},h.prototype.delete=function(t){delete this.map[f(t)]},h.prototype.get=function(t){return t=f(t),this.has(t)?this.map[t]:null},h.prototype.has=function(t){return this.map.hasOwnProperty(f(t))},h.prototype.set=function(t,e){this.map[f(t)]=c(e)},h.prototype.forEach=function(t,e){for(var n in this.map)this.map.hasOwnProperty(n)&&t.call(e,this.map[n],n,this)},h.prototype.keys=function(){var t=[];return this.forEach((function(e,n){t.push(n)})),l(t)},h.prototype.values=function(){var t=[];return this.forEach((function(e){t.push(e)})),l(t)},h.prototype.entries=function(){var t=[];return this.forEach((function(e,n){t.push([n,e])})),l(t)},r&&(h.prototype[Symbol.iterator]=h.prototype.entries);var y=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function m(t,e){var n,r,i=(e=e||{}).body;if(t instanceof m){if(t.bodyUsed)throw new TypeError("Already read");this.url=t.url,this.credentials=t.credentials,e.headers||(this.headers=new h(t.headers)),this.method=t.method,this.mode=t.mode,this.signal=t.signal,i||null==t._bodyInit||(i=t._bodyInit,t.bodyUsed=!0)}else this.url=String(t);if(this.credentials=e.credentials||this.credentials||"same-origin",!e.headers&&this.headers||(this.headers=new h(e.headers)),this.method=(n=e.method||this.method||"GET",r=n.toUpperCase(),y.indexOf(r)>-1?r:n),this.mode=e.mode||this.mode||null,this.signal=e.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&i)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(i)}function w(t){var e=new FormData;return t.trim().split("&").forEach((function(t){if(t){var n=t.split("="),r=n.shift().replace(/\+/g," "),i=n.join("=").replace(/\+/g," ");e.append(decodeURIComponent(r),decodeURIComponent(i))}})),e}function _(t,e){e||(e={}),this.type="default",this.status=void 0===e.status?200:e.status,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in e?e.statusText:"OK",this.headers=new h(e.headers),this.url=e.url||"",this._initBody(t)}m.prototype.clone=function(){return new m(this,{body:this._bodyInit})},b.call(m.prototype),b.call(_.prototype),_.prototype.clone=function(){return new _(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new h(this.headers),url:this.url})},_.error=function(){var t=new _(null,{status:0,statusText:""});return t.type="error",t};var x=[301,302,303,307,308];_.redirect=function(t,e){if(-1===x.indexOf(e))throw new RangeError("Invalid status code");return new _(null,{status:e,headers:{location:t}})},e.DOMException=t.DOMException;try{new e.DOMException}catch(t){e.DOMException=function(t,e){this.message=t,this.name=e;var n=Error(t);this.stack=n.stack},e.DOMException.prototype=Object.create(Error.prototype),e.DOMException.prototype.constructor=e.DOMException}function k(t,n){return new Promise((function(r,o){var a=new m(t,n);if(a.signal&&a.signal.aborted)return o(new e.DOMException("Aborted","AbortError"));var s=new XMLHttpRequest;function u(){s.abort()}s.onload=function(){var t,e,n={status:s.status,statusText:s.statusText,headers:(t=s.getAllResponseHeaders()||"",e=new h,t.replace(/\r?\n[\t ]+/g," ").split(/\r?\n/).forEach((function(t){var n=t.split(":"),r=n.shift().trim();if(r){var i=n.join(":").trim();e.append(r,i)}})),e)};n.url="responseURL"in s?s.responseURL:n.headers.get("X-Request-URL");var i="response"in s?s.response:s.responseText;r(new _(i,n))},s.onerror=function(){o(new TypeError("Network request failed"))},s.ontimeout=function(){o(new TypeError("Network request failed"))},s.onabort=function(){o(new e.DOMException("Aborted","AbortError"))},s.open(a.method,a.url,!0),"include"===a.credentials?s.withCredentials=!0:"omit"===a.credentials&&(s.withCredentials=!1),"responseType"in s&&i&&(s.responseType="blob"),a.headers.forEach((function(t,e){s.setRequestHeader(e,t)})),a.signal&&(a.signal.addEventListener("abort",u),s.onreadystatechange=function(){4===s.readyState&&a.signal.removeEventListener("abort",u)}),s.send(void 0===a._bodyInit?null:a._bodyInit)}))}k.polyfill=!0,t.fetch||(t.fetch=k,t.Headers=h,t.Request=m,t.Response=_),e.Headers=h,e.Request=m,e.Response=_,e.fetch=k,Object.defineProperty(e,"__esModule",{value:!0})}({})}("undefined"!=typeof self?self:this)},function(t,e,n){"use strict";function r(t){var e=this;if(e instanceof r||(e=new r),e.tail=null,e.head=null,e.length=0,t&&"function"==typeof t.forEach)t.forEach((function(t){e.push(t)}));else if(arguments.length>0)for(var n=0,i=arguments.length;n<i;n++)e.push(arguments[n]);return e}function i(t,e,n){var r=e===t.head?new s(n,null,e,t):new s(n,e,e.next,t);return null===r.next&&(t.tail=r),null===r.prev&&(t.head=r),t.length++,r}function o(t,e){t.tail=new s(e,t.tail,null,t),t.head||(t.head=t.tail),t.length++}function a(t,e){t.head=new s(e,null,t.head,t),t.tail||(t.tail=t.head),t.length++}function s(t,e,n,r){if(!(this instanceof s))return new s(t,e,n,r);this.list=r,this.value=t,e?(e.next=this,this.prev=e):this.prev=null,n?(n.prev=this,this.next=n):this.next=null}t.exports=r,r.Node=s,r.create=r,r.prototype.removeNode=function(t){if(t.list!==this)throw new Error("removing node which does not belong to this list");var e=t.next,n=t.prev;return e&&(e.prev=n),n&&(n.next=e),t===this.head&&(this.head=e),t===this.tail&&(this.tail=n),t.list.length--,t.next=null,t.prev=null,t.list=null,e},r.prototype.unshiftNode=function(t){if(t!==this.head){t.list&&t.list.removeNode(t);var e=this.head;t.list=this,t.next=e,e&&(e.prev=t),this.head=t,this.tail||(this.tail=t),this.length++}},r.prototype.pushNode=function(t){if(t!==this.tail){t.list&&t.list.removeNode(t);var e=this.tail;t.list=this,t.prev=e,e&&(e.next=t),this.tail=t,this.head||(this.head=t),this.length++}},r.prototype.push=function(){for(var t=0,e=arguments.length;t<e;t++)o(this,arguments[t]);return this.length},r.prototype.unshift=function(){for(var t=0,e=arguments.length;t<e;t++)a(this,arguments[t]);return this.length},r.prototype.pop=function(){if(this.tail){var t=this.tail.value;return this.tail=this.tail.prev,this.tail?this.tail.next=null:this.head=null,this.length--,t}},r.prototype.shift=function(){if(this.head){var t=this.head.value;return this.head=this.head.next,this.head?this.head.prev=null:this.tail=null,this.length--,t}},r.prototype.forEach=function(t,e){e=e||this;for(var n=this.head,r=0;null!==n;r++)t.call(e,n.value,r,this),n=n.next},r.prototype.forEachReverse=function(t,e){e=e||this;for(var n=this.tail,r=this.length-1;null!==n;r--)t.call(e,n.value,r,this),n=n.prev},r.prototype.get=function(t){for(var e=0,n=this.head;null!==n&&e<t;e++)n=n.next;if(e===t&&null!==n)return n.value},r.prototype.getReverse=function(t){for(var e=0,n=this.tail;null!==n&&e<t;e++)n=n.prev;if(e===t&&null!==n)return n.value},r.prototype.map=function(t,e){e=e||this;for(var n=new r,i=this.head;null!==i;)n.push(t.call(e,i.value,this)),i=i.next;return n},r.prototype.mapReverse=function(t,e){e=e||this;for(var n=new r,i=this.tail;null!==i;)n.push(t.call(e,i.value,this)),i=i.prev;return n},r.prototype.reduce=function(t,e){var n,r=this.head;if(arguments.length>1)n=e;else{if(!this.head)throw new TypeError("Reduce of empty list with no initial value");r=this.head.next,n=this.head.value}for(var i=0;null!==r;i++)n=t(n,r.value,i),r=r.next;return n},r.prototype.reduceReverse=function(t,e){var n,r=this.tail;if(arguments.length>1)n=e;else{if(!this.tail)throw new TypeError("Reduce of empty list with no initial value");r=this.tail.prev,n=this.tail.value}for(var i=this.length-1;null!==r;i--)n=t(n,r.value,i),r=r.prev;return n},r.prototype.toArray=function(){for(var t=new Array(this.length),e=0,n=this.head;null!==n;e++)t[e]=n.value,n=n.next;return t},r.prototype.toArrayReverse=function(){for(var t=new Array(this.length),e=0,n=this.tail;null!==n;e++)t[e]=n.value,n=n.prev;return t},r.prototype.slice=function(t,e){(e=e||this.length)<0&&(e+=this.length),(t=t||0)<0&&(t+=this.length);var n=new r;if(e<t||e<0)return n;t<0&&(t=0),e>this.length&&(e=this.length);for(var i=0,o=this.head;null!==o&&i<t;i++)o=o.next;for(;null!==o&&i<e;i++,o=o.next)n.push(o.value);return n},r.prototype.sliceReverse=function(t,e){(e=e||this.length)<0&&(e+=this.length),(t=t||0)<0&&(t+=this.length);var n=new r;if(e<t||e<0)return n;t<0&&(t=0),e>this.length&&(e=this.length);for(var i=this.length,o=this.tail;null!==o&&i>e;i--)o=o.prev;for(;null!==o&&i>t;i--,o=o.prev)n.push(o.value);return n},r.prototype.splice=function(t,e){t>this.length&&(t=this.length-1),t<0&&(t=this.length+t);for(var n=0,r=this.head;null!==r&&n<t;n++)r=r.next;var o=[];for(n=0;r&&n<e;n++)o.push(r.value),r=this.removeNode(r);null===r&&(r=this.tail),r!==this.head&&r!==this.tail&&(r=r.prev);for(n=2;n<arguments.length;n++)r=i(this,r,arguments[n]);return o},r.prototype.reverse=function(){for(var t=this.head,e=this.tail,n=t;null!==n;n=n.prev){var r=n.prev;n.prev=n.next,n.next=r}return this.head=e,this.tail=t,this};try{n(484)(r)}catch(t){}},function(t,e,n){"use strict";t.exports=function(t){t.prototype[Symbol.iterator]=function*(){for(let t=this.head;t;t=t.next)yield t.value}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return c}));var r=n(498),i=n(497),o=n(6),a=n(8),s=n(26);n(496),n(499);function u(){var t,e,n,a,s,u=0,f=1,c=o.c,l=!1;function h(e){return isNaN(e=+e)?s:c(0===n?.5:(e=(a(e)-t)*n,l?Math.max(0,Math.min(1,e)):e))}function d(t){return function(e){var n,r;return arguments.length?([n,r]=e,c=t(n,r),h):[c(0),c(1)]}}return h.domain=function(r){return arguments.length?([u,f]=r,t=a(u=+u),e=a(f=+f),n=t===e?0:1/(e-t),h):[u,f]},h.clamp=function(t){return arguments.length?(l=!!t,h):l},h.interpolator=function(t){return arguments.length?(c=t,h):c},h.range=d(r.a),h.rangeRound=d(i.a),h.unknown=function(t){return arguments.length?(s=t,h):s},function(r){return a=r,t=r(u),e=r(f),n=t===e?0:1/(e-t),h}}function f(t,e){return e.domain(t.domain()).interpolator(t.interpolator()).clamp(t.clamp()).unknown(t.unknown())}function c(){var t=Object(s.b)(u()(o.c));return t.copy=function(){return f(t,c())},a.a.apply(t,arguments)}},function(t,e,n){"use strict";e.a=function(t){var e;return 1===t.length&&(e=t,t=function(t,n){return(r=e(t))<(i=n)?-1:r>i?1:r>=i?0:NaN;var r,i}),{left:function(e,n,r,i){for(null==r&&(r=0),null==i&&(i=e.length);r<i;){var o=r+i>>>1;t(e[o],n)<0?r=o+1:i=o}return r},right:function(e,n,r,i){for(null==r&&(r=0),null==i&&(i=e.length);r<i;){var o=r+i>>>1;t(e[o],n)>0?i=o:r=o+1}return r}}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return c}));var r={},i={};function o(t){return new Function("d","return {"+t.map((function(t,e){return JSON.stringify(t)+": d["+e+'] || ""'})).join(",")+"}")}function a(t){var e=Object.create(null),n=[];return t.forEach((function(t){for(var r in t)r in e||n.push(e[r]=r)})),n}function s(t,e){var n=t+"",r=n.length;return r<e?new Array(e-r+1).join(0)+n:n}function u(t){var e,n=t.getUTCHours(),r=t.getUTCMinutes(),i=t.getUTCSeconds(),o=t.getUTCMilliseconds();return isNaN(t)?"Invalid Date":((e=t.getUTCFullYear())<0?"-"+s(-e,6):e>9999?"+"+s(e,6):s(e,4))+"-"+s(t.getUTCMonth()+1,2)+"-"+s(t.getUTCDate(),2)+(o?"T"+s(n,2)+":"+s(r,2)+":"+s(i,2)+"."+s(o,3)+"Z":i?"T"+s(n,2)+":"+s(r,2)+":"+s(i,2)+"Z":r||n?"T"+s(n,2)+":"+s(r,2)+"Z":"")}var f=function(t){var e=new RegExp('["'+t+"\n\r]"),n=t.charCodeAt(0);function s(t,e){var o,a=[],s=t.length,u=0,f=0,c=s<=0,l=!1;function h(){if(c)return i;if(l)return l=!1,r;var e,o,a=u;if(34===t.charCodeAt(a)){for(;u++<s&&34!==t.charCodeAt(u)||34===t.charCodeAt(++u););return(e=u)>=s?c=!0:10===(o=t.charCodeAt(u++))?l=!0:13===o&&(l=!0,10===t.charCodeAt(u)&&++u),t.slice(a+1,e-1).replace(/""/g,'"')}for(;u<s;){if(10===(o=t.charCodeAt(e=u++)))l=!0;else if(13===o)l=!0,10===t.charCodeAt(u)&&++u;else if(o!==n)continue;return t.slice(a,e)}return c=!0,t.slice(a,s)}for(10===t.charCodeAt(s-1)&&--s,13===t.charCodeAt(s-1)&&--s;(o=h())!==i;){for(var d=[];o!==r&&o!==i;)d.push(o),o=h();e&&null==(d=e(d,f++))||a.push(d)}return a}function f(e,n){return e.map((function(e){return n.map((function(t){return l(e[t])})).join(t)}))}function c(e){return e.map(l).join(t)}function l(t){return null==t?"":t instanceof Date?u(t):e.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,e){var n,r,i=s(t,(function(t,i){if(n)return n(t,i-1);r=t,n=e?function(t,e){var n=o(t);return function(r,i){return e(n(r),i,t)}}(t,e):o(t)}));return i.columns=r||[],i},parseRows:s,format:function(e,n){return null==n&&(n=a(e)),[n.map(l).join(t)].concat(f(e,n)).join("\n")},formatBody:function(t,e){return null==e&&(e=a(t)),f(t,e).join("\n")},formatRows:function(t){return t.map(c).join("\n")},formatRow:c,formatValue:l}}("\t"),c=(f.parse,f.parseRows);f.format,f.formatBody,f.formatRows,f.formatRow,f.formatValue},function(t,e,n){"use strict";var r=function(t){for(var e=t.length/6|0,n=new Array(e),r=0;r<e;)n[r]="#"+t.slice(6*r,6*++r);return n};function i(t){var e=t.length;return function(n){return t[Math.max(0,Math.min(e-1,Math.floor(n*e)))]}}e.a=i(r("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725")),i(r("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),i(r("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),i(r("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"))},function(t,e,n){"use strict";n.d(e,"a",(function(){return a}));var r=function(t,e,n){t=+t,e=+e,n=(i=arguments.length)<2?(e=t,t=0,1):i<3?1:+n;for(var r=-1,i=0|Math.max(0,Math.ceil((e-t)/n)),o=new Array(i);++r<i;)o[r]=t+r*n;return o},i=n(8),o=n(88);function a(){var t,e,n=Object(o.a)().unknown(void 0),s=n.domain,u=n.range,f=0,c=1,l=!1,h=0,d=0,p=.5;function g(){var n=s().length,i=c<f,o=i?c:f,a=i?f:c;t=(a-o)/Math.max(1,n-h+2*d),l&&(t=Math.floor(t)),o+=(a-o-t*(n-h))*p,e=t*(1-h),l&&(o=Math.round(o),e=Math.round(e));var g=r(n).map((function(e){return o+t*e}));return u(i?g.reverse():g)}return delete n.unknown,n.domain=function(t){return arguments.length?(s(t),g()):s()},n.range=function(t){return arguments.length?([f,c]=t,f=+f,c=+c,g()):[f,c]},n.rangeRound=function(t){return[f,c]=t,f=+f,c=+c,l=!0,g()},n.bandwidth=function(){return e},n.step=function(){return t},n.round=function(t){return arguments.length?(l=!!t,g()):l},n.padding=function(t){return arguments.length?(h=Math.min(1,d=+t),g()):h},n.paddingInner=function(t){return arguments.length?(h=Math.min(1,t),g()):h},n.paddingOuter=function(t){return arguments.length?(d=+t,g()):d},n.align=function(t){return arguments.length?(p=Math.max(0,Math.min(1,t)),g()):p},n.copy=function(){return a(s(),[f,c]).round(l).paddingInner(h).paddingOuter(d).align(p)},i.b.apply(g(),arguments)}},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var r=function(t){return t};function i(t,...e){return o(t,r,r,e)}function o(t,e,n,r){return function t(i,o){if(o>=r.length)return n(i);const a=new Map,s=r[o++];let u=-1;for(const t of i){const e=s(t,++u,i),n=a.get(e);n?n.push(t):a.set(e,[t])}for(const[e,n]of a)a.set(e,t(n,o));return e(a)}(t,0)}},,,,,,function(t,e,n){"use strict";n.d(e,"b",(function(){return a})),n.d(e,"c",(function(){return s}));var r=Math.sqrt(50),i=Math.sqrt(10),o=Math.sqrt(2);function a(t,e,n){var a=(e-t)/Math.max(0,n),s=Math.floor(Math.log(a)/Math.LN10),u=a/Math.pow(10,s);return s>=0?(u>=r?10:u>=i?5:u>=o?2:1)*Math.pow(10,s):-Math.pow(10,-s)/(u>=r?10:u>=i?5:u>=o?2:1)}function s(t,e,n){var a=Math.abs(e-t)/Math.max(0,n),s=Math.pow(10,Math.floor(Math.log(a)/Math.LN10)),u=a/s;return u>=r?s*=10:u>=i?s*=5:u>=o&&(s*=2),e<t?-s:s}e.a=function(t,e,n){var r,i,o,s,u=-1;if(n=+n,(t=+t)===(e=+e)&&n>0)return[t];if((r=e<t)&&(i=t,t=e,e=i),0===(s=a(t,e,n))||!isFinite(s))return[];if(s>0)for(t=Math.ceil(t/s),e=Math.floor(e/s),o=new Array(i=Math.ceil(e-t+1));++u<i;)o[u]=(t+u)*s;else for(s=-s,t=Math.floor(t*s),e=Math.ceil(e*s),o=new Array(i=Math.ceil(e-t+1));++u<i;)o[u]=(t+u)/s;return r&&o.reverse(),o}},function(t,e,n){"use strict";e.a=function(t,e){return t=+t,e=+e,function(n){return Math.round(t*(1-n)+e*n)}}},function(t,e,n){"use strict";var r=function(t,e,n){t.prototype=e.prototype=n,n.constructor=t};function i(t,e){var n=Object.create(t.prototype);for(var r in e)n[r]=e[r];return n}function o(){}var a="\\s*([+-]?\\d+)\\s*",s="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",u="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",f=/^#([0-9a-f]{3,8})$/,c=new RegExp("^rgb\\("+[a,a,a]+"\\)$"),l=new RegExp("^rgb\\("+[u,u,u]+"\\)$"),h=new RegExp("^rgba\\("+[a,a,a,s]+"\\)$"),d=new RegExp("^rgba\\("+[u,u,u,s]+"\\)$"),p=new RegExp("^hsl\\("+[s,u,u]+"\\)$"),g=new RegExp("^hsla\\("+[s,u,u,s]+"\\)$"),v={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function b(){return this.rgb().formatHex()}function y(){return this.rgb().formatRgb()}function m(t){var e,n;return t=(t+"").trim().toLowerCase(),(e=f.exec(t))?(n=e[1].length,e=parseInt(e[1],16),6===n?w(e):3===n?new E(e>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):8===n?_(e>>24&255,e>>16&255,e>>8&255,(255&e)/255):4===n?_(e>>12&15|e>>8&240,e>>8&15|e>>4&240,e>>4&15|240&e,((15&e)<<4|15&e)/255):null):(e=c.exec(t))?new E(e[1],e[2],e[3],1):(e=l.exec(t))?new E(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=h.exec(t))?_(e[1],e[2],e[3],e[4]):(e=d.exec(t))?_(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=p.exec(t))?T(e[1],e[2]/100,e[3]/100,1):(e=g.exec(t))?T(e[1],e[2]/100,e[3]/100,e[4]):v.hasOwnProperty(t)?w(v[t]):"transparent"===t?new E(NaN,NaN,NaN,0):null}function w(t){return new E(t>>16&255,t>>8&255,255&t,1)}function _(t,e,n,r){return r<=0&&(t=e=n=NaN),new E(t,e,n,r)}function x(t){return t instanceof o||(t=m(t)),t?new E((t=t.rgb()).r,t.g,t.b,t.opacity):new E}function k(t,e,n,r){return 1===arguments.length?x(t):new E(t,e,n,null==r?1:r)}function E(t,e,n,r){this.r=+t,this.g=+e,this.b=+n,this.opacity=+r}function S(){return"#"+O(this.r)+O(this.g)+O(this.b)}function A(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function O(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function T(t,e,n,r){return r<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new R(t,e,n,r)}function M(t){if(t instanceof R)return new R(t.h,t.s,t.l,t.opacity);if(t instanceof o||(t=m(t)),!t)return new R;if(t instanceof R)return t;var e=(t=t.rgb()).r/255,n=t.g/255,r=t.b/255,i=Math.min(e,n,r),a=Math.max(e,n,r),s=NaN,u=a-i,f=(a+i)/2;return u?(s=e===a?(n-r)/u+6*(n<r):n===a?(r-e)/u+2:(e-n)/u+4,u/=f<.5?a+i:2-a-i,s*=60):u=f>0&&f<1?0:s,new R(s,u,f,t.opacity)}function R(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function j(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}function L(t,e,n,r,i){var o=t*t,a=o*t;return((1-3*t+3*o-a)*e+(4-6*o+3*a)*n+(1+3*t+3*o-3*a)*r+a*i)/6}r(o,m,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:b,formatHex:b,formatHsl:function(){return M(this).formatHsl()},formatRgb:y,toString:y}),r(E,k,i(o,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new E(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new E(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:S,formatHex:S,formatRgb:A,toString:A})),r(R,(function(t,e,n,r){return 1===arguments.length?M(t):new R(t,e,n,null==r?1:r)}),i(o,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new R(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new R(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*e,i=2*n-r;return new E(j(t>=240?t-240:t+120,i,r),j(t,i,r),j(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));var P=function(t){return function(){return t}};function I(t,e){return function(n){return t+n*e}}function N(t){return 1==(t=+t)?C:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(r){return Math.pow(t+r*e,n)}}(e,n,t):P(isNaN(e)?n:e)}}function C(t,e){var n=e-t;return n?I(t,n):P(isNaN(t)?e:t)}var B=function t(e){var n=N(e);function r(t,e){var r=n((t=k(t)).r,(e=k(e)).r),i=n(t.g,e.g),o=n(t.b,e.b),a=C(t.opacity,e.opacity);return function(e){return t.r=r(e),t.g=i(e),t.b=o(e),t.opacity=a(e),t+""}}return r.gamma=t,r}(1);function z(t){return function(e){var n,r,i=e.length,o=new Array(i),a=new Array(i),s=new Array(i);for(n=0;n<i;++n)r=k(e[n]),o[n]=r.r||0,a[n]=r.g||0,s[n]=r.b||0;return o=t(o),a=t(a),s=t(s),r.opacity=1,function(t){return r.r=o(t),r.g=a(t),r.b=s(t),r+""}}}z((function(t){var e=t.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,e-1):Math.floor(n*e),i=t[r],o=t[r+1],a=r>0?t[r-1]:2*i-o,s=r<e-1?t[r+2]:2*o-i;return L((n-r/e)*e,a,i,o,s)}})),z((function(t){var e=t.length;return function(n){var r=Math.floor(((n%=1)<0?++n:n)*e),i=t[(r+e-1)%e],o=t[r%e],a=t[(r+1)%e],s=t[(r+2)%e];return L((n-r/e)*e,i,o,a,s)}}));var F=function(t,e){e||(e=[]);var n,r=t?Math.min(e.length,t.length):0,i=e.slice();return function(o){for(n=0;n<r;++n)i[n]=t[n]*(1-o)+e[n]*o;return i}};function U(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)}function D(t,e){var n,r=e?e.length:0,i=t?Math.min(r,t.length):0,o=new Array(i),a=new Array(r);for(n=0;n<i;++n)o[n]=$(t[n],e[n]);for(;n<r;++n)a[n]=e[n];return function(t){for(n=0;n<i;++n)a[n]=o[n](t);return a}}var Z=function(t,e){var n=new Date;return t=+t,e=+e,function(r){return n.setTime(t*(1-r)+e*r),n}},q=n(66),W=function(t,e){var n,r={},i={};for(n in null!==t&&"object"==typeof t||(t={}),null!==e&&"object"==typeof e||(e={}),e)n in t?r[n]=$(t[n],e[n]):i[n]=e[n];return function(t){for(n in r)i[n]=r[n](t);return i}},H=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,G=new RegExp(H.source,"g");var Y=function(t,e){var n,r,i,o=H.lastIndex=G.lastIndex=0,a=-1,s=[],u=[];for(t+="",e+="";(n=H.exec(t))&&(r=G.exec(e));)(i=r.index)>o&&(i=e.slice(o,i),s[a]?s[a]+=i:s[++a]=i),(n=n[0])===(r=r[0])?s[a]?s[a]+=r:s[++a]=r:(s[++a]=null,u.push({i:a,x:Object(q.a)(n,r)})),o=G.lastIndex;return o<e.length&&(i=e.slice(o),s[a]?s[a]+=i:s[++a]=i),s.length<2?u[0]?function(t){return function(e){return t(e)+""}}(u[0].x):function(t){return function(){return t}}(e):(e=u.length,function(t){for(var n,r=0;r<e;++r)s[(n=u[r]).i]=n.x(t);return s.join("")})},$=e.a=function(t,e){var n,r=typeof e;return null==e||"boolean"===r?P(e):("number"===r?q.a:"string"===r?(n=m(e))?(e=n,B):Y:e instanceof m?B:e instanceof Date?Z:U(e)?F:Array.isArray(e)?D:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?W:q.a)(t,e)}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o})),n.d(e,"b",(function(){return a}));var r,i,o,a,s=n(20),u=n(136),f=n(39),c=function(t,e){var n=Object(f.a)(t,e);if(!n)return t+"";var r=n[0],i=n[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")},l={"%":function(t,e){return(100*t).toFixed(e)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,e){return t.toExponential(e)},f:function(t,e){return t.toFixed(e)},g:function(t,e){return t.toPrecision(e)},o:function(t){return Math.round(t).toString(8)},p:function(t,e){return c(100*t,e)},r:c,s:function(t,e){var n=Object(f.a)(t,e);if(!n)return t+"";var i=n[0],o=n[1],a=o-(r=3*Math.max(-8,Math.min(8,Math.floor(o/3))))+1,s=i.length;return a===s?i:a>s?i+new Array(a-s+1).join("0"):a>0?i.slice(0,a)+"."+i.slice(a):"0."+new Array(1-a).join("0")+Object(f.a)(t,Math.max(0,e+a-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},h=function(t){return t},d=Array.prototype.map,p=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];i=function(t){var e,n,i=void 0===t.grouping||void 0===t.thousands?h:(e=d.call(t.grouping,Number),n=t.thousands+"",function(t,r){for(var i=t.length,o=[],a=0,s=e[0],u=0;i>0&&s>0&&(u+s+1>r&&(s=Math.max(1,r-u)),o.push(t.substring(i-=s,i+s)),!((u+=s+1)>r));)s=e[a=(a+1)%e.length];return o.reverse().join(n)}),o=void 0===t.currency?"":t.currency[0]+"",a=void 0===t.currency?"":t.currency[1]+"",f=void 0===t.decimal?".":t.decimal+"",c=void 0===t.numerals?h:function(t){return function(e){return e.replace(/[0-9]/g,(function(e){return t[+e]}))}}(d.call(t.numerals,String)),g=void 0===t.percent?"%":t.percent+"",v=void 0===t.minus?"-":t.minus+"",b=void 0===t.nan?"NaN":t.nan+"";function y(t){var e=(t=Object(u.a)(t)).fill,n=t.align,s=t.sign,h=t.symbol,d=t.zero,y=t.width,m=t.comma,w=t.precision,_=t.trim,x=t.type;"n"===x?(m=!0,x="g"):l[x]||(void 0===w&&(w=12),_=!0,x="g"),(d||"0"===e&&"="===n)&&(d=!0,e="0",n="=");var k="$"===h?o:"#"===h&&/[boxX]/.test(x)?"0"+x.toLowerCase():"",E="$"===h?a:/[%p]/.test(x)?g:"",S=l[x],A=/[defgprs%]/.test(x);function O(t){var o,a,u,l=k,h=E;if("c"===x)h=S(t)+h,t="";else{var g=(t=+t)<0||1/t<0;if(t=isNaN(t)?b:S(Math.abs(t),w),_&&(t=function(t){t:for(var e,n=t.length,r=1,i=-1;r<n;++r)switch(t[r]){case".":i=e=r;break;case"0":0===i&&(i=r),e=r;break;default:if(!+t[r])break t;i>0&&(i=0)}return i>0?t.slice(0,i)+t.slice(e+1):t}(t)),g&&0==+t&&"+"!==s&&(g=!1),l=(g?"("===s?s:v:"-"===s||"("===s?"":s)+l,h=("s"===x?p[8+r/3]:"")+h+(g&&"("===s?")":""),A)for(o=-1,a=t.length;++o<a;)if(48>(u=t.charCodeAt(o))||u>57){h=(46===u?f+t.slice(o+1):t.slice(o))+h,t=t.slice(0,o);break}}m&&!d&&(t=i(t,1/0));var O=l.length+t.length+h.length,T=O<y?new Array(y-O+1).join(e):"";switch(m&&d&&(t=i(T+t,T.length?y-h.length:1/0),T=""),n){case"<":t=l+t+h+T;break;case"=":t=l+T+t+h;break;case"^":t=T.slice(0,O=T.length>>1)+l+t+h+T.slice(O);break;default:t=T+l+t+h}return c(t)}return w=void 0===w?6:/[gprs]/.test(x)?Math.max(1,Math.min(21,w)):Math.max(0,Math.min(20,w)),O.toString=function(){return t+""},O}return{format:y,formatPrefix:function(t,e){var n=y(((t=Object(u.a)(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(Object(s.a)(e)/3))),i=Math.pow(10,-r),o=p[8+r/3];return function(t){return n(i*t)+o}}}}({decimal:".",thousands:",",grouping:[3],currency:["$",""],minus:"-"}),o=i.format,a=i.formatPrefix}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=0.worker.js.map